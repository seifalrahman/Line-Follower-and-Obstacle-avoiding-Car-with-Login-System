
FINAL_ITI_MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000166  00800060  000045c2  00004656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008001c6  008001c6  000047bc  2**0
                  ALLOC
  3 .stab         000041e8  00000000  00000000  000047bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001380  00000000  00000000  000089a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000a0b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d847  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ea20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000eed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f844  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__vector_1>
       8:	0c 94 8b 1c 	jmp	0x3916	; 0x3916 <__vector_2>
       c:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3d       	cpi	r26, 0xD5	; 213
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <main>
      8a:	0c 94 df 22 	jmp	0x45be	; 0x45be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ea       	ldi	r26, 0xA6	; 166
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c4 22 	jmp	0x4588	; 0x4588 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b4 22 	jmp	0x4568	; 0x4568 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b4 22 	jmp	0x4568	; 0x4568 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ea       	ldi	r24, 0xA6	; 166
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c4 22 	jmp	0x4588	; 0x4588 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b0 22 	jmp	0x4560	; 0x4560 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 ea       	ldi	r22, 0xA6	; 166
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cc 22 	jmp	0x4598	; 0x4598 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b4 22 	jmp	0x4568	; 0x4568 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b4 22 	jmp	0x4568	; 0x4568 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b4 22 	jmp	0x4568	; 0x4568 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d4 22 	jmp	0x45a8	; 0x45a8 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b0 22 	jmp	0x4560	; 0x4560 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 cc 22 	jmp	0x4598	; 0x4598 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 55       	subi	r30, 0x52	; 82
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_VidSetPinDirection>:
#include "BIT_MATH.h"
#include <avr/io.h>
#include "DIO_Interface.h"

void DIO_VidSetPinDirection(u8 copy_u8port ,u8 copy_u8Pin, u8 copy_U8Direction)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	27 97       	sbiw	r28, 0x07	; 7
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	6a 83       	std	Y+2, r22	; 0x02
     e46:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_U8Direction==1)
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	09 f0       	breq	.+2      	; 0xe50 <DIO_VidSetPinDirection+0x22>
     e4e:	6f c0       	rjmp	.+222    	; 0xf2e <DIO_VidSetPinDirection+0x100>
	{
		switch(copy_u8port)
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	3f 83       	std	Y+7, r19	; 0x07
     e58:	2e 83       	std	Y+6, r18	; 0x06
     e5a:	8e 81       	ldd	r24, Y+6	; 0x06
     e5c:	9f 81       	ldd	r25, Y+7	; 0x07
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	91 05       	cpc	r25, r1
     e62:	49 f1       	breq	.+82     	; 0xeb6 <DIO_VidSetPinDirection+0x88>
     e64:	2e 81       	ldd	r18, Y+6	; 0x06
     e66:	3f 81       	ldd	r19, Y+7	; 0x07
     e68:	22 30       	cpi	r18, 0x02	; 2
     e6a:	31 05       	cpc	r19, r1
     e6c:	2c f4       	brge	.+10     	; 0xe78 <DIO_VidSetPinDirection+0x4a>
     e6e:	8e 81       	ldd	r24, Y+6	; 0x06
     e70:	9f 81       	ldd	r25, Y+7	; 0x07
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	61 f0       	breq	.+24     	; 0xe8e <DIO_VidSetPinDirection+0x60>
     e76:	d2 c0       	rjmp	.+420    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
     e78:	2e 81       	ldd	r18, Y+6	; 0x06
     e7a:	3f 81       	ldd	r19, Y+7	; 0x07
     e7c:	22 30       	cpi	r18, 0x02	; 2
     e7e:	31 05       	cpc	r19, r1
     e80:	71 f1       	breq	.+92     	; 0xede <DIO_VidSetPinDirection+0xb0>
     e82:	8e 81       	ldd	r24, Y+6	; 0x06
     e84:	9f 81       	ldd	r25, Y+7	; 0x07
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	91 05       	cpc	r25, r1
     e8a:	e9 f1       	breq	.+122    	; 0xf06 <DIO_VidSetPinDirection+0xd8>
     e8c:	c7 c0       	rjmp	.+398    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
		{
			case 0: SET_BIT(DDRA,copy_u8Pin);break;
     e8e:	aa e3       	ldi	r26, 0x3A	; 58
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ea e3       	ldi	r30, 0x3A	; 58
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_VidSetPinDirection+0x7e>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_VidSetPinDirection+0x7a>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	b3 c0       	rjmp	.+358    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
			case 1: SET_BIT(DDRB,copy_u8Pin);break;
     eb6:	a7 e3       	ldi	r26, 0x37	; 55
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e7 e3       	ldi	r30, 0x37	; 55
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_VidSetPinDirection+0xa6>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_VidSetPinDirection+0xa2>
     ed8:	84 2b       	or	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	9f c0       	rjmp	.+318    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
			case 2: SET_BIT(DDRC,copy_u8Pin);break;
     ede:	a4 e3       	ldi	r26, 0x34	; 52
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e4 e3       	ldi	r30, 0x34	; 52
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_VidSetPinDirection+0xce>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_VidSetPinDirection+0xca>
     f00:	84 2b       	or	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	8b c0       	rjmp	.+278    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
			case 3: SET_BIT(DDRD,copy_u8Pin);break;
     f06:	a1 e3       	ldi	r26, 0x31	; 49
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e1 e3       	ldi	r30, 0x31	; 49
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_VidSetPinDirection+0xf6>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_VidSetPinDirection+0xf2>
     f28:	84 2b       	or	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	77 c0       	rjmp	.+238    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if(copy_U8Direction==0)
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	88 23       	and	r24, r24
     f32:	09 f0       	breq	.+2      	; 0xf36 <DIO_VidSetPinDirection+0x108>
     f34:	73 c0       	rjmp	.+230    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	3d 83       	std	Y+5, r19	; 0x05
     f3e:	2c 83       	std	Y+4, r18	; 0x04
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	9d 81       	ldd	r25, Y+5	; 0x05
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	91 05       	cpc	r25, r1
     f48:	59 f1       	breq	.+86     	; 0xfa0 <DIO_VidSetPinDirection+0x172>
     f4a:	2c 81       	ldd	r18, Y+4	; 0x04
     f4c:	3d 81       	ldd	r19, Y+5	; 0x05
     f4e:	22 30       	cpi	r18, 0x02	; 2
     f50:	31 05       	cpc	r19, r1
     f52:	2c f4       	brge	.+10     	; 0xf5e <DIO_VidSetPinDirection+0x130>
     f54:	8c 81       	ldd	r24, Y+4	; 0x04
     f56:	9d 81       	ldd	r25, Y+5	; 0x05
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	69 f0       	breq	.+26     	; 0xf76 <DIO_VidSetPinDirection+0x148>
     f5c:	5f c0       	rjmp	.+190    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
     f5e:	2c 81       	ldd	r18, Y+4	; 0x04
     f60:	3d 81       	ldd	r19, Y+5	; 0x05
     f62:	22 30       	cpi	r18, 0x02	; 2
     f64:	31 05       	cpc	r19, r1
     f66:	89 f1       	breq	.+98     	; 0xfca <DIO_VidSetPinDirection+0x19c>
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	9d 81       	ldd	r25, Y+5	; 0x05
     f6c:	83 30       	cpi	r24, 0x03	; 3
     f6e:	91 05       	cpc	r25, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <DIO_VidSetPinDirection+0x146>
     f72:	40 c0       	rjmp	.+128    	; 0xff4 <DIO_VidSetPinDirection+0x1c6>
     f74:	53 c0       	rjmp	.+166    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
		{
			case 0: CLR_BIT(DDRA,copy_u8Pin);break;
     f76:	aa e3       	ldi	r26, 0x3A	; 58
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	ea e3       	ldi	r30, 0x3A	; 58
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_VidSetPinDirection+0x166>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_VidSetPinDirection+0x162>
     f98:	80 95       	com	r24
     f9a:	84 23       	and	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	3e c0       	rjmp	.+124    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
			case 1: CLR_BIT(DDRB,copy_u8Pin);break;
     fa0:	a7 e3       	ldi	r26, 0x37	; 55
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e7 e3       	ldi	r30, 0x37	; 55
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_VidSetPinDirection+0x190>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_VidSetPinDirection+0x18c>
     fc2:	80 95       	com	r24
     fc4:	84 23       	and	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	29 c0       	rjmp	.+82     	; 0x101c <DIO_VidSetPinDirection+0x1ee>
			case 2: CLR_BIT(DDRC,copy_u8Pin);break;
     fca:	a4 e3       	ldi	r26, 0x34	; 52
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e4 e3       	ldi	r30, 0x34	; 52
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_VidSetPinDirection+0x1ba>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_VidSetPinDirection+0x1b6>
     fec:	80 95       	com	r24
     fee:	84 23       	and	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	14 c0       	rjmp	.+40     	; 0x101c <DIO_VidSetPinDirection+0x1ee>
			case 3: CLR_BIT(DDRD,copy_u8Pin);break;
     ff4:	a1 e3       	ldi	r26, 0x31	; 49
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e1 e3       	ldi	r30, 0x31	; 49
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_VidSetPinDirection+0x1e4>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_VidSetPinDirection+0x1e0>
    1016:	80 95       	com	r24
    1018:	84 23       	and	r24, r20
    101a:	8c 93       	st	X, r24
		}

	}
}
    101c:	27 96       	adiw	r28, 0x07	; 7
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <DIO_VidSetPinValue>:

void DIO_VidSetPinValue(u8 copy_U8port ,u8 copy_U8Pin , u8 copy_U8Value)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	27 97       	sbiw	r28, 0x07	; 7
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	6a 83       	std	Y+2, r22	; 0x02
    1046:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_U8Value==1)
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	09 f0       	breq	.+2      	; 0x1050 <DIO_VidSetPinValue+0x22>
    104e:	6f c0       	rjmp	.+222    	; 0x112e <DIO_VidSetPinValue+0x100>
	{
		switch(copy_U8port)
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	3f 83       	std	Y+7, r19	; 0x07
    1058:	2e 83       	std	Y+6, r18	; 0x06
    105a:	8e 81       	ldd	r24, Y+6	; 0x06
    105c:	9f 81       	ldd	r25, Y+7	; 0x07
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	91 05       	cpc	r25, r1
    1062:	49 f1       	breq	.+82     	; 0x10b6 <DIO_VidSetPinValue+0x88>
    1064:	2e 81       	ldd	r18, Y+6	; 0x06
    1066:	3f 81       	ldd	r19, Y+7	; 0x07
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	2c f4       	brge	.+10     	; 0x1078 <DIO_VidSetPinValue+0x4a>
    106e:	8e 81       	ldd	r24, Y+6	; 0x06
    1070:	9f 81       	ldd	r25, Y+7	; 0x07
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	61 f0       	breq	.+24     	; 0x108e <DIO_VidSetPinValue+0x60>
    1076:	d2 c0       	rjmp	.+420    	; 0x121c <DIO_VidSetPinValue+0x1ee>
    1078:	2e 81       	ldd	r18, Y+6	; 0x06
    107a:	3f 81       	ldd	r19, Y+7	; 0x07
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	71 f1       	breq	.+92     	; 0x10de <DIO_VidSetPinValue+0xb0>
    1082:	8e 81       	ldd	r24, Y+6	; 0x06
    1084:	9f 81       	ldd	r25, Y+7	; 0x07
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	91 05       	cpc	r25, r1
    108a:	e9 f1       	breq	.+122    	; 0x1106 <DIO_VidSetPinValue+0xd8>
    108c:	c7 c0       	rjmp	.+398    	; 0x121c <DIO_VidSetPinValue+0x1ee>
		{
			case 0: SET_BIT(PORTA,copy_U8Pin);
    108e:	ab e3       	ldi	r26, 0x3B	; 59
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	eb e3       	ldi	r30, 0x3B	; 59
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_VidSetPinValue+0x7e>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_VidSetPinValue+0x7a>
    10b0:	84 2b       	or	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	b3 c0       	rjmp	.+358    	; 0x121c <DIO_VidSetPinValue+0x1ee>
				break;
			case 1: SET_BIT(PORTB,copy_U8Pin);
    10b6:	a8 e3       	ldi	r26, 0x38	; 56
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e8 e3       	ldi	r30, 0x38	; 56
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_VidSetPinValue+0xa6>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_VidSetPinValue+0xa2>
    10d8:	84 2b       	or	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	9f c0       	rjmp	.+318    	; 0x121c <DIO_VidSetPinValue+0x1ee>
				break;
			case 2: SET_BIT(PORTC,copy_U8Pin);
    10de:	a5 e3       	ldi	r26, 0x35	; 53
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e5 e3       	ldi	r30, 0x35	; 53
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_VidSetPinValue+0xce>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_VidSetPinValue+0xca>
    1100:	84 2b       	or	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	8b c0       	rjmp	.+278    	; 0x121c <DIO_VidSetPinValue+0x1ee>
				break;
			case 3: SET_BIT(PORTD,copy_U8Pin);
    1106:	a2 e3       	ldi	r26, 0x32	; 50
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e2 e3       	ldi	r30, 0x32	; 50
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_VidSetPinValue+0xf6>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_VidSetPinValue+0xf2>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	77 c0       	rjmp	.+238    	; 0x121c <DIO_VidSetPinValue+0x1ee>
				break;
		}
	}
	else if(copy_U8Value==0)
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	88 23       	and	r24, r24
    1132:	09 f0       	breq	.+2      	; 0x1136 <DIO_VidSetPinValue+0x108>
    1134:	73 c0       	rjmp	.+230    	; 0x121c <DIO_VidSetPinValue+0x1ee>
	{
		switch(copy_U8port)
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	3d 83       	std	Y+5, r19	; 0x05
    113e:	2c 83       	std	Y+4, r18	; 0x04
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	9d 81       	ldd	r25, Y+5	; 0x05
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	91 05       	cpc	r25, r1
    1148:	59 f1       	breq	.+86     	; 0x11a0 <DIO_VidSetPinValue+0x172>
    114a:	2c 81       	ldd	r18, Y+4	; 0x04
    114c:	3d 81       	ldd	r19, Y+5	; 0x05
    114e:	22 30       	cpi	r18, 0x02	; 2
    1150:	31 05       	cpc	r19, r1
    1152:	2c f4       	brge	.+10     	; 0x115e <DIO_VidSetPinValue+0x130>
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	69 f0       	breq	.+26     	; 0x1176 <DIO_VidSetPinValue+0x148>
    115c:	5f c0       	rjmp	.+190    	; 0x121c <DIO_VidSetPinValue+0x1ee>
    115e:	2c 81       	ldd	r18, Y+4	; 0x04
    1160:	3d 81       	ldd	r19, Y+5	; 0x05
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	89 f1       	breq	.+98     	; 0x11ca <DIO_VidSetPinValue+0x19c>
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	9d 81       	ldd	r25, Y+5	; 0x05
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	91 05       	cpc	r25, r1
    1170:	09 f4       	brne	.+2      	; 0x1174 <DIO_VidSetPinValue+0x146>
    1172:	40 c0       	rjmp	.+128    	; 0x11f4 <DIO_VidSetPinValue+0x1c6>
    1174:	53 c0       	rjmp	.+166    	; 0x121c <DIO_VidSetPinValue+0x1ee>
		{
			case 0: CLR_BIT(PORTA,copy_U8Pin);
    1176:	ab e3       	ldi	r26, 0x3B	; 59
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	eb e3       	ldi	r30, 0x3B	; 59
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_VidSetPinValue+0x166>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_VidSetPinValue+0x162>
    1198:	80 95       	com	r24
    119a:	84 23       	and	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	3e c0       	rjmp	.+124    	; 0x121c <DIO_VidSetPinValue+0x1ee>
				break;
			case 1: CLR_BIT(PORTB,copy_U8Pin);
    11a0:	a8 e3       	ldi	r26, 0x38	; 56
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e8 e3       	ldi	r30, 0x38	; 56
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_VidSetPinValue+0x190>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_VidSetPinValue+0x18c>
    11c2:	80 95       	com	r24
    11c4:	84 23       	and	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	29 c0       	rjmp	.+82     	; 0x121c <DIO_VidSetPinValue+0x1ee>
				break;
			case 2: CLR_BIT(PORTC,copy_U8Pin);
    11ca:	a5 e3       	ldi	r26, 0x35	; 53
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e5 e3       	ldi	r30, 0x35	; 53
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_VidSetPinValue+0x1ba>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_VidSetPinValue+0x1b6>
    11ec:	80 95       	com	r24
    11ee:	84 23       	and	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	14 c0       	rjmp	.+40     	; 0x121c <DIO_VidSetPinValue+0x1ee>
				break;
			case 3: CLR_BIT(PORTD,copy_U8Pin);
    11f4:	a2 e3       	ldi	r26, 0x32	; 50
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e2 e3       	ldi	r30, 0x32	; 50
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO_VidSetPinValue+0x1e4>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <DIO_VidSetPinValue+0x1e0>
    1216:	80 95       	com	r24
    1218:	84 23       	and	r24, r20
    121a:	8c 93       	st	X, r24
				break;
		}

	}
}
    121c:	27 96       	adiw	r28, 0x07	; 7
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <DIO_U8GetPinValue>:



u8 DIO_U8GetPinValue(u8 copy_u8port ,u8 copy_U8Pin)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <DIO_U8GetPinValue+0x6>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <DIO_U8GetPinValue+0x8>
    1236:	00 d0       	rcall	.+0      	; 0x1238 <DIO_U8GetPinValue+0xa>
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3d 83       	std	Y+5, r19	; 0x05
    1248:	2c 83       	std	Y+4, r18	; 0x04
    124a:	4c 81       	ldd	r20, Y+4	; 0x04
    124c:	5d 81       	ldd	r21, Y+5	; 0x05
    124e:	41 30       	cpi	r20, 0x01	; 1
    1250:	51 05       	cpc	r21, r1
    1252:	49 f1       	breq	.+82     	; 0x12a6 <DIO_U8GetPinValue+0x78>
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	9d 81       	ldd	r25, Y+5	; 0x05
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	91 05       	cpc	r25, r1
    125c:	34 f4       	brge	.+12     	; 0x126a <DIO_U8GetPinValue+0x3c>
    125e:	2c 81       	ldd	r18, Y+4	; 0x04
    1260:	3d 81       	ldd	r19, Y+5	; 0x05
    1262:	21 15       	cp	r18, r1
    1264:	31 05       	cpc	r19, r1
    1266:	61 f0       	breq	.+24     	; 0x1280 <DIO_U8GetPinValue+0x52>
    1268:	57 c0       	rjmp	.+174    	; 0x1318 <DIO_U8GetPinValue+0xea>
    126a:	4c 81       	ldd	r20, Y+4	; 0x04
    126c:	5d 81       	ldd	r21, Y+5	; 0x05
    126e:	42 30       	cpi	r20, 0x02	; 2
    1270:	51 05       	cpc	r21, r1
    1272:	61 f1       	breq	.+88     	; 0x12cc <DIO_U8GetPinValue+0x9e>
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	9d 81       	ldd	r25, Y+5	; 0x05
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	91 05       	cpc	r25, r1
    127c:	d1 f1       	breq	.+116    	; 0x12f2 <DIO_U8GetPinValue+0xc4>
    127e:	4c c0       	rjmp	.+152    	; 0x1318 <DIO_U8GetPinValue+0xea>
	{
		case 0:return GET_BIT(PINA,copy_U8Pin);break;
    1280:	e9 e3       	ldi	r30, 0x39	; 57
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_U8GetPinValue+0x6a>
    1294:	55 95       	asr	r21
    1296:	47 95       	ror	r20
    1298:	8a 95       	dec	r24
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_U8GetPinValue+0x66>
    129c:	ca 01       	movw	r24, r20
    129e:	58 2f       	mov	r21, r24
    12a0:	51 70       	andi	r21, 0x01	; 1
    12a2:	5b 83       	std	Y+3, r21	; 0x03
    12a4:	3a c0       	rjmp	.+116    	; 0x131a <DIO_U8GetPinValue+0xec>
		case 1:return GET_BIT(PINB,copy_U8Pin);break;
    12a6:	e6 e3       	ldi	r30, 0x36	; 54
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_U8GetPinValue+0x90>
    12ba:	55 95       	asr	r21
    12bc:	47 95       	ror	r20
    12be:	8a 95       	dec	r24
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_U8GetPinValue+0x8c>
    12c2:	ca 01       	movw	r24, r20
    12c4:	58 2f       	mov	r21, r24
    12c6:	51 70       	andi	r21, 0x01	; 1
    12c8:	5b 83       	std	Y+3, r21	; 0x03
    12ca:	27 c0       	rjmp	.+78     	; 0x131a <DIO_U8GetPinValue+0xec>
		case 2:return GET_BIT(PINC,copy_U8Pin);break;
    12cc:	e3 e3       	ldi	r30, 0x33	; 51
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a9 01       	movw	r20, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_U8GetPinValue+0xb6>
    12e0:	55 95       	asr	r21
    12e2:	47 95       	ror	r20
    12e4:	8a 95       	dec	r24
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_U8GetPinValue+0xb2>
    12e8:	ca 01       	movw	r24, r20
    12ea:	58 2f       	mov	r21, r24
    12ec:	51 70       	andi	r21, 0x01	; 1
    12ee:	5b 83       	std	Y+3, r21	; 0x03
    12f0:	14 c0       	rjmp	.+40     	; 0x131a <DIO_U8GetPinValue+0xec>
		case 3:return GET_BIT(PIND,copy_U8Pin);break;
    12f2:	e0 e3       	ldi	r30, 0x30	; 48
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	88 2f       	mov	r24, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a9 01       	movw	r20, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <DIO_U8GetPinValue+0xdc>
    1306:	55 95       	asr	r21
    1308:	47 95       	ror	r20
    130a:	8a 95       	dec	r24
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <DIO_U8GetPinValue+0xd8>
    130e:	ca 01       	movw	r24, r20
    1310:	58 2f       	mov	r21, r24
    1312:	51 70       	andi	r21, 0x01	; 1
    1314:	5b 83       	std	Y+3, r21	; 0x03
    1316:	01 c0       	rjmp	.+2      	; 0x131a <DIO_U8GetPinValue+0xec>
    1318:	02 c0       	rjmp	.+4      	; 0x131e <DIO_U8GetPinValue+0xf0>
	}
}
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	8e 83       	std	Y+6, r24	; 0x06
    131e:	8e 81       	ldd	r24, Y+6	; 0x06
    1320:	26 96       	adiw	r28, 0x06	; 6
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <DIO_VidSetPortValue>:


void DIO_VidSetPortValue(u8 copy_u8port ,u8 copy_U8Value)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <DIO_VidSetPortValue+0x6>
    1338:	00 d0       	rcall	.+0      	; 0x133a <DIO_VidSetPortValue+0x8>
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3c 83       	std	Y+4, r19	; 0x04
    134a:	2b 83       	std	Y+3, r18	; 0x03
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	91 05       	cpc	r25, r1
    1354:	d1 f0       	breq	.+52     	; 0x138a <DIO_VidSetPortValue+0x58>
    1356:	2b 81       	ldd	r18, Y+3	; 0x03
    1358:	3c 81       	ldd	r19, Y+4	; 0x04
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	2c f4       	brge	.+10     	; 0x136a <DIO_VidSetPortValue+0x38>
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	61 f0       	breq	.+24     	; 0x1380 <DIO_VidSetPortValue+0x4e>
    1368:	1e c0       	rjmp	.+60     	; 0x13a6 <DIO_VidSetPortValue+0x74>
    136a:	2b 81       	ldd	r18, Y+3	; 0x03
    136c:	3c 81       	ldd	r19, Y+4	; 0x04
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	81 f0       	breq	.+32     	; 0x1394 <DIO_VidSetPortValue+0x62>
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	81 f0       	breq	.+32     	; 0x139e <DIO_VidSetPortValue+0x6c>
    137e:	13 c0       	rjmp	.+38     	; 0x13a6 <DIO_VidSetPortValue+0x74>
	{
		case 0:PORTA=copy_U8Value;break;
    1380:	eb e3       	ldi	r30, 0x3B	; 59
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	80 83       	st	Z, r24
    1388:	0e c0       	rjmp	.+28     	; 0x13a6 <DIO_VidSetPortValue+0x74>
		case 1:PORTB=copy_U8Value;break;
    138a:	e8 e3       	ldi	r30, 0x38	; 56
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	80 83       	st	Z, r24
    1392:	09 c0       	rjmp	.+18     	; 0x13a6 <DIO_VidSetPortValue+0x74>
		case 2:PORTC=copy_U8Value;break;
    1394:	e5 e3       	ldi	r30, 0x35	; 53
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	80 83       	st	Z, r24
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <DIO_VidSetPortValue+0x74>
		case 3:PORTD=copy_U8Value;break;
    139e:	e2 e3       	ldi	r30, 0x32	; 50
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	80 83       	st	Z, r24
	}
}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection(u8 copy_u8port ,u8 copy_U8Direction)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <DIO_VidSetPortDirection+0x6>
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <DIO_VidSetPortDirection+0x8>
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3c 83       	std	Y+4, r19	; 0x04
    13cc:	2b 83       	std	Y+3, r18	; 0x03
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	91 05       	cpc	r25, r1
    13d6:	d1 f0       	breq	.+52     	; 0x140c <DIO_VidSetPortDirection+0x58>
    13d8:	2b 81       	ldd	r18, Y+3	; 0x03
    13da:	3c 81       	ldd	r19, Y+4	; 0x04
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	2c f4       	brge	.+10     	; 0x13ec <DIO_VidSetPortDirection+0x38>
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	61 f0       	breq	.+24     	; 0x1402 <DIO_VidSetPortDirection+0x4e>
    13ea:	1e c0       	rjmp	.+60     	; 0x1428 <DIO_VidSetPortDirection+0x74>
    13ec:	2b 81       	ldd	r18, Y+3	; 0x03
    13ee:	3c 81       	ldd	r19, Y+4	; 0x04
    13f0:	22 30       	cpi	r18, 0x02	; 2
    13f2:	31 05       	cpc	r19, r1
    13f4:	81 f0       	breq	.+32     	; 0x1416 <DIO_VidSetPortDirection+0x62>
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	91 05       	cpc	r25, r1
    13fe:	81 f0       	breq	.+32     	; 0x1420 <DIO_VidSetPortDirection+0x6c>
    1400:	13 c0       	rjmp	.+38     	; 0x1428 <DIO_VidSetPortDirection+0x74>
	{
		case 0:DDRA=copy_U8Direction;break;
    1402:	ea e3       	ldi	r30, 0x3A	; 58
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	80 83       	st	Z, r24
    140a:	0e c0       	rjmp	.+28     	; 0x1428 <DIO_VidSetPortDirection+0x74>
		case 1:DDRB=copy_U8Direction;break;
    140c:	e7 e3       	ldi	r30, 0x37	; 55
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	80 83       	st	Z, r24
    1414:	09 c0       	rjmp	.+18     	; 0x1428 <DIO_VidSetPortDirection+0x74>
		case 2:DDRC=copy_U8Direction;break;
    1416:	e4 e3       	ldi	r30, 0x34	; 52
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	80 83       	st	Z, r24
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <DIO_VidSetPortDirection+0x74>
		case 3:DDRD=copy_U8Direction;break;
    1420:	e1 e3       	ldi	r30, 0x31	; 49
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	80 83       	st	Z, r24
	}
}
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <DIO_VidToggelPinValue>:

void DIO_VidToggelPinValue(u8 copy_u8port ,u8 copy_U8Pin)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <DIO_VidToggelPinValue+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <DIO_VidToggelPinValue+0x8>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8port)
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	3c 83       	std	Y+4, r19	; 0x04
    144e:	2b 83       	std	Y+3, r18	; 0x03
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	91 05       	cpc	r25, r1
    1458:	49 f1       	breq	.+82     	; 0x14ac <DIO_VidToggelPinValue+0x76>
    145a:	2b 81       	ldd	r18, Y+3	; 0x03
    145c:	3c 81       	ldd	r19, Y+4	; 0x04
    145e:	22 30       	cpi	r18, 0x02	; 2
    1460:	31 05       	cpc	r19, r1
    1462:	2c f4       	brge	.+10     	; 0x146e <DIO_VidToggelPinValue+0x38>
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	61 f0       	breq	.+24     	; 0x1484 <DIO_VidToggelPinValue+0x4e>
    146c:	5a c0       	rjmp	.+180    	; 0x1522 <DIO_VidToggelPinValue+0xec>
    146e:	2b 81       	ldd	r18, Y+3	; 0x03
    1470:	3c 81       	ldd	r19, Y+4	; 0x04
    1472:	22 30       	cpi	r18, 0x02	; 2
    1474:	31 05       	cpc	r19, r1
    1476:	71 f1       	breq	.+92     	; 0x14d4 <DIO_VidToggelPinValue+0x9e>
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	83 30       	cpi	r24, 0x03	; 3
    147e:	91 05       	cpc	r25, r1
    1480:	e9 f1       	breq	.+122    	; 0x14fc <DIO_VidToggelPinValue+0xc6>
    1482:	4f c0       	rjmp	.+158    	; 0x1522 <DIO_VidToggelPinValue+0xec>
		{
			case 0: TOG_BIT(PORTA,copy_U8Pin);
    1484:	ab e3       	ldi	r26, 0x3B	; 59
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	eb e3       	ldi	r30, 0x3B	; 59
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_VidToggelPinValue+0x6c>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_VidToggelPinValue+0x68>
    14a6:	84 27       	eor	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	3b c0       	rjmp	.+118    	; 0x1522 <DIO_VidToggelPinValue+0xec>
				break;
			case 1: TOG_BIT(PORTB,copy_U8Pin);
    14ac:	a8 e3       	ldi	r26, 0x38	; 56
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e8 e3       	ldi	r30, 0x38	; 56
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <DIO_VidToggelPinValue+0x94>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <DIO_VidToggelPinValue+0x90>
    14ce:	84 27       	eor	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	27 c0       	rjmp	.+78     	; 0x1522 <DIO_VidToggelPinValue+0xec>
				break;
			case 2: TOG_BIT(PORTC,copy_U8Pin);
    14d4:	a5 e3       	ldi	r26, 0x35	; 53
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e3       	ldi	r30, 0x35	; 53
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_VidToggelPinValue+0xbc>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_VidToggelPinValue+0xb8>
    14f6:	84 27       	eor	r24, r20
    14f8:	8c 93       	st	X, r24
    14fa:	13 c0       	rjmp	.+38     	; 0x1522 <DIO_VidToggelPinValue+0xec>
				break;
			case 3: TOG_BIT(PORTD,copy_U8Pin);
    14fc:	a2 e3       	ldi	r26, 0x32	; 50
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e2 e3       	ldi	r30, 0x32	; 50
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	48 2f       	mov	r20, r24
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	02 2e       	mov	r0, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_VidToggelPinValue+0xe4>
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	0a 94       	dec	r0
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <DIO_VidToggelPinValue+0xe0>
    151e:	84 27       	eor	r24, r20
    1520:	8c 93       	st	X, r24
				break;
		}
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <EEPROM_VidWriteByte>:
#include "IIC.h"
#include "EEPROM.h"


void EEPROM_VidWriteByte(u16 Copy_u16ByteAddress,u8 Copy_u8Data)
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	61 97       	sbiw	r28, 0x11	; 17
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	98 8b       	std	Y+16, r25	; 0x10
    1546:	8f 87       	std	Y+15, r24	; 0x0f
    1548:	69 8b       	std	Y+17, r22	; 0x11
	TWI_VidStartCondition();
    154a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TWI_VidStartCondition>

	TWI_VidSlaveAddressWrite(uniqueAddress | (A2<<2) |(Copy_u16ByteAddress>>8));
    154e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1550:	98 89       	ldd	r25, Y+16	; 0x10
    1552:	89 2f       	mov	r24, r25
    1554:	99 27       	eor	r25, r25
    1556:	80 65       	ori	r24, 0x50	; 80
    1558:	0e 94 2b 0c 	call	0x1856	; 0x1856 <TWI_VidSlaveAddressWrite>

	TWI_VidMasterSendData((u8)Copy_u16ByteAddress);
    155c:	8f 85       	ldd	r24, Y+15	; 0x0f
    155e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <TWI_VidMasterSendData>

	TWI_VidMasterSendData(Copy_u8Data);
    1562:	89 89       	ldd	r24, Y+17	; 0x11
    1564:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <TWI_VidMasterSendData>

	TWI_VidStopCondition();
    1568:	0e 94 16 0c 	call	0x182c	; 0x182c <TWI_VidStopCondition>
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	a0 e2       	ldi	r26, 0x20	; 32
    1572:	b1 e4       	ldi	r27, 0x41	; 65
    1574:	8b 87       	std	Y+11, r24	; 0x0b
    1576:	9c 87       	std	Y+12, r25	; 0x0c
    1578:	ad 87       	std	Y+13, r26	; 0x0d
    157a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157c:	6b 85       	ldd	r22, Y+11	; 0x0b
    157e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1580:	8d 85       	ldd	r24, Y+13	; 0x0d
    1582:	9e 85       	ldd	r25, Y+14	; 0x0e
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	4a e7       	ldi	r20, 0x7A	; 122
    158a:	55 e4       	ldi	r21, 0x45	; 69
    158c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	8f 83       	std	Y+7, r24	; 0x07
    1596:	98 87       	std	Y+8, r25	; 0x08
    1598:	a9 87       	std	Y+9, r26	; 0x09
    159a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    159c:	6f 81       	ldd	r22, Y+7	; 0x07
    159e:	78 85       	ldd	r23, Y+8	; 0x08
    15a0:	89 85       	ldd	r24, Y+9	; 0x09
    15a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	40 e8       	ldi	r20, 0x80	; 128
    15aa:	5f e3       	ldi	r21, 0x3F	; 63
    15ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15b0:	88 23       	and	r24, r24
    15b2:	2c f4       	brge	.+10     	; 0x15be <EEPROM_VidWriteByte+0x8e>
		__ticks = 1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8d 83       	std	Y+5, r24	; 0x05
    15bc:	3f c0       	rjmp	.+126    	; 0x163c <EEPROM_VidWriteByte+0x10c>
	else if (__tmp > 65535)
    15be:	6f 81       	ldd	r22, Y+7	; 0x07
    15c0:	78 85       	ldd	r23, Y+8	; 0x08
    15c2:	89 85       	ldd	r24, Y+9	; 0x09
    15c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	3f ef       	ldi	r19, 0xFF	; 255
    15ca:	4f e7       	ldi	r20, 0x7F	; 127
    15cc:	57 e4       	ldi	r21, 0x47	; 71
    15ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15d2:	18 16       	cp	r1, r24
    15d4:	4c f5       	brge	.+82     	; 0x1628 <EEPROM_VidWriteByte+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15da:	8d 85       	ldd	r24, Y+13	; 0x0d
    15dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9e 83       	std	Y+6, r25	; 0x06
    15fc:	8d 83       	std	Y+5, r24	; 0x05
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <EEPROM_VidWriteByte+0xee>
    1600:	80 e9       	ldi	r24, 0x90	; 144
    1602:	91 e0       	ldi	r25, 0x01	; 1
    1604:	9c 83       	std	Y+4, r25	; 0x04
    1606:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <EEPROM_VidWriteByte+0xdc>
    1610:	9c 83       	std	Y+4, r25	; 0x04
    1612:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161e:	8d 81       	ldd	r24, Y+5	; 0x05
    1620:	9e 81       	ldd	r25, Y+6	; 0x06
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	69 f7       	brne	.-38     	; 0x1600 <EEPROM_VidWriteByte+0xd0>
    1626:	14 c0       	rjmp	.+40     	; 0x1650 <EEPROM_VidWriteByte+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1628:	6f 81       	ldd	r22, Y+7	; 0x07
    162a:	78 85       	ldd	r23, Y+8	; 0x08
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	9e 83       	std	Y+6, r25	; 0x06
    163a:	8d 83       	std	Y+5, r24	; 0x05
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	9e 81       	ldd	r25, Y+6	; 0x06
    1640:	9a 83       	std	Y+2, r25	; 0x02
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	9a 81       	ldd	r25, Y+2	; 0x02
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <EEPROM_VidWriteByte+0x118>
    164c:	9a 83       	std	Y+2, r25	; 0x02
    164e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);
}
    1650:	61 96       	adiw	r28, 0x11	; 17
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <EEPROM_VidReadByte>:


u8 EEPROM_VidReadByte(u16 Copy_u16ByteAddress)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	00 d0       	rcall	.+0      	; 0x1668 <EEPROM_VidReadByte+0x6>
    1668:	0f 92       	push	r0
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	9b 83       	std	Y+3, r25	; 0x03
    1670:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Data;

	TWI_VidStartCondition();
    1672:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TWI_VidStartCondition>

	TWI_VidSlaveAddressWrite(uniqueAddress | (A2<<2) |(Copy_u16ByteAddress>>8));
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	9b 81       	ldd	r25, Y+3	; 0x03
    167a:	89 2f       	mov	r24, r25
    167c:	99 27       	eor	r25, r25
    167e:	80 65       	ori	r24, 0x50	; 80
    1680:	0e 94 2b 0c 	call	0x1856	; 0x1856 <TWI_VidSlaveAddressWrite>

	TWI_VidMasterSendData((u8)Copy_u16ByteAddress);
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <TWI_VidMasterSendData>

	TWI_VidStartCondition();
    168a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TWI_VidStartCondition>

	TWI_VidSlaveAddRead(uniqueAddress | (A2<<2) |(Copy_u16ByteAddress>>8));
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	9b 81       	ldd	r25, Y+3	; 0x03
    1692:	89 2f       	mov	r24, r25
    1694:	99 27       	eor	r25, r25
    1696:	80 65       	ori	r24, 0x50	; 80
    1698:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <TWI_VidSlaveAddRead>

	Local_u8Data=TWI_VidMasterReadData();
    169c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <TWI_VidMasterReadData>
    16a0:	89 83       	std	Y+1, r24	; 0x01

	TWI_VidStopCondition();
    16a2:	0e 94 16 0c 	call	0x182c	; 0x182c <TWI_VidStopCondition>

	return Local_u8Data;
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <writeStringToEEPROM>:
void writeStringToEEPROM(const u8* str, u16 addr)//str data ,addr address
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <writeStringToEEPROM+0x6>
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <writeStringToEEPROM+0x8>
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	9a 83       	std	Y+2, r25	; 0x02
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	7c 83       	std	Y+4, r23	; 0x04
    16c6:	6b 83       	std	Y+3, r22	; 0x03
    16c8:	12 c0       	rjmp	.+36     	; 0x16ee <writeStringToEEPROM+0x3a>
	while (*str != '\0')
	{
		EEPROM_VidWriteByte((u8*)addr, *str);
    16ca:	e9 81       	ldd	r30, Y+1	; 0x01
    16cc:	fa 81       	ldd	r31, Y+2	; 0x02
    16ce:	20 81       	ld	r18, Z
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	62 2f       	mov	r22, r18
    16d6:	0e 94 98 0a 	call	0x1530	; 0x1530 <EEPROM_VidWriteByte>
		//eepromWrite((u8*)addr,*str) ;
		str++;
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	89 83       	std	Y+1, r24	; 0x01
		addr++;
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
    16e8:	01 96       	adiw	r24, 0x01	; 1
    16ea:	9c 83       	std	Y+4, r25	; 0x04
    16ec:	8b 83       	std	Y+3, r24	; 0x03

	return Local_u8Data;
}
void writeStringToEEPROM(const u8* str, u16 addr)//str data ,addr address
{
	while (*str != '\0')
    16ee:	e9 81       	ldd	r30, Y+1	; 0x01
    16f0:	fa 81       	ldd	r31, Y+2	; 0x02
    16f2:	80 81       	ld	r24, Z
    16f4:	88 23       	and	r24, r24
    16f6:	49 f7       	brne	.-46     	; 0x16ca <writeStringToEEPROM+0x16>
		//eepromWrite((u8*)addr,*str) ;
		str++;
		addr++;
	}
	//eepromWrite((u8*)addr,'\0'); // Null terminator
	EEPROM_VidWriteByte((u8*)addr, '\0');
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	0e 94 98 0a 	call	0x1530	; 0x1530 <EEPROM_VidWriteByte>
}
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <readStringFromEEPROM>:

void readStringFromEEPROM(u8* str, u16 addr, u8 maxSize)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	27 97       	sbiw	r28, 0x07	; 7
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	9c 83       	std	Y+4, r25	; 0x04
    1726:	8b 83       	std	Y+3, r24	; 0x03
    1728:	7e 83       	std	Y+6, r23	; 0x06
    172a:	6d 83       	std	Y+5, r22	; 0x05
    172c:	4f 83       	std	Y+7, r20	; 0x07
	u8 i = 0;
    172e:	1a 82       	std	Y+2, r1	; 0x02
	u8 data;
	do
	{
		data = EEPROM_VidReadByte((const u8*)addr);
    1730:	8d 81       	ldd	r24, Y+5	; 0x05
    1732:	9e 81       	ldd	r25, Y+6	; 0x06
    1734:	0e 94 31 0b 	call	0x1662	; 0x1662 <EEPROM_VidReadByte>
    1738:	89 83       	std	Y+1, r24	; 0x01
		//data=eepromRead((const u8*)addr);
		str[i] = data;
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	fc 01       	movw	r30, r24
    1746:	e2 0f       	add	r30, r18
    1748:	f3 1f       	adc	r31, r19
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	80 83       	st	Z, r24
		i++;
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	8f 5f       	subi	r24, 0xFF	; 255
    1752:	8a 83       	std	Y+2, r24	; 0x02
		addr++;
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
	} while (data != '\0' && i < maxSize);
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	88 23       	and	r24, r24
    1762:	21 f0       	breq	.+8      	; 0x176c <readStringFromEEPROM+0x5c>
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	8f 81       	ldd	r24, Y+7	; 0x07
    1768:	98 17       	cp	r25, r24
    176a:	10 f3       	brcs	.-60     	; 0x1730 <readStringFromEEPROM+0x20>
}
    176c:	27 96       	adiw	r28, 0x07	; 7
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <TWI_VidMasterInit>:
#include <avr/io.h>
#include "IIC.h"


void TWI_VidMasterInit(void)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
	/*Prescaller Value*/
	CLR_BIT(TWSR,TWPS0);
    1786:	a1 e2       	ldi	r26, 0x21	; 33
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e1 e2       	ldi	r30, 0x21	; 33
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	8e 7f       	andi	r24, 0xFE	; 254
    1792:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWPS1);
    1794:	a1 e2       	ldi	r26, 0x21	; 33
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e1 e2       	ldi	r30, 0x21	; 33
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	8d 7f       	andi	r24, 0xFD	; 253
    17a0:	8c 93       	st	X, r24

	/*frequency -> 400KHZ*/
	TWBR=2;
    17a2:	e0 e2       	ldi	r30, 0x20	; 32
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	80 83       	st	Z, r24

	/*Enable I2C*/
	SET_BIT(TWCR,TWEN);
    17aa:	a6 e5       	ldi	r26, 0x56	; 86
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e6 e5       	ldi	r30, 0x56	; 86
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	84 60       	ori	r24, 0x04	; 4
    17b6:	8c 93       	st	X, r24
}
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <TWI_VidSlaveInit>:

void TWI_VidSlaveInit(u8 Copy_u8Addrss)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	0f 92       	push	r0
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	89 83       	std	Y+1, r24	; 0x01
	/*Enable ACK*/
	SET_BIT(TWCR,TWEA);
    17ca:	a6 e5       	ldi	r26, 0x56	; 86
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e6 e5       	ldi	r30, 0x56	; 86
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	80 64       	ori	r24, 0x40	; 64
    17d6:	8c 93       	st	X, r24

	/*Write Address*/
	TWAR=Copy_u8Addrss<<1;
    17d8:	e2 e2       	ldi	r30, 0x22	; 34
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	88 0f       	add	r24, r24
    17e0:	80 83       	st	Z, r24

	/*Enable I2C*/
	SET_BIT(TWCR,TWEN);
    17e2:	a6 e5       	ldi	r26, 0x56	; 86
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e6 e5       	ldi	r30, 0x56	; 86
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	84 60       	ori	r24, 0x04	; 4
    17ee:	8c 93       	st	X, r24
}
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <TWI_VidStartCondition>:

void TWI_VidStartCondition(void)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
	/*Enable Start Condition & Clear Init flag*/
	SET_BIT(TWCR,TWSTA);
    1800:	a6 e5       	ldi	r26, 0x56	; 86
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e6 e5       	ldi	r30, 0x56	; 86
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	80 62       	ori	r24, 0x20	; 32
    180c:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWINT);
    180e:	a6 e5       	ldi	r26, 0x56	; 86
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e6 e5       	ldi	r30, 0x56	; 86
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	80 68       	ori	r24, 0x80	; 128
    181a:	8c 93       	st	X, r24

	/*Wait hardware action*/
	while(GET_BIT(TWCR,TWINT)==0);
    181c:	e6 e5       	ldi	r30, 0x56	; 86
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	88 23       	and	r24, r24
    1824:	dc f7       	brge	.-10     	; 0x181c <TWI_VidStartCondition+0x24>
}
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <TWI_VidStopCondition>:

void TWI_VidStopCondition(void)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
	/*Enable Stop Condition &Clear Int Flag*/
	SET_BIT(TWCR,TWINT);
    1834:	a6 e5       	ldi	r26, 0x56	; 86
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e6 e5       	ldi	r30, 0x56	; 86
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	80 68       	ori	r24, 0x80	; 128
    1840:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWSTO);
    1842:	a6 e5       	ldi	r26, 0x56	; 86
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e6 e5       	ldi	r30, 0x56	; 86
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	80 61       	ori	r24, 0x10	; 16
    184e:	8c 93       	st	X, r24
}
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <TWI_VidSlaveAddressWrite>:

void TWI_VidSlaveAddressWrite(u8 Copy_u8SlaveAddress)
{
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	89 83       	std	Y+1, r24	; 0x01
	/*Write Slave address*/
	TWDR=Copy_u8SlaveAddress<<1;
    1862:	e3 e2       	ldi	r30, 0x23	; 35
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	88 0f       	add	r24, r24
    186a:	80 83       	st	Z, r24
	/*Write Operation*/
	CLR_BIT(TWDR,0);
    186c:	a3 e2       	ldi	r26, 0x23	; 35
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e3 e2       	ldi	r30, 0x23	; 35
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	8e 7f       	andi	r24, 0xFE	; 254
    1878:	8c 93       	st	X, r24
	/*Disable Start Condition*/
	CLR_BIT(TWCR,TWSTA);
    187a:	a6 e5       	ldi	r26, 0x56	; 86
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e6 e5       	ldi	r30, 0x56	; 86
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	8f 7d       	andi	r24, 0xDF	; 223
    1886:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWINT);
    1888:	a6 e5       	ldi	r26, 0x56	; 86
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e6 e5       	ldi	r30, 0x56	; 86
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	80 68       	ori	r24, 0x80	; 128
    1894:	8c 93       	st	X, r24
	/*Wait hardware action*/
	while(GET_BIT(TWCR,TWINT)==0);
    1896:	e6 e5       	ldi	r30, 0x56	; 86
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	88 23       	and	r24, r24
    189e:	dc f7       	brge	.-10     	; 0x1896 <TWI_VidSlaveAddressWrite+0x40>
}
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <TWI_VidSlaveAddRead>:

void TWI_VidSlaveAddRead(u8 Copy_u8SlaveAdd)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01
	/*Write Slave address*/
	TWDR=Copy_u8SlaveAdd<<1;
    18b4:	e3 e2       	ldi	r30, 0x23	; 35
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	88 0f       	add	r24, r24
    18bc:	80 83       	st	Z, r24
	/*Read Operation*/
	SET_BIT(TWDR,0);
    18be:	a3 e2       	ldi	r26, 0x23	; 35
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e3 e2       	ldi	r30, 0x23	; 35
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	81 60       	ori	r24, 0x01	; 1
    18ca:	8c 93       	st	X, r24
	/*Disable Start Condition*/
	CLR_BIT(TWCR,TWSTA);
    18cc:	a6 e5       	ldi	r26, 0x56	; 86
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e6 e5       	ldi	r30, 0x56	; 86
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	8f 7d       	andi	r24, 0xDF	; 223
    18d8:	8c 93       	st	X, r24

	SET_BIT(TWCR,TWINT);
    18da:	a6 e5       	ldi	r26, 0x56	; 86
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e6 e5       	ldi	r30, 0x56	; 86
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	80 68       	ori	r24, 0x80	; 128
    18e6:	8c 93       	st	X, r24
	/*Wait hardware action*/
	while(GET_BIT(TWCR,TWINT)==0);
    18e8:	e6 e5       	ldi	r30, 0x56	; 86
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	88 23       	and	r24, r24
    18f0:	dc f7       	brge	.-10     	; 0x18e8 <TWI_VidSlaveAddRead+0x40>
}
    18f2:	0f 90       	pop	r0
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <TWI_VidMasterSendData>:

void TWI_VidMasterSendData(u8 Copy_u8Data)
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	0f 92       	push	r0
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	89 83       	std	Y+1, r24	; 0x01
	/*Write Data*/
	TWDR=Copy_u8Data;
    1906:	e3 e2       	ldi	r30, 0x23	; 35
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	80 83       	st	Z, r24

	SET_BIT(TWCR,TWINT);
    190e:	a6 e5       	ldi	r26, 0x56	; 86
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e6 e5       	ldi	r30, 0x56	; 86
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	80 68       	ori	r24, 0x80	; 128
    191a:	8c 93       	st	X, r24
	/*Wait hardware action*/
	while(GET_BIT(TWCR,TWINT)==0);
    191c:	e6 e5       	ldi	r30, 0x56	; 86
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	88 23       	and	r24, r24
    1924:	dc f7       	brge	.-10     	; 0x191c <TWI_VidMasterSendData+0x22>
}
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <TWI_VidSlaveReadData>:


u8 TWI_VidSlaveReadData(void)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
	/*SLA+W has been recieved ACK has been returned*/
	while((TWSR & 0xf8)!=0x60);
    1936:	e1 e2       	ldi	r30, 0x21	; 33
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	88 2f       	mov	r24, r24
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	88 7f       	andi	r24, 0xF8	; 248
    1942:	90 70       	andi	r25, 0x00	; 0
    1944:	80 36       	cpi	r24, 0x60	; 96
    1946:	91 05       	cpc	r25, r1
    1948:	b1 f7       	brne	.-20     	; 0x1936 <TWI_VidSlaveReadData+0x8>
	/*Clear Flag*/
	SET_BIT(TWCR,TWINT);
    194a:	a6 e5       	ldi	r26, 0x56	; 86
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e6 e5       	ldi	r30, 0x56	; 86
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	80 68       	ori	r24, 0x80	; 128
    1956:	8c 93       	st	X, r24
	while((TWSR & 0xf8)!=0x80);
    1958:	e1 e2       	ldi	r30, 0x21	; 33
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	88 2f       	mov	r24, r24
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	88 7f       	andi	r24, 0xF8	; 248
    1964:	90 70       	andi	r25, 0x00	; 0
    1966:	80 38       	cpi	r24, 0x80	; 128
    1968:	91 05       	cpc	r25, r1
    196a:	b1 f7       	brne	.-20     	; 0x1958 <TWI_VidSlaveReadData+0x2a>
	return TWDR;
    196c:	e3 e2       	ldi	r30, 0x23	; 35
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
}
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <TWI_VidMasterReadData>:


u8 TWI_VidMasterReadData(void)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,TWINT);
    1980:	a6 e5       	ldi	r26, 0x56	; 86
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e6 e5       	ldi	r30, 0x56	; 86
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	80 68       	ori	r24, 0x80	; 128
    198c:	8c 93       	st	X, r24
	/*Wait hardware action*/
	while(GET_BIT(TWCR,TWINT)==0);
    198e:	e6 e5       	ldi	r30, 0x56	; 86
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	88 23       	and	r24, r24
    1996:	dc f7       	brge	.-10     	; 0x198e <TWI_VidMasterReadData+0x16>
	return TWDR;
    1998:	e3 e2       	ldi	r30, 0x23	; 35
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
}
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <KPD_VidInit>:
u8 KPD_AU8ROWS[4]={KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN,KPD_R4_PIN};
u8 KPD_AU8COLS[4]={KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN,KPD_C4_PIN};



void KPD_VidInit(void){
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62


	 DIO_VidSetPortDirection(KPD_PORT ,0x0f);
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	6f e0       	ldi	r22, 0x0F	; 15
    19b0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_VidSetPortDirection>
	 DIO_VidSetPortValue(KPD_PORT,0xff);
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	6f ef       	ldi	r22, 0xFF	; 255
    19b8:	0e 94 99 09 	call	0x1332	; 0x1332 <DIO_VidSetPortValue>
	 //cols are pull up
	 //rows are 1
}
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <KPD_U8PressedKey>:
u8 KPD_U8PressedKey(void){
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	63 97       	sbiw	r28, 0x13	; 19
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8CounterR ;
	u8 Local_U8CounterC ;
	u8 Local_U8Pressed,Local_U8ReturnedKey=KPD_CHECK,Local_U8Flag=0;
    19d6:	8f ef       	ldi	r24, 0xFF	; 255
    19d8:	88 8b       	std	Y+16, r24	; 0x10
    19da:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_U8CounterR=0;Local_U8CounterR<4 ;Local_U8CounterR++){
    19dc:	1b 8a       	std	Y+19, r1	; 0x13
    19de:	ce c0       	rjmp	.+412    	; 0x1b7c <KPD_U8PressedKey+0x1ba>
		DIO_VidSetPinValue(KPD_PORT,KPD_AU8ROWS[Local_U8CounterR],DIO_LOW);
    19e0:	8b 89       	ldd	r24, Y+19	; 0x13
    19e2:	88 2f       	mov	r24, r24
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	fc 01       	movw	r30, r24
    19e8:	e2 54       	subi	r30, 0x42	; 66
    19ea:	fe 4f       	sbci	r31, 0xFE	; 254
    19ec:	90 81       	ld	r25, Z
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	69 2f       	mov	r22, r25
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>

		for(Local_U8CounterC=0;Local_U8CounterC<4 ;Local_U8CounterC++){
    19f8:	1a 8a       	std	Y+18, r1	; 0x12
    19fa:	aa c0       	rjmp	.+340    	; 0x1b50 <KPD_U8PressedKey+0x18e>
			Local_U8Pressed=DIO_U8GetPinValue(KPD_PORT,KPD_AU8COLS[Local_U8CounterC]);
    19fc:	8a 89       	ldd	r24, Y+18	; 0x12
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	fc 01       	movw	r30, r24
    1a04:	ee 53       	subi	r30, 0x3E	; 62
    1a06:	fe 4f       	sbci	r31, 0xFE	; 254
    1a08:	90 81       	ld	r25, Z
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	69 2f       	mov	r22, r25
    1a0e:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_U8GetPinValue>
    1a12:	89 8b       	std	Y+17, r24	; 0x11


			if(Local_U8Pressed==DIO_LOW){
    1a14:	89 89       	ldd	r24, Y+17	; 0x11
    1a16:	88 23       	and	r24, r24
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <KPD_U8PressedKey+0x5a>
    1a1a:	97 c0       	rjmp	.+302    	; 0x1b4a <KPD_U8PressedKey+0x188>
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	a0 ea       	ldi	r26, 0xA0	; 160
    1a22:	b1 e4       	ldi	r27, 0x41	; 65
    1a24:	8b 87       	std	Y+11, r24	; 0x0b
    1a26:	9c 87       	std	Y+12, r25	; 0x0c
    1a28:	ad 87       	std	Y+13, r26	; 0x0d
    1a2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	4a e7       	ldi	r20, 0x7A	; 122
    1a3a:	55 e4       	ldi	r21, 0x45	; 69
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	8f 83       	std	Y+7, r24	; 0x07
    1a46:	98 87       	std	Y+8, r25	; 0x08
    1a48:	a9 87       	std	Y+9, r26	; 0x09
    1a4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4e:	78 85       	ldd	r23, Y+8	; 0x08
    1a50:	89 85       	ldd	r24, Y+9	; 0x09
    1a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e8       	ldi	r20, 0x80	; 128
    1a5a:	5f e3       	ldi	r21, 0x3F	; 63
    1a5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a60:	88 23       	and	r24, r24
    1a62:	2c f4       	brge	.+10     	; 0x1a6e <KPD_U8PressedKey+0xac>
		__ticks = 1;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9e 83       	std	Y+6, r25	; 0x06
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
    1a6c:	3f c0       	rjmp	.+126    	; 0x1aec <KPD_U8PressedKey+0x12a>
	else if (__tmp > 65535)
    1a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a70:	78 85       	ldd	r23, Y+8	; 0x08
    1a72:	89 85       	ldd	r24, Y+9	; 0x09
    1a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	3f ef       	ldi	r19, 0xFF	; 255
    1a7a:	4f e7       	ldi	r20, 0x7F	; 127
    1a7c:	57 e4       	ldi	r21, 0x47	; 71
    1a7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a82:	18 16       	cp	r1, r24
    1a84:	4c f5       	brge	.+82     	; 0x1ad8 <KPD_U8PressedKey+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e2       	ldi	r20, 0x20	; 32
    1a94:	51 e4       	ldi	r21, 0x41	; 65
    1a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	bc 01       	movw	r22, r24
    1aa0:	cd 01       	movw	r24, r26
    1aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	9e 83       	std	Y+6, r25	; 0x06
    1aac:	8d 83       	std	Y+5, r24	; 0x05
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <KPD_U8PressedKey+0x10c>
    1ab0:	80 e9       	ldi	r24, 0x90	; 144
    1ab2:	91 e0       	ldi	r25, 0x01	; 1
    1ab4:	9c 83       	std	Y+4, r25	; 0x04
    1ab6:	8b 83       	std	Y+3, r24	; 0x03
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <KPD_U8PressedKey+0xfa>
    1ac0:	9c 83       	std	Y+4, r25	; 0x04
    1ac2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	9e 83       	std	Y+6, r25	; 0x06
    1acc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ace:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	69 f7       	brne	.-38     	; 0x1ab0 <KPD_U8PressedKey+0xee>
    1ad6:	21 c0       	rjmp	.+66     	; 0x1b1a <KPD_U8PressedKey+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    1ada:	78 85       	ldd	r23, Y+8	; 0x08
    1adc:	89 85       	ldd	r24, Y+9	; 0x09
    1ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	9a 81       	ldd	r25, Y+2	; 0x02
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <KPD_U8PressedKey+0x136>
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	0c c0       	rjmp	.+24     	; 0x1b1a <KPD_U8PressedKey+0x158>
				_delay_ms(20);
				while(Local_U8Pressed==DIO_LOW){
					Local_U8Pressed=DIO_U8GetPinValue(KPD_PORT,KPD_AU8COLS[Local_U8CounterC]);
    1b02:	8a 89       	ldd	r24, Y+18	; 0x12
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	fc 01       	movw	r30, r24
    1b0a:	ee 53       	subi	r30, 0x3E	; 62
    1b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b0e:	90 81       	ld	r25, Z
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	69 2f       	mov	r22, r25
    1b14:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_U8GetPinValue>
    1b18:	89 8b       	std	Y+17, r24	; 0x11
			Local_U8Pressed=DIO_U8GetPinValue(KPD_PORT,KPD_AU8COLS[Local_U8CounterC]);


			if(Local_U8Pressed==DIO_LOW){
				_delay_ms(20);
				while(Local_U8Pressed==DIO_LOW){
    1b1a:	89 89       	ldd	r24, Y+17	; 0x11
    1b1c:	88 23       	and	r24, r24
    1b1e:	89 f3       	breq	.-30     	; 0x1b02 <KPD_U8PressedKey+0x140>
					Local_U8Pressed=DIO_U8GetPinValue(KPD_PORT,KPD_AU8COLS[Local_U8CounterC]);
				}
				Local_U8ReturnedKey= KPD_AU8KEYS[Local_U8CounterR][Local_U8CounterC];
    1b20:	8b 89       	ldd	r24, Y+19	; 0x13
    1b22:	48 2f       	mov	r20, r24
    1b24:	50 e0       	ldi	r21, 0x00	; 0
    1b26:	8a 89       	ldd	r24, Y+18	; 0x12
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	ca 01       	movw	r24, r20
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	82 0f       	add	r24, r18
    1b38:	93 1f       	adc	r25, r19
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	e2 55       	subi	r30, 0x52	; 82
    1b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b40:	80 81       	ld	r24, Z
    1b42:	88 8b       	std	Y+16, r24	; 0x10
				Local_U8Flag=1;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	8f 87       	std	Y+15, r24	; 0x0f
    1b48:	07 c0       	rjmp	.+14     	; 0x1b58 <KPD_U8PressedKey+0x196>
	u8 Local_U8CounterC ;
	u8 Local_U8Pressed,Local_U8ReturnedKey=KPD_CHECK,Local_U8Flag=0;
	for(Local_U8CounterR=0;Local_U8CounterR<4 ;Local_U8CounterR++){
		DIO_VidSetPinValue(KPD_PORT,KPD_AU8ROWS[Local_U8CounterR],DIO_LOW);

		for(Local_U8CounterC=0;Local_U8CounterC<4 ;Local_U8CounterC++){
    1b4a:	8a 89       	ldd	r24, Y+18	; 0x12
    1b4c:	8f 5f       	subi	r24, 0xFF	; 255
    1b4e:	8a 8b       	std	Y+18, r24	; 0x12
    1b50:	8a 89       	ldd	r24, Y+18	; 0x12
    1b52:	84 30       	cpi	r24, 0x04	; 4
    1b54:	08 f4       	brcc	.+2      	; 0x1b58 <KPD_U8PressedKey+0x196>
    1b56:	52 cf       	rjmp	.-348    	; 0x19fc <KPD_U8PressedKey+0x3a>
				Local_U8ReturnedKey= KPD_AU8KEYS[Local_U8CounterR][Local_U8CounterC];
				Local_U8Flag=1;
				break ;
			}
		}
		DIO_VidSetPinValue(KPD_PORT,KPD_AU8ROWS[Local_U8CounterR],DIO_HIGH);
    1b58:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	fc 01       	movw	r30, r24
    1b60:	e2 54       	subi	r30, 0x42	; 66
    1b62:	fe 4f       	sbci	r31, 0xFE	; 254
    1b64:	90 81       	ld	r25, Z
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	69 2f       	mov	r22, r25
    1b6a:	41 e0       	ldi	r20, 0x01	; 1
    1b6c:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>
		if(Local_U8Flag){
    1b70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b72:	88 23       	and	r24, r24
    1b74:	39 f4       	brne	.+14     	; 0x1b84 <KPD_U8PressedKey+0x1c2>
}
u8 KPD_U8PressedKey(void){
	u8 Local_U8CounterR ;
	u8 Local_U8CounterC ;
	u8 Local_U8Pressed,Local_U8ReturnedKey=KPD_CHECK,Local_U8Flag=0;
	for(Local_U8CounterR=0;Local_U8CounterR<4 ;Local_U8CounterR++){
    1b76:	8b 89       	ldd	r24, Y+19	; 0x13
    1b78:	8f 5f       	subi	r24, 0xFF	; 255
    1b7a:	8b 8b       	std	Y+19, r24	; 0x13
    1b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7e:	84 30       	cpi	r24, 0x04	; 4
    1b80:	08 f4       	brcc	.+2      	; 0x1b84 <KPD_U8PressedKey+0x1c2>
    1b82:	2e cf       	rjmp	.-420    	; 0x19e0 <KPD_U8PressedKey+0x1e>
		DIO_VidSetPinValue(KPD_PORT,KPD_AU8ROWS[Local_U8CounterR],DIO_HIGH);
		if(Local_U8Flag){
			break ;
		}
	}
	return Local_U8ReturnedKey ;
    1b84:	88 89       	ldd	r24, Y+16	; 0x10

}
    1b86:	63 96       	adiw	r28, 0x13	; 19
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <LCD_VidInit>:
#include <avr/delay.h>



void LCD_VidInit(void)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	e8 97       	sbiw	r28, 0x38	; 56
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(LCD_DATA_PORT,0xff);
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	6f ef       	ldi	r22, 0xFF	; 255
    1bb0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_VidSetPortDirection>

	DIO_VidSetPinDirection(LCD_CMD_PORT,RS,DIO_OUTPUT);
    1bb4:	82 e0       	ldi	r24, 0x02	; 2
    1bb6:	65 e0       	ldi	r22, 0x05	; 5
    1bb8:	41 e0       	ldi	r20, 0x01	; 1
    1bba:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CMD_PORT,RW,DIO_OUTPUT);
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	66 e0       	ldi	r22, 0x06	; 6
    1bc2:	41 e0       	ldi	r20, 0x01	; 1
    1bc4:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CMD_PORT,EN,DIO_OUTPUT);
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
    1bca:	67 e0       	ldi	r22, 0x07	; 7
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_VidSetPinDirection>
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	ac e0       	ldi	r26, 0x0C	; 12
    1bd8:	b2 e4       	ldi	r27, 0x42	; 66
    1bda:	8d ab       	std	Y+53, r24	; 0x35
    1bdc:	9e ab       	std	Y+54, r25	; 0x36
    1bde:	af ab       	std	Y+55, r26	; 0x37
    1be0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	6d a9       	ldd	r22, Y+53	; 0x35
    1be4:	7e a9       	ldd	r23, Y+54	; 0x36
    1be6:	8f a9       	ldd	r24, Y+55	; 0x37
    1be8:	98 ad       	ldd	r25, Y+56	; 0x38
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	4a e7       	ldi	r20, 0x7A	; 122
    1bf0:	55 e4       	ldi	r21, 0x45	; 69
    1bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	89 ab       	std	Y+49, r24	; 0x31
    1bfc:	9a ab       	std	Y+50, r25	; 0x32
    1bfe:	ab ab       	std	Y+51, r26	; 0x33
    1c00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c02:	69 a9       	ldd	r22, Y+49	; 0x31
    1c04:	7a a9       	ldd	r23, Y+50	; 0x32
    1c06:	8b a9       	ldd	r24, Y+51	; 0x33
    1c08:	9c a9       	ldd	r25, Y+52	; 0x34
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e8       	ldi	r20, 0x80	; 128
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c16:	88 23       	and	r24, r24
    1c18:	2c f4       	brge	.+10     	; 0x1c24 <LCD_VidInit+0x8c>
		__ticks = 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	98 ab       	std	Y+48, r25	; 0x30
    1c20:	8f a7       	std	Y+47, r24	; 0x2f
    1c22:	3f c0       	rjmp	.+126    	; 0x1ca2 <LCD_VidInit+0x10a>
	else if (__tmp > 65535)
    1c24:	69 a9       	ldd	r22, Y+49	; 0x31
    1c26:	7a a9       	ldd	r23, Y+50	; 0x32
    1c28:	8b a9       	ldd	r24, Y+51	; 0x33
    1c2a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	3f ef       	ldi	r19, 0xFF	; 255
    1c30:	4f e7       	ldi	r20, 0x7F	; 127
    1c32:	57 e4       	ldi	r21, 0x47	; 71
    1c34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c38:	18 16       	cp	r1, r24
    1c3a:	4c f5       	brge	.+82     	; 0x1c8e <LCD_VidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c3e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c40:	8f a9       	ldd	r24, Y+55	; 0x37
    1c42:	98 ad       	ldd	r25, Y+56	; 0x38
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e2       	ldi	r20, 0x20	; 32
    1c4a:	51 e4       	ldi	r21, 0x41	; 65
    1c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	98 ab       	std	Y+48, r25	; 0x30
    1c62:	8f a7       	std	Y+47, r24	; 0x2f
    1c64:	0f c0       	rjmp	.+30     	; 0x1c84 <LCD_VidInit+0xec>
    1c66:	80 e9       	ldi	r24, 0x90	; 144
    1c68:	91 e0       	ldi	r25, 0x01	; 1
    1c6a:	9e a7       	std	Y+46, r25	; 0x2e
    1c6c:	8d a7       	std	Y+45, r24	; 0x2d
    1c6e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c70:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <LCD_VidInit+0xda>
    1c76:	9e a7       	std	Y+46, r25	; 0x2e
    1c78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	98 ab       	std	Y+48, r25	; 0x30
    1c82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c86:	98 a9       	ldd	r25, Y+48	; 0x30
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	69 f7       	brne	.-38     	; 0x1c66 <LCD_VidInit+0xce>
    1c8c:	14 c0       	rjmp	.+40     	; 0x1cb6 <LCD_VidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c90:	7a a9       	ldd	r23, Y+50	; 0x32
    1c92:	8b a9       	ldd	r24, Y+51	; 0x33
    1c94:	9c a9       	ldd	r25, Y+52	; 0x34
    1c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	98 ab       	std	Y+48, r25	; 0x30
    1ca0:	8f a7       	std	Y+47, r24	; 0x2f
    1ca2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca6:	9c a7       	std	Y+44, r25	; 0x2c
    1ca8:	8b a7       	std	Y+43, r24	; 0x2b
    1caa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cac:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <LCD_VidInit+0x116>
    1cb2:	9c a7       	std	Y+44, r25	; 0x2c
    1cb4:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);
	LCD_VidSendCMD(FUN_SET);
    1cb6:	88 e3       	ldi	r24, 0x38	; 56
    1cb8:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_VidSendCMD>
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a0 e8       	ldi	r26, 0x80	; 128
    1cc2:	bf e3       	ldi	r27, 0x3F	; 63
    1cc4:	8f a3       	std	Y+39, r24	; 0x27
    1cc6:	98 a7       	std	Y+40, r25	; 0x28
    1cc8:	a9 a7       	std	Y+41, r26	; 0x29
    1cca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ccc:	6f a1       	ldd	r22, Y+39	; 0x27
    1cce:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd0:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	4a e7       	ldi	r20, 0x7A	; 122
    1cda:	55 e4       	ldi	r21, 0x45	; 69
    1cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	8b a3       	std	Y+35, r24	; 0x23
    1ce6:	9c a3       	std	Y+36, r25	; 0x24
    1ce8:	ad a3       	std	Y+37, r26	; 0x25
    1cea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cec:	6b a1       	ldd	r22, Y+35	; 0x23
    1cee:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e8       	ldi	r20, 0x80	; 128
    1cfa:	5f e3       	ldi	r21, 0x3F	; 63
    1cfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d00:	88 23       	and	r24, r24
    1d02:	2c f4       	brge	.+10     	; 0x1d0e <LCD_VidInit+0x176>
		__ticks = 1;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	9a a3       	std	Y+34, r25	; 0x22
    1d0a:	89 a3       	std	Y+33, r24	; 0x21
    1d0c:	3f c0       	rjmp	.+126    	; 0x1d8c <LCD_VidInit+0x1f4>
	else if (__tmp > 65535)
    1d0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d10:	7c a1       	ldd	r23, Y+36	; 0x24
    1d12:	8d a1       	ldd	r24, Y+37	; 0x25
    1d14:	9e a1       	ldd	r25, Y+38	; 0x26
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	3f ef       	ldi	r19, 0xFF	; 255
    1d1a:	4f e7       	ldi	r20, 0x7F	; 127
    1d1c:	57 e4       	ldi	r21, 0x47	; 71
    1d1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d22:	18 16       	cp	r1, r24
    1d24:	4c f5       	brge	.+82     	; 0x1d78 <LCD_VidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d26:	6f a1       	ldd	r22, Y+39	; 0x27
    1d28:	78 a5       	ldd	r23, Y+40	; 0x28
    1d2a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e2       	ldi	r20, 0x20	; 32
    1d34:	51 e4       	ldi	r21, 0x41	; 65
    1d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	bc 01       	movw	r22, r24
    1d40:	cd 01       	movw	r24, r26
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9a a3       	std	Y+34, r25	; 0x22
    1d4c:	89 a3       	std	Y+33, r24	; 0x21
    1d4e:	0f c0       	rjmp	.+30     	; 0x1d6e <LCD_VidInit+0x1d6>
    1d50:	80 e9       	ldi	r24, 0x90	; 144
    1d52:	91 e0       	ldi	r25, 0x01	; 1
    1d54:	98 a3       	std	Y+32, r25	; 0x20
    1d56:	8f 8f       	std	Y+31, r24	; 0x1f
    1d58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d5a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <LCD_VidInit+0x1c4>
    1d60:	98 a3       	std	Y+32, r25	; 0x20
    1d62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d64:	89 a1       	ldd	r24, Y+33	; 0x21
    1d66:	9a a1       	ldd	r25, Y+34	; 0x22
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	9a a3       	std	Y+34, r25	; 0x22
    1d6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d70:	9a a1       	ldd	r25, Y+34	; 0x22
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	69 f7       	brne	.-38     	; 0x1d50 <LCD_VidInit+0x1b8>
    1d76:	14 c0       	rjmp	.+40     	; 0x1da0 <LCD_VidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d78:	6b a1       	ldd	r22, Y+35	; 0x23
    1d7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	9a a3       	std	Y+34, r25	; 0x22
    1d8a:	89 a3       	std	Y+33, r24	; 0x21
    1d8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d90:	9e 8f       	std	Y+30, r25	; 0x1e
    1d92:	8d 8f       	std	Y+29, r24	; 0x1d
    1d94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <LCD_VidInit+0x200>
    1d9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d9e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VidSendCMD(C_ON_OFF);
    1da0:	8f e0       	ldi	r24, 0x0F	; 15
    1da2:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_VidSendCMD>
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	a0 e8       	ldi	r26, 0x80	; 128
    1dac:	bf e3       	ldi	r27, 0x3F	; 63
    1dae:	89 8f       	std	Y+25, r24	; 0x19
    1db0:	9a 8f       	std	Y+26, r25	; 0x1a
    1db2:	ab 8f       	std	Y+27, r26	; 0x1b
    1db4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db6:	69 8d       	ldd	r22, Y+25	; 0x19
    1db8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	4a e7       	ldi	r20, 0x7A	; 122
    1dc4:	55 e4       	ldi	r21, 0x45	; 69
    1dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	8d 8b       	std	Y+21, r24	; 0x15
    1dd0:	9e 8b       	std	Y+22, r25	; 0x16
    1dd2:	af 8b       	std	Y+23, r26	; 0x17
    1dd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dda:	8f 89       	ldd	r24, Y+23	; 0x17
    1ddc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e8       	ldi	r20, 0x80	; 128
    1de4:	5f e3       	ldi	r21, 0x3F	; 63
    1de6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dea:	88 23       	and	r24, r24
    1dec:	2c f4       	brge	.+10     	; 0x1df8 <LCD_VidInit+0x260>
		__ticks = 1;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	9c 8b       	std	Y+20, r25	; 0x14
    1df4:	8b 8b       	std	Y+19, r24	; 0x13
    1df6:	3f c0       	rjmp	.+126    	; 0x1e76 <LCD_VidInit+0x2de>
	else if (__tmp > 65535)
    1df8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfa:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfe:	98 8d       	ldd	r25, Y+24	; 0x18
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	3f ef       	ldi	r19, 0xFF	; 255
    1e04:	4f e7       	ldi	r20, 0x7F	; 127
    1e06:	57 e4       	ldi	r21, 0x47	; 71
    1e08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e0c:	18 16       	cp	r1, r24
    1e0e:	4c f5       	brge	.+82     	; 0x1e62 <LCD_VidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e10:	69 8d       	ldd	r22, Y+25	; 0x19
    1e12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e2       	ldi	r20, 0x20	; 32
    1e1e:	51 e4       	ldi	r21, 0x41	; 65
    1e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	bc 01       	movw	r22, r24
    1e2a:	cd 01       	movw	r24, r26
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9c 8b       	std	Y+20, r25	; 0x14
    1e36:	8b 8b       	std	Y+19, r24	; 0x13
    1e38:	0f c0       	rjmp	.+30     	; 0x1e58 <LCD_VidInit+0x2c0>
    1e3a:	80 e9       	ldi	r24, 0x90	; 144
    1e3c:	91 e0       	ldi	r25, 0x01	; 1
    1e3e:	9a 8b       	std	Y+18, r25	; 0x12
    1e40:	89 8b       	std	Y+17, r24	; 0x11
    1e42:	89 89       	ldd	r24, Y+17	; 0x11
    1e44:	9a 89       	ldd	r25, Y+18	; 0x12
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <LCD_VidInit+0x2ae>
    1e4a:	9a 8b       	std	Y+18, r25	; 0x12
    1e4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e50:	9c 89       	ldd	r25, Y+20	; 0x14
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	9c 8b       	std	Y+20, r25	; 0x14
    1e56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e58:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	69 f7       	brne	.-38     	; 0x1e3a <LCD_VidInit+0x2a2>
    1e60:	14 c0       	rjmp	.+40     	; 0x1e8a <LCD_VidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e62:	6d 89       	ldd	r22, Y+21	; 0x15
    1e64:	7e 89       	ldd	r23, Y+22	; 0x16
    1e66:	8f 89       	ldd	r24, Y+23	; 0x17
    1e68:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	9c 8b       	std	Y+20, r25	; 0x14
    1e74:	8b 8b       	std	Y+19, r24	; 0x13
    1e76:	8b 89       	ldd	r24, Y+19	; 0x13
    1e78:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7a:	98 8b       	std	Y+16, r25	; 0x10
    1e7c:	8f 87       	std	Y+15, r24	; 0x0f
    1e7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e80:	98 89       	ldd	r25, Y+16	; 0x10
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	f1 f7       	brne	.-4      	; 0x1e82 <LCD_VidInit+0x2ea>
    1e86:	98 8b       	std	Y+16, r25	; 0x10
    1e88:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VidSendCMD(LCD_CLR);
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_VidSendCMD>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a0 e0       	ldi	r26, 0x00	; 0
    1e96:	b0 e4       	ldi	r27, 0x40	; 64
    1e98:	8b 87       	std	Y+11, r24	; 0x0b
    1e9a:	9c 87       	std	Y+12, r25	; 0x0c
    1e9c:	ad 87       	std	Y+13, r26	; 0x0d
    1e9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	4a e7       	ldi	r20, 0x7A	; 122
    1eae:	55 e4       	ldi	r21, 0x45	; 69
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	8f 83       	std	Y+7, r24	; 0x07
    1eba:	98 87       	std	Y+8, r25	; 0x08
    1ebc:	a9 87       	std	Y+9, r26	; 0x09
    1ebe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec2:	78 85       	ldd	r23, Y+8	; 0x08
    1ec4:	89 85       	ldd	r24, Y+9	; 0x09
    1ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e8       	ldi	r20, 0x80	; 128
    1ece:	5f e3       	ldi	r21, 0x3F	; 63
    1ed0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed4:	88 23       	and	r24, r24
    1ed6:	2c f4       	brge	.+10     	; 0x1ee2 <LCD_VidInit+0x34a>
		__ticks = 1;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	9e 83       	std	Y+6, r25	; 0x06
    1ede:	8d 83       	std	Y+5, r24	; 0x05
    1ee0:	3f c0       	rjmp	.+126    	; 0x1f60 <LCD_VidInit+0x3c8>
	else if (__tmp > 65535)
    1ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee4:	78 85       	ldd	r23, Y+8	; 0x08
    1ee6:	89 85       	ldd	r24, Y+9	; 0x09
    1ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	3f ef       	ldi	r19, 0xFF	; 255
    1eee:	4f e7       	ldi	r20, 0x7F	; 127
    1ef0:	57 e4       	ldi	r21, 0x47	; 71
    1ef2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef6:	18 16       	cp	r1, r24
    1ef8:	4c f5       	brge	.+82     	; 0x1f4c <LCD_VidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e2       	ldi	r20, 0x20	; 32
    1f08:	51 e4       	ldi	r21, 0x41	; 65
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	9e 83       	std	Y+6, r25	; 0x06
    1f20:	8d 83       	std	Y+5, r24	; 0x05
    1f22:	0f c0       	rjmp	.+30     	; 0x1f42 <LCD_VidInit+0x3aa>
    1f24:	80 e9       	ldi	r24, 0x90	; 144
    1f26:	91 e0       	ldi	r25, 0x01	; 1
    1f28:	9c 83       	std	Y+4, r25	; 0x04
    1f2a:	8b 83       	std	Y+3, r24	; 0x03
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <LCD_VidInit+0x398>
    1f34:	9c 83       	std	Y+4, r25	; 0x04
    1f36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	9e 83       	std	Y+6, r25	; 0x06
    1f40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f42:	8d 81       	ldd	r24, Y+5	; 0x05
    1f44:	9e 81       	ldd	r25, Y+6	; 0x06
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	69 f7       	brne	.-38     	; 0x1f24 <LCD_VidInit+0x38c>
    1f4a:	14 c0       	rjmp	.+40     	; 0x1f74 <LCD_VidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4e:	78 85       	ldd	r23, Y+8	; 0x08
    1f50:	89 85       	ldd	r24, Y+9	; 0x09
    1f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
    1f60:	8d 81       	ldd	r24, Y+5	; 0x05
    1f62:	9e 81       	ldd	r25, Y+6	; 0x06
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <LCD_VidInit+0x3d4>
    1f70:	9a 83       	std	Y+2, r25	; 0x02
    1f72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);


}
    1f74:	e8 96       	adiw	r28, 0x38	; 56
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <LCD_VidSendCMD>:


void LCD_VidSendCMD(u8 Copy_U8CMD)
{
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	2f 97       	sbiw	r28, 0x0f	; 15
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VidSetPinValue(LCD_CMD_PORT,RS,DIO_LOW);
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
    1f9e:	65 e0       	ldi	r22, 0x05	; 5
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_CMD_PORT,RW,DIO_LOW);
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
    1fa8:	66 e0       	ldi	r22, 0x06	; 6
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>

	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8CMD);
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fb4:	0e 94 99 09 	call	0x1332	; 0x1332 <DIO_VidSetPortValue>

	DIO_VidSetPinValue(LCD_CMD_PORT,EN,DIO_HIGH);
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	67 e0       	ldi	r22, 0x07	; 7
    1fbc:	41 e0       	ldi	r20, 0x01	; 1
    1fbe:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e8       	ldi	r26, 0x80	; 128
    1fc8:	bf e3       	ldi	r27, 0x3F	; 63
    1fca:	8b 87       	std	Y+11, r24	; 0x0b
    1fcc:	9c 87       	std	Y+12, r25	; 0x0c
    1fce:	ad 87       	std	Y+13, r26	; 0x0d
    1fd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a e7       	ldi	r20, 0x7A	; 122
    1fe0:	55 e4       	ldi	r21, 0x45	; 69
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8f 83       	std	Y+7, r24	; 0x07
    1fec:	98 87       	std	Y+8, r25	; 0x08
    1fee:	a9 87       	std	Y+9, r26	; 0x09
    1ff0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff4:	78 85       	ldd	r23, Y+8	; 0x08
    1ff6:	89 85       	ldd	r24, Y+9	; 0x09
    1ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <LCD_VidSendCMD+0x8e>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <LCD_VidSendCMD+0x10c>
	else if (__tmp > 65535)
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <LCD_VidSendCMD+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	6b 85       	ldd	r22, Y+11	; 0x0b
    202e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2030:	8d 85       	ldd	r24, Y+13	; 0x0d
    2032:	9e 85       	ldd	r25, Y+14	; 0x0e
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <LCD_VidSendCMD+0xee>
    2056:	80 e9       	ldi	r24, 0x90	; 144
    2058:	91 e0       	ldi	r25, 0x01	; 1
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_VidSendCMD+0xdc>
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <LCD_VidSendCMD+0xd0>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <LCD_VidSendCMD+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_VidSendCMD+0x118>
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);

	DIO_VidSetPinValue(LCD_CMD_PORT,EN,DIO_LOW);
    20a6:	82 e0       	ldi	r24, 0x02	; 2
    20a8:	67 e0       	ldi	r22, 0x07	; 7
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>
}
    20b0:	2f 96       	adiw	r28, 0x0f	; 15
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <LCD_VidSendChar>:

void LCD_VidSendChar(u8 Copy_U8Char)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	2f 97       	sbiw	r28, 0x0f	; 15
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VidSetPinValue(LCD_CMD_PORT,RS,DIO_HIGH);
    20d8:	82 e0       	ldi	r24, 0x02	; 2
    20da:	65 e0       	ldi	r22, 0x05	; 5
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_CMD_PORT,RW,DIO_LOW);
    20e2:	82 e0       	ldi	r24, 0x02	; 2
    20e4:	66 e0       	ldi	r22, 0x06	; 6
    20e6:	40 e0       	ldi	r20, 0x00	; 0
    20e8:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>

	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8Char);
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	6f 85       	ldd	r22, Y+15	; 0x0f
    20f0:	0e 94 99 09 	call	0x1332	; 0x1332 <DIO_VidSetPortValue>

	DIO_VidSetPinValue(LCD_CMD_PORT,EN,DIO_HIGH);
    20f4:	82 e0       	ldi	r24, 0x02	; 2
    20f6:	67 e0       	ldi	r22, 0x07	; 7
    20f8:	41 e0       	ldi	r20, 0x01	; 1
    20fa:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a0 e8       	ldi	r26, 0x80	; 128
    2104:	bf e3       	ldi	r27, 0x3F	; 63
    2106:	8b 87       	std	Y+11, r24	; 0x0b
    2108:	9c 87       	std	Y+12, r25	; 0x0c
    210a:	ad 87       	std	Y+13, r26	; 0x0d
    210c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2110:	7c 85       	ldd	r23, Y+12	; 0x0c
    2112:	8d 85       	ldd	r24, Y+13	; 0x0d
    2114:	9e 85       	ldd	r25, Y+14	; 0x0e
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	4a e7       	ldi	r20, 0x7A	; 122
    211c:	55 e4       	ldi	r21, 0x45	; 69
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	8f 83       	std	Y+7, r24	; 0x07
    2128:	98 87       	std	Y+8, r25	; 0x08
    212a:	a9 87       	std	Y+9, r26	; 0x09
    212c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    212e:	6f 81       	ldd	r22, Y+7	; 0x07
    2130:	78 85       	ldd	r23, Y+8	; 0x08
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e8       	ldi	r20, 0x80	; 128
    213c:	5f e3       	ldi	r21, 0x3F	; 63
    213e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2142:	88 23       	and	r24, r24
    2144:	2c f4       	brge	.+10     	; 0x2150 <LCD_VidSendChar+0x8e>
		__ticks = 1;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
    214e:	3f c0       	rjmp	.+126    	; 0x21ce <LCD_VidSendChar+0x10c>
	else if (__tmp > 65535)
    2150:	6f 81       	ldd	r22, Y+7	; 0x07
    2152:	78 85       	ldd	r23, Y+8	; 0x08
    2154:	89 85       	ldd	r24, Y+9	; 0x09
    2156:	9a 85       	ldd	r25, Y+10	; 0x0a
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	3f ef       	ldi	r19, 0xFF	; 255
    215c:	4f e7       	ldi	r20, 0x7F	; 127
    215e:	57 e4       	ldi	r21, 0x47	; 71
    2160:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2164:	18 16       	cp	r1, r24
    2166:	4c f5       	brge	.+82     	; 0x21ba <LCD_VidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2168:	6b 85       	ldd	r22, Y+11	; 0x0b
    216a:	7c 85       	ldd	r23, Y+12	; 0x0c
    216c:	8d 85       	ldd	r24, Y+13	; 0x0d
    216e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e2       	ldi	r20, 0x20	; 32
    2176:	51 e4       	ldi	r21, 0x41	; 65
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9e 83       	std	Y+6, r25	; 0x06
    218e:	8d 83       	std	Y+5, r24	; 0x05
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <LCD_VidSendChar+0xee>
    2192:	80 e9       	ldi	r24, 0x90	; 144
    2194:	91 e0       	ldi	r25, 0x01	; 1
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	8b 83       	std	Y+3, r24	; 0x03
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	9c 81       	ldd	r25, Y+4	; 0x04
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCD_VidSendChar+0xdc>
    21a2:	9c 83       	std	Y+4, r25	; 0x04
    21a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	9e 83       	std	Y+6, r25	; 0x06
    21ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b0:	8d 81       	ldd	r24, Y+5	; 0x05
    21b2:	9e 81       	ldd	r25, Y+6	; 0x06
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	69 f7       	brne	.-38     	; 0x2192 <LCD_VidSendChar+0xd0>
    21b8:	14 c0       	rjmp	.+40     	; 0x21e2 <LCD_VidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ba:	6f 81       	ldd	r22, Y+7	; 0x07
    21bc:	78 85       	ldd	r23, Y+8	; 0x08
    21be:	89 85       	ldd	r24, Y+9	; 0x09
    21c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9e 83       	std	Y+6, r25	; 0x06
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	8d 81       	ldd	r24, Y+5	; 0x05
    21d0:	9e 81       	ldd	r25, Y+6	; 0x06
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <LCD_VidSendChar+0x118>
    21de:	9a 83       	std	Y+2, r25	; 0x02
    21e0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);

	DIO_VidSetPinValue(LCD_CMD_PORT,EN,DIO_LOW);
    21e2:	82 e0       	ldi	r24, 0x02	; 2
    21e4:	67 e0       	ldi	r22, 0x07	; 7
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>
}
    21ec:	2f 96       	adiw	r28, 0x0f	; 15
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <LCD_VidSendString>:




void LCD_VidSendString(u8 *Copy_U8ptr)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	00 d0       	rcall	.+0      	; 0x2204 <LCD_VidSendString+0x6>
    2204:	0f 92       	push	r0
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	9b 83       	std	Y+3, r25	; 0x03
    220c:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 Local_U8Counter=0;Copy_U8ptr[Local_U8Counter]!='\0';Local_U8Counter++)
    220e:	19 82       	std	Y+1, r1	; 0x01
    2210:	0e c0       	rjmp	.+28     	; 0x222e <LCD_VidSendString+0x30>
	{
		LCD_VidSendChar(Copy_U8ptr[Local_U8Counter]);
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	9b 81       	ldd	r25, Y+3	; 0x03
    221c:	fc 01       	movw	r30, r24
    221e:	e2 0f       	add	r30, r18
    2220:	f3 1f       	adc	r31, r19
    2222:	80 81       	ld	r24, Z
    2224:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_VidSendChar>



void LCD_VidSendString(u8 *Copy_U8ptr)
{
	for(u8 Local_U8Counter=0;Copy_U8ptr[Local_U8Counter]!='\0';Local_U8Counter++)
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	8f 5f       	subi	r24, 0xFF	; 255
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	9b 81       	ldd	r25, Y+3	; 0x03
    2238:	fc 01       	movw	r30, r24
    223a:	e2 0f       	add	r30, r18
    223c:	f3 1f       	adc	r31, r19
    223e:	80 81       	ld	r24, Z
    2240:	88 23       	and	r24, r24
    2242:	39 f7       	brne	.-50     	; 0x2212 <LCD_VidSendString+0x14>
	{
		LCD_VidSendChar(Copy_U8ptr[Local_U8Counter]);
	}
}
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <LCD_VidLocation>:


void LCD_VidLocation(u8 Copy_U8Line,u8 Copy_U8CharNum)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <LCD_VidLocation+0x6>
    2256:	00 d0       	rcall	.+0      	; 0x2258 <LCD_VidLocation+0x8>
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Line)
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	3c 83       	std	Y+4, r19	; 0x04
    2268:	2b 83       	std	Y+3, r18	; 0x03
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	31 f0       	breq	.+12     	; 0x227e <LCD_VidLocation+0x2e>
    2272:	2b 81       	ldd	r18, Y+3	; 0x03
    2274:	3c 81       	ldd	r19, Y+4	; 0x04
    2276:	21 30       	cpi	r18, 0x01	; 1
    2278:	31 05       	cpc	r19, r1
    227a:	31 f0       	breq	.+12     	; 0x2288 <LCD_VidLocation+0x38>
    227c:	09 c0       	rjmp	.+18     	; 0x2290 <LCD_VidLocation+0x40>
	{
	case LINE_1:LCD_VidSendCMD(0x80+Copy_U8CharNum);break;
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	80 58       	subi	r24, 0x80	; 128
    2282:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_VidSendCMD>
    2286:	04 c0       	rjmp	.+8      	; 0x2290 <LCD_VidLocation+0x40>
	case LINE_2:LCD_VidSendCMD(0xc0+Copy_U8CharNum);break;
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	80 54       	subi	r24, 0x40	; 64
    228c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_VidSendCMD>

	}
}
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <LCD_VidSendSpecialChar>:


void LCD_VidSendSpecialChar(u8 Copy_U8CharNum,u8 *Copy_U8Ptr)
{
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	00 d0       	rcall	.+0      	; 0x22a4 <LCD_VidSendSpecialChar+0x6>
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <LCD_VidSendSpecialChar+0x8>
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	8a 83       	std	Y+2, r24	; 0x02
    22ac:	7c 83       	std	Y+4, r23	; 0x04
    22ae:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8Counter;
	LCD_VidSendCMD(0x40+(Copy_U8CharNum*8));
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	88 2f       	mov	r24, r24
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	08 96       	adiw	r24, 0x08	; 8
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_VidSendCMD>

	for(Local_U8Counter=0;Local_U8Counter<8;Local_U8Counter++)
    22c8:	19 82       	std	Y+1, r1	; 0x01
    22ca:	0e c0       	rjmp	.+28     	; 0x22e8 <LCD_VidSendSpecialChar+0x4a>
		LCD_VidSendChar(Copy_U8Ptr[Local_U8Counter]);
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	9c 81       	ldd	r25, Y+4	; 0x04
    22d6:	fc 01       	movw	r30, r24
    22d8:	e2 0f       	add	r30, r18
    22da:	f3 1f       	adc	r31, r19
    22dc:	80 81       	ld	r24, Z
    22de:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_VidSendChar>
void LCD_VidSendSpecialChar(u8 Copy_U8CharNum,u8 *Copy_U8Ptr)
{
	u8 Local_U8Counter;
	LCD_VidSendCMD(0x40+(Copy_U8CharNum*8));

	for(Local_U8Counter=0;Local_U8Counter<8;Local_U8Counter++)
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	8f 5f       	subi	r24, 0xFF	; 255
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	88 30       	cpi	r24, 0x08	; 8
    22ec:	78 f3       	brcs	.-34     	; 0x22cc <LCD_VidSendSpecialChar+0x2e>
		LCD_VidSendChar(Copy_U8Ptr[Local_U8Counter]);
}
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <LCD_VidSendSingleInt>:





void LCD_VidSendSingleInt(u8 Copy_U8SingleInt){
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	2f 97       	sbiw	r28, 0x0f	; 15
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	8f 87       	std	Y+15, r24	; 0x0f
    //u8 Local_Copy_Tochar=2Copy_U8SingleInt;

    DIO_VidSetPinValue(LCD_CMD_PORT,RS,DIO_HIGH);
    2312:	82 e0       	ldi	r24, 0x02	; 2
    2314:	65 e0       	ldi	r22, 0x05	; 5
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>

    DIO_VidSetPinValue(LCD_CMD_PORT,RW,DIO_LOW);
    231c:	82 e0       	ldi	r24, 0x02	; 2
    231e:	66 e0       	ldi	r22, 0x06	; 6
    2320:	40 e0       	ldi	r20, 0x00	; 0
    2322:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>

    DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8SingleInt+48);
    2326:	8f 85       	ldd	r24, Y+15	; 0x0f
    2328:	98 2f       	mov	r25, r24
    232a:	90 5d       	subi	r25, 0xD0	; 208
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	69 2f       	mov	r22, r25
    2330:	0e 94 99 09 	call	0x1332	; 0x1332 <DIO_VidSetPortValue>

    DIO_VidSetPinValue(LCD_CMD_PORT,EN,DIO_HIGH);
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	67 e0       	ldi	r22, 0x07	; 7
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	a0 e8       	ldi	r26, 0x80	; 128
    2344:	bf e3       	ldi	r27, 0x3F	; 63
    2346:	8b 87       	std	Y+11, r24	; 0x0b
    2348:	9c 87       	std	Y+12, r25	; 0x0c
    234a:	ad 87       	std	Y+13, r26	; 0x0d
    234c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2350:	7c 85       	ldd	r23, Y+12	; 0x0c
    2352:	8d 85       	ldd	r24, Y+13	; 0x0d
    2354:	9e 85       	ldd	r25, Y+14	; 0x0e
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	4a e7       	ldi	r20, 0x7A	; 122
    235c:	55 e4       	ldi	r21, 0x45	; 69
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	8f 83       	std	Y+7, r24	; 0x07
    2368:	98 87       	std	Y+8, r25	; 0x08
    236a:	a9 87       	std	Y+9, r26	; 0x09
    236c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    236e:	6f 81       	ldd	r22, Y+7	; 0x07
    2370:	78 85       	ldd	r23, Y+8	; 0x08
    2372:	89 85       	ldd	r24, Y+9	; 0x09
    2374:	9a 85       	ldd	r25, Y+10	; 0x0a
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e8       	ldi	r20, 0x80	; 128
    237c:	5f e3       	ldi	r21, 0x3F	; 63
    237e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2382:	88 23       	and	r24, r24
    2384:	2c f4       	brge	.+10     	; 0x2390 <LCD_VidSendSingleInt+0x94>
		__ticks = 1;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9e 83       	std	Y+6, r25	; 0x06
    238c:	8d 83       	std	Y+5, r24	; 0x05
    238e:	3f c0       	rjmp	.+126    	; 0x240e <LCD_VidSendSingleInt+0x112>
	else if (__tmp > 65535)
    2390:	6f 81       	ldd	r22, Y+7	; 0x07
    2392:	78 85       	ldd	r23, Y+8	; 0x08
    2394:	89 85       	ldd	r24, Y+9	; 0x09
    2396:	9a 85       	ldd	r25, Y+10	; 0x0a
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	3f ef       	ldi	r19, 0xFF	; 255
    239c:	4f e7       	ldi	r20, 0x7F	; 127
    239e:	57 e4       	ldi	r21, 0x47	; 71
    23a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a4:	18 16       	cp	r1, r24
    23a6:	4c f5       	brge	.+82     	; 0x23fa <LCD_VidSendSingleInt+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e2       	ldi	r20, 0x20	; 32
    23b6:	51 e4       	ldi	r21, 0x41	; 65
    23b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
    23d0:	0f c0       	rjmp	.+30     	; 0x23f0 <LCD_VidSendSingleInt+0xf4>
    23d2:	80 e9       	ldi	r24, 0x90	; 144
    23d4:	91 e0       	ldi	r25, 0x01	; 1
    23d6:	9c 83       	std	Y+4, r25	; 0x04
    23d8:	8b 83       	std	Y+3, r24	; 0x03
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	9c 81       	ldd	r25, Y+4	; 0x04
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <LCD_VidSendSingleInt+0xe2>
    23e2:	9c 83       	std	Y+4, r25	; 0x04
    23e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e6:	8d 81       	ldd	r24, Y+5	; 0x05
    23e8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	9e 83       	std	Y+6, r25	; 0x06
    23ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f0:	8d 81       	ldd	r24, Y+5	; 0x05
    23f2:	9e 81       	ldd	r25, Y+6	; 0x06
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	69 f7       	brne	.-38     	; 0x23d2 <LCD_VidSendSingleInt+0xd6>
    23f8:	14 c0       	rjmp	.+40     	; 0x2422 <LCD_VidSendSingleInt+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fa:	6f 81       	ldd	r22, Y+7	; 0x07
    23fc:	78 85       	ldd	r23, Y+8	; 0x08
    23fe:	89 85       	ldd	r24, Y+9	; 0x09
    2400:	9a 85       	ldd	r25, Y+10	; 0x0a
    2402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	9e 83       	std	Y+6, r25	; 0x06
    240c:	8d 83       	std	Y+5, r24	; 0x05
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	9a 81       	ldd	r25, Y+2	; 0x02
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_VidSendSingleInt+0x11e>
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(1);

    DIO_VidSetPinValue(LCD_CMD_PORT,EN,DIO_LOW);
    2422:	82 e0       	ldi	r24, 0x02	; 2
    2424:	67 e0       	ldi	r22, 0x07	; 7
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>
}
    242c:	2f 96       	adiw	r28, 0x0f	; 15
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <LCD_VidSendMultiInt>:

void LCD_VidSendMultiInt(u32 Copy_U8MultiInt){
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	2d 97       	sbiw	r28, 0x0d	; 13
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	6a 87       	std	Y+10, r22	; 0x0a
    2454:	7b 87       	std	Y+11, r23	; 0x0b
    2456:	8c 87       	std	Y+12, r24	; 0x0c
    2458:	9d 87       	std	Y+13, r25	; 0x0d
    u32 Local_Div = 1;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	a0 e0       	ldi	r26, 0x00	; 0
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	8e 83       	std	Y+6, r24	; 0x06
    2464:	9f 83       	std	Y+7, r25	; 0x07
    2466:	a8 87       	std	Y+8, r26	; 0x08
    2468:	b9 87       	std	Y+9, r27	; 0x09
    u32 Local_Temp = Copy_U8MultiInt;
    246a:	8a 85       	ldd	r24, Y+10	; 0x0a
    246c:	9b 85       	ldd	r25, Y+11	; 0x0b
    246e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2470:	bd 85       	ldd	r27, Y+13	; 0x0d
    2472:	8a 83       	std	Y+2, r24	; 0x02
    2474:	9b 83       	std	Y+3, r25	; 0x03
    2476:	ac 83       	std	Y+4, r26	; 0x04
    2478:	bd 83       	std	Y+5, r27	; 0x05
    247a:	24 c0       	rjmp	.+72     	; 0x24c4 <LCD_VidSendMultiInt+0x86>
    u8 Copy_U8SingleInt;
    while(Local_Temp >= 10){
        Local_Div *= 10;
    247c:	8e 81       	ldd	r24, Y+6	; 0x06
    247e:	9f 81       	ldd	r25, Y+7	; 0x07
    2480:	a8 85       	ldd	r26, Y+8	; 0x08
    2482:	b9 85       	ldd	r27, Y+9	; 0x09
    2484:	2a e0       	ldi	r18, 0x0A	; 10
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	0e 94 67 22 	call	0x44ce	; 0x44ce <__mulsi3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	8e 83       	std	Y+6, r24	; 0x06
    249a:	9f 83       	std	Y+7, r25	; 0x07
    249c:	a8 87       	std	Y+8, r26	; 0x08
    249e:	b9 87       	std	Y+9, r27	; 0x09
        Local_Temp /= 10;
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	9b 81       	ldd	r25, Y+3	; 0x03
    24a4:	ac 81       	ldd	r26, Y+4	; 0x04
    24a6:	bd 81       	ldd	r27, Y+5	; 0x05
    24a8:	2a e0       	ldi	r18, 0x0A	; 10
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	50 e0       	ldi	r21, 0x00	; 0
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 86 22 	call	0x450c	; 0x450c <__udivmodsi4>
    24b8:	da 01       	movw	r26, r20
    24ba:	c9 01       	movw	r24, r18
    24bc:	8a 83       	std	Y+2, r24	; 0x02
    24be:	9b 83       	std	Y+3, r25	; 0x03
    24c0:	ac 83       	std	Y+4, r26	; 0x04
    24c2:	bd 83       	std	Y+5, r27	; 0x05

void LCD_VidSendMultiInt(u32 Copy_U8MultiInt){
    u32 Local_Div = 1;
    u32 Local_Temp = Copy_U8MultiInt;
    u8 Copy_U8SingleInt;
    while(Local_Temp >= 10){
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	9b 81       	ldd	r25, Y+3	; 0x03
    24c8:	ac 81       	ldd	r26, Y+4	; 0x04
    24ca:	bd 81       	ldd	r27, Y+5	; 0x05
    24cc:	8a 30       	cpi	r24, 0x0A	; 10
    24ce:	91 05       	cpc	r25, r1
    24d0:	a1 05       	cpc	r26, r1
    24d2:	b1 05       	cpc	r27, r1
    24d4:	98 f6       	brcc	.-90     	; 0x247c <LCD_VidSendMultiInt+0x3e>
    24d6:	36 c0       	rjmp	.+108    	; 0x2544 <LCD_VidSendMultiInt+0x106>
        Local_Div *= 10;
        Local_Temp /= 10;
    }

    while(Local_Div >= 1){
        Copy_U8SingleInt = Copy_U8MultiInt / Local_Div;
    24d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    24da:	9b 85       	ldd	r25, Y+11	; 0x0b
    24dc:	ac 85       	ldd	r26, Y+12	; 0x0c
    24de:	bd 85       	ldd	r27, Y+13	; 0x0d
    24e0:	2e 81       	ldd	r18, Y+6	; 0x06
    24e2:	3f 81       	ldd	r19, Y+7	; 0x07
    24e4:	48 85       	ldd	r20, Y+8	; 0x08
    24e6:	59 85       	ldd	r21, Y+9	; 0x09
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	0e 94 86 22 	call	0x450c	; 0x450c <__udivmodsi4>
    24f0:	da 01       	movw	r26, r20
    24f2:	c9 01       	movw	r24, r18
    24f4:	89 83       	std	Y+1, r24	; 0x01
        LCD_VidSendSingleInt(Copy_U8SingleInt);
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	0e 94 7e 11 	call	0x22fc	; 0x22fc <LCD_VidSendSingleInt>
        Copy_U8MultiInt %= Local_Div;
    24fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    24fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2500:	ac 85       	ldd	r26, Y+12	; 0x0c
    2502:	bd 85       	ldd	r27, Y+13	; 0x0d
    2504:	2e 81       	ldd	r18, Y+6	; 0x06
    2506:	3f 81       	ldd	r19, Y+7	; 0x07
    2508:	48 85       	ldd	r20, Y+8	; 0x08
    250a:	59 85       	ldd	r21, Y+9	; 0x09
    250c:	bc 01       	movw	r22, r24
    250e:	cd 01       	movw	r24, r26
    2510:	0e 94 86 22 	call	0x450c	; 0x450c <__udivmodsi4>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	8a 87       	std	Y+10, r24	; 0x0a
    251a:	9b 87       	std	Y+11, r25	; 0x0b
    251c:	ac 87       	std	Y+12, r26	; 0x0c
    251e:	bd 87       	std	Y+13, r27	; 0x0d
        Local_Div /= 10;
    2520:	8e 81       	ldd	r24, Y+6	; 0x06
    2522:	9f 81       	ldd	r25, Y+7	; 0x07
    2524:	a8 85       	ldd	r26, Y+8	; 0x08
    2526:	b9 85       	ldd	r27, Y+9	; 0x09
    2528:	2a e0       	ldi	r18, 0x0A	; 10
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e0       	ldi	r20, 0x00	; 0
    252e:	50 e0       	ldi	r21, 0x00	; 0
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	0e 94 86 22 	call	0x450c	; 0x450c <__udivmodsi4>
    2538:	da 01       	movw	r26, r20
    253a:	c9 01       	movw	r24, r18
    253c:	8e 83       	std	Y+6, r24	; 0x06
    253e:	9f 83       	std	Y+7, r25	; 0x07
    2540:	a8 87       	std	Y+8, r26	; 0x08
    2542:	b9 87       	std	Y+9, r27	; 0x09
    while(Local_Temp >= 10){
        Local_Div *= 10;
        Local_Temp /= 10;
    }

    while(Local_Div >= 1){
    2544:	8e 81       	ldd	r24, Y+6	; 0x06
    2546:	9f 81       	ldd	r25, Y+7	; 0x07
    2548:	a8 85       	ldd	r26, Y+8	; 0x08
    254a:	b9 85       	ldd	r27, Y+9	; 0x09
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	a1 05       	cpc	r26, r1
    2550:	b1 05       	cpc	r27, r1
    2552:	11 f6       	brne	.-124    	; 0x24d8 <LCD_VidSendMultiInt+0x9a>
        Copy_U8SingleInt = Copy_U8MultiInt / Local_Div;
        LCD_VidSendSingleInt(Copy_U8SingleInt);
        Copy_U8MultiInt %= Local_Div;
        Local_Div /= 10;
    }
}
    2554:	2d 96       	adiw	r28, 0x0d	; 13
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <LCD_Clear>:
void LCD_Clear (void){
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
    LCD_VidSendCMD(0x01);
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_VidSendCMD>
    LCD_VidSendChar(' ');
    2574:	80 e2       	ldi	r24, 0x20	; 32
    2576:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_VidSendChar>
    LCD_VidLocation(LINE_1,0);
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_VidLocation>
}
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <FollowTheLine>:

#include "ir.h"
#include "MOTOR.h"
#include "LINE_FOLLOWER.h"

void FollowTheLine(void){
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	e6 97       	sbiw	r28, 0x36	; 54
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
	PORTD|=(1<<5);
    259c:	a2 e3       	ldi	r26, 0x32	; 50
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e2 e3       	ldi	r30, 0x32	; 50
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	80 62       	ori	r24, 0x20	; 32
    25a8:	8c 93       	st	X, r24
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	a6 e1       	ldi	r26, 0x16	; 22
    25b0:	b3 e4       	ldi	r27, 0x43	; 67
    25b2:	89 ab       	std	Y+49, r24	; 0x31
    25b4:	9a ab       	std	Y+50, r25	; 0x32
    25b6:	ab ab       	std	Y+51, r26	; 0x33
    25b8:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25ba:	69 a9       	ldd	r22, Y+49	; 0x31
    25bc:	7a a9       	ldd	r23, Y+50	; 0x32
    25be:	8b a9       	ldd	r24, Y+51	; 0x33
    25c0:	9c a9       	ldd	r25, Y+52	; 0x34
    25c2:	2b ea       	ldi	r18, 0xAB	; 171
    25c4:	3a ea       	ldi	r19, 0xAA	; 170
    25c6:	4a ea       	ldi	r20, 0xAA	; 170
    25c8:	50 e4       	ldi	r21, 0x40	; 64
    25ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	8d a7       	std	Y+45, r24	; 0x2d
    25d4:	9e a7       	std	Y+46, r25	; 0x2e
    25d6:	af a7       	std	Y+47, r26	; 0x2f
    25d8:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    25da:	6d a5       	ldd	r22, Y+45	; 0x2d
    25dc:	7e a5       	ldd	r23, Y+46	; 0x2e
    25de:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e0:	98 a9       	ldd	r25, Y+48	; 0x30
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e8       	ldi	r20, 0x80	; 128
    25e8:	5f e3       	ldi	r21, 0x3F	; 63
    25ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ee:	88 23       	and	r24, r24
    25f0:	1c f4       	brge	.+6      	; 0x25f8 <FollowTheLine+0x70>
		__ticks = 1;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	8c a7       	std	Y+44, r24	; 0x2c
    25f6:	91 c0       	rjmp	.+290    	; 0x271a <FollowTheLine+0x192>
	else if (__tmp > 255)
    25f8:	6d a5       	ldd	r22, Y+45	; 0x2d
    25fa:	7e a5       	ldd	r23, Y+46	; 0x2e
    25fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    25fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	4f e7       	ldi	r20, 0x7F	; 127
    2606:	53 e4       	ldi	r21, 0x43	; 67
    2608:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    260c:	18 16       	cp	r1, r24
    260e:	0c f0       	brlt	.+2      	; 0x2612 <FollowTheLine+0x8a>
    2610:	7b c0       	rjmp	.+246    	; 0x2708 <FollowTheLine+0x180>
	{
		_delay_ms(__us / 1000.0);
    2612:	69 a9       	ldd	r22, Y+49	; 0x31
    2614:	7a a9       	ldd	r23, Y+50	; 0x32
    2616:	8b a9       	ldd	r24, Y+51	; 0x33
    2618:	9c a9       	ldd	r25, Y+52	; 0x34
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	4a e7       	ldi	r20, 0x7A	; 122
    2620:	54 e4       	ldi	r21, 0x44	; 68
    2622:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	88 a7       	std	Y+40, r24	; 0x28
    262c:	99 a7       	std	Y+41, r25	; 0x29
    262e:	aa a7       	std	Y+42, r26	; 0x2a
    2630:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2632:	68 a5       	ldd	r22, Y+40	; 0x28
    2634:	79 a5       	ldd	r23, Y+41	; 0x29
    2636:	8a a5       	ldd	r24, Y+42	; 0x2a
    2638:	9b a5       	ldd	r25, Y+43	; 0x2b
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	4a e7       	ldi	r20, 0x7A	; 122
    2640:	55 e4       	ldi	r21, 0x45	; 69
    2642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	8c a3       	std	Y+36, r24	; 0x24
    264c:	9d a3       	std	Y+37, r25	; 0x25
    264e:	ae a3       	std	Y+38, r26	; 0x26
    2650:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    2652:	6c a1       	ldd	r22, Y+36	; 0x24
    2654:	7d a1       	ldd	r23, Y+37	; 0x25
    2656:	8e a1       	ldd	r24, Y+38	; 0x26
    2658:	9f a1       	ldd	r25, Y+39	; 0x27
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e8       	ldi	r20, 0x80	; 128
    2660:	5f e3       	ldi	r21, 0x3F	; 63
    2662:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2666:	88 23       	and	r24, r24
    2668:	2c f4       	brge	.+10     	; 0x2674 <FollowTheLine+0xec>
		__ticks = 1;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9b a3       	std	Y+35, r25	; 0x23
    2670:	8a a3       	std	Y+34, r24	; 0x22
    2672:	3f c0       	rjmp	.+126    	; 0x26f2 <FollowTheLine+0x16a>
	else if (__tmp > 65535)
    2674:	6c a1       	ldd	r22, Y+36	; 0x24
    2676:	7d a1       	ldd	r23, Y+37	; 0x25
    2678:	8e a1       	ldd	r24, Y+38	; 0x26
    267a:	9f a1       	ldd	r25, Y+39	; 0x27
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	3f ef       	ldi	r19, 0xFF	; 255
    2680:	4f e7       	ldi	r20, 0x7F	; 127
    2682:	57 e4       	ldi	r21, 0x47	; 71
    2684:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2688:	18 16       	cp	r1, r24
    268a:	4c f5       	brge	.+82     	; 0x26de <FollowTheLine+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268c:	68 a5       	ldd	r22, Y+40	; 0x28
    268e:	79 a5       	ldd	r23, Y+41	; 0x29
    2690:	8a a5       	ldd	r24, Y+42	; 0x2a
    2692:	9b a5       	ldd	r25, Y+43	; 0x2b
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e2       	ldi	r20, 0x20	; 32
    269a:	51 e4       	ldi	r21, 0x41	; 65
    269c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	9b a3       	std	Y+35, r25	; 0x23
    26b2:	8a a3       	std	Y+34, r24	; 0x22
    26b4:	0f c0       	rjmp	.+30     	; 0x26d4 <FollowTheLine+0x14c>
    26b6:	80 e9       	ldi	r24, 0x90	; 144
    26b8:	91 e0       	ldi	r25, 0x01	; 1
    26ba:	99 a3       	std	Y+33, r25	; 0x21
    26bc:	88 a3       	std	Y+32, r24	; 0x20
    26be:	88 a1       	ldd	r24, Y+32	; 0x20
    26c0:	99 a1       	ldd	r25, Y+33	; 0x21
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <FollowTheLine+0x13a>
    26c6:	99 a3       	std	Y+33, r25	; 0x21
    26c8:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ca:	8a a1       	ldd	r24, Y+34	; 0x22
    26cc:	9b a1       	ldd	r25, Y+35	; 0x23
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	9b a3       	std	Y+35, r25	; 0x23
    26d2:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d4:	8a a1       	ldd	r24, Y+34	; 0x22
    26d6:	9b a1       	ldd	r25, Y+35	; 0x23
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	69 f7       	brne	.-38     	; 0x26b6 <FollowTheLine+0x12e>
    26dc:	24 c0       	rjmp	.+72     	; 0x2726 <FollowTheLine+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26de:	6c a1       	ldd	r22, Y+36	; 0x24
    26e0:	7d a1       	ldd	r23, Y+37	; 0x25
    26e2:	8e a1       	ldd	r24, Y+38	; 0x26
    26e4:	9f a1       	ldd	r25, Y+39	; 0x27
    26e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	9b a3       	std	Y+35, r25	; 0x23
    26f0:	8a a3       	std	Y+34, r24	; 0x22
    26f2:	8a a1       	ldd	r24, Y+34	; 0x22
    26f4:	9b a1       	ldd	r25, Y+35	; 0x23
    26f6:	9f 8f       	std	Y+31, r25	; 0x1f
    26f8:	8e 8f       	std	Y+30, r24	; 0x1e
    26fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <FollowTheLine+0x176>
    2702:	9f 8f       	std	Y+31, r25	; 0x1f
    2704:	8e 8f       	std	Y+30, r24	; 0x1e
    2706:	0f c0       	rjmp	.+30     	; 0x2726 <FollowTheLine+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2708:	6d a5       	ldd	r22, Y+45	; 0x2d
    270a:	7e a5       	ldd	r23, Y+46	; 0x2e
    270c:	8f a5       	ldd	r24, Y+47	; 0x2f
    270e:	98 a9       	ldd	r25, Y+48	; 0x30
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	8c a7       	std	Y+44, r24	; 0x2c
    271a:	8c a5       	ldd	r24, Y+44	; 0x2c
    271c:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    271e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2720:	8a 95       	dec	r24
    2722:	f1 f7       	brne	.-4      	; 0x2720 <FollowTheLine+0x198>
    2724:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(150);
	PORTD &=~(1<<5) ;
    2726:	a2 e3       	ldi	r26, 0x32	; 50
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e2 e3       	ldi	r30, 0x32	; 50
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	8f 7d       	andi	r24, 0xDF	; 223
    2732:	8c 93       	st	X, r24

	PORTC|=1;
    2734:	a5 e3       	ldi	r26, 0x35	; 53
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e5 e3       	ldi	r30, 0x35	; 53
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	81 60       	ori	r24, 0x01	; 1
    2740:	8c 93       	st	X, r24

	u8 RightSensor=getIR(1) ;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <getIR>
    2748:	8e ab       	std	Y+54, r24	; 0x36
	u8 LeftSensor=getIR(2);
    274a:	82 e0       	ldi	r24, 0x02	; 2
    274c:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <getIR>
    2750:	8d ab       	std	Y+53, r24	; 0x35
	if(RightSensor==1 && LeftSensor==0){
    2752:	8e a9       	ldd	r24, Y+54	; 0x36
    2754:	81 30       	cpi	r24, 0x01	; 1
    2756:	09 f0       	breq	.+2      	; 0x275a <FollowTheLine+0x1d2>
    2758:	79 c0       	rjmp	.+242    	; 0x284c <FollowTheLine+0x2c4>
    275a:	8d a9       	ldd	r24, Y+53	; 0x35
    275c:	88 23       	and	r24, r24
    275e:	09 f0       	breq	.+2      	; 0x2762 <FollowTheLine+0x1da>
    2760:	75 c0       	rjmp	.+234    	; 0x284c <FollowTheLine+0x2c4>
		Rotate_right() ;
    2762:	0e 94 c3 14 	call	0x2986	; 0x2986 <Rotate_right>
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e8       	ldi	r25, 0x80	; 128
    276a:	ab e3       	ldi	r26, 0x3B	; 59
    276c:	b4 e4       	ldi	r27, 0x44	; 68
    276e:	89 8f       	std	Y+25, r24	; 0x19
    2770:	9a 8f       	std	Y+26, r25	; 0x1a
    2772:	ab 8f       	std	Y+27, r26	; 0x1b
    2774:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2776:	69 8d       	ldd	r22, Y+25	; 0x19
    2778:	7a 8d       	ldd	r23, Y+26	; 0x1a
    277a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    277c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	4a e7       	ldi	r20, 0x7A	; 122
    2784:	55 e4       	ldi	r21, 0x45	; 69
    2786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	8d 8b       	std	Y+21, r24	; 0x15
    2790:	9e 8b       	std	Y+22, r25	; 0x16
    2792:	af 8b       	std	Y+23, r26	; 0x17
    2794:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2796:	6d 89       	ldd	r22, Y+21	; 0x15
    2798:	7e 89       	ldd	r23, Y+22	; 0x16
    279a:	8f 89       	ldd	r24, Y+23	; 0x17
    279c:	98 8d       	ldd	r25, Y+24	; 0x18
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e8       	ldi	r20, 0x80	; 128
    27a4:	5f e3       	ldi	r21, 0x3F	; 63
    27a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27aa:	88 23       	and	r24, r24
    27ac:	2c f4       	brge	.+10     	; 0x27b8 <FollowTheLine+0x230>
		__ticks = 1;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	9c 8b       	std	Y+20, r25	; 0x14
    27b4:	8b 8b       	std	Y+19, r24	; 0x13
    27b6:	3f c0       	rjmp	.+126    	; 0x2836 <FollowTheLine+0x2ae>
	else if (__tmp > 65535)
    27b8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ba:	7e 89       	ldd	r23, Y+22	; 0x16
    27bc:	8f 89       	ldd	r24, Y+23	; 0x17
    27be:	98 8d       	ldd	r25, Y+24	; 0x18
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	3f ef       	ldi	r19, 0xFF	; 255
    27c4:	4f e7       	ldi	r20, 0x7F	; 127
    27c6:	57 e4       	ldi	r21, 0x47	; 71
    27c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27cc:	18 16       	cp	r1, r24
    27ce:	4c f5       	brge	.+82     	; 0x2822 <FollowTheLine+0x29a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d0:	69 8d       	ldd	r22, Y+25	; 0x19
    27d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e2       	ldi	r20, 0x20	; 32
    27de:	51 e4       	ldi	r21, 0x41	; 65
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	bc 01       	movw	r22, r24
    27ea:	cd 01       	movw	r24, r26
    27ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	9c 8b       	std	Y+20, r25	; 0x14
    27f6:	8b 8b       	std	Y+19, r24	; 0x13
    27f8:	0f c0       	rjmp	.+30     	; 0x2818 <FollowTheLine+0x290>
    27fa:	80 e9       	ldi	r24, 0x90	; 144
    27fc:	91 e0       	ldi	r25, 0x01	; 1
    27fe:	9a 8b       	std	Y+18, r25	; 0x12
    2800:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2802:	89 89       	ldd	r24, Y+17	; 0x11
    2804:	9a 89       	ldd	r25, Y+18	; 0x12
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <FollowTheLine+0x27e>
    280a:	9a 8b       	std	Y+18, r25	; 0x12
    280c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280e:	8b 89       	ldd	r24, Y+19	; 0x13
    2810:	9c 89       	ldd	r25, Y+20	; 0x14
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	9c 8b       	std	Y+20, r25	; 0x14
    2816:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2818:	8b 89       	ldd	r24, Y+19	; 0x13
    281a:	9c 89       	ldd	r25, Y+20	; 0x14
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	69 f7       	brne	.-38     	; 0x27fa <FollowTheLine+0x272>
    2820:	94 c0       	rjmp	.+296    	; 0x294a <FollowTheLine+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2822:	6d 89       	ldd	r22, Y+21	; 0x15
    2824:	7e 89       	ldd	r23, Y+22	; 0x16
    2826:	8f 89       	ldd	r24, Y+23	; 0x17
    2828:	98 8d       	ldd	r25, Y+24	; 0x18
    282a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	9c 8b       	std	Y+20, r25	; 0x14
    2834:	8b 8b       	std	Y+19, r24	; 0x13
    2836:	8b 89       	ldd	r24, Y+19	; 0x13
    2838:	9c 89       	ldd	r25, Y+20	; 0x14
    283a:	98 8b       	std	Y+16, r25	; 0x10
    283c:	8f 87       	std	Y+15, r24	; 0x0f
    283e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2840:	98 89       	ldd	r25, Y+16	; 0x10
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	f1 f7       	brne	.-4      	; 0x2842 <FollowTheLine+0x2ba>
    2846:	98 8b       	std	Y+16, r25	; 0x10
    2848:	8f 87       	std	Y+15, r24	; 0x0f
    284a:	7f c0       	rjmp	.+254    	; 0x294a <FollowTheLine+0x3c2>
		_delay_ms(750) ;
	}else if (RightSensor==0 && LeftSensor==1){
    284c:	8e a9       	ldd	r24, Y+54	; 0x36
    284e:	88 23       	and	r24, r24
    2850:	09 f0       	breq	.+2      	; 0x2854 <FollowTheLine+0x2cc>
    2852:	79 c0       	rjmp	.+242    	; 0x2946 <FollowTheLine+0x3be>
    2854:	8d a9       	ldd	r24, Y+53	; 0x35
    2856:	81 30       	cpi	r24, 0x01	; 1
    2858:	09 f0       	breq	.+2      	; 0x285c <FollowTheLine+0x2d4>
    285a:	75 c0       	rjmp	.+234    	; 0x2946 <FollowTheLine+0x3be>
		Rotate_left();
    285c:	0e 94 e6 14 	call	0x29cc	; 0x29cc <Rotate_left>
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e8       	ldi	r25, 0x80	; 128
    2864:	ab e3       	ldi	r26, 0x3B	; 59
    2866:	b4 e4       	ldi	r27, 0x44	; 68
    2868:	8b 87       	std	Y+11, r24	; 0x0b
    286a:	9c 87       	std	Y+12, r25	; 0x0c
    286c:	ad 87       	std	Y+13, r26	; 0x0d
    286e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2870:	6b 85       	ldd	r22, Y+11	; 0x0b
    2872:	7c 85       	ldd	r23, Y+12	; 0x0c
    2874:	8d 85       	ldd	r24, Y+13	; 0x0d
    2876:	9e 85       	ldd	r25, Y+14	; 0x0e
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	4a e7       	ldi	r20, 0x7A	; 122
    287e:	55 e4       	ldi	r21, 0x45	; 69
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	8f 83       	std	Y+7, r24	; 0x07
    288a:	98 87       	std	Y+8, r25	; 0x08
    288c:	a9 87       	std	Y+9, r26	; 0x09
    288e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2890:	6f 81       	ldd	r22, Y+7	; 0x07
    2892:	78 85       	ldd	r23, Y+8	; 0x08
    2894:	89 85       	ldd	r24, Y+9	; 0x09
    2896:	9a 85       	ldd	r25, Y+10	; 0x0a
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e8       	ldi	r20, 0x80	; 128
    289e:	5f e3       	ldi	r21, 0x3F	; 63
    28a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28a4:	88 23       	and	r24, r24
    28a6:	2c f4       	brge	.+10     	; 0x28b2 <FollowTheLine+0x32a>
		__ticks = 1;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9e 83       	std	Y+6, r25	; 0x06
    28ae:	8d 83       	std	Y+5, r24	; 0x05
    28b0:	3f c0       	rjmp	.+126    	; 0x2930 <FollowTheLine+0x3a8>
	else if (__tmp > 65535)
    28b2:	6f 81       	ldd	r22, Y+7	; 0x07
    28b4:	78 85       	ldd	r23, Y+8	; 0x08
    28b6:	89 85       	ldd	r24, Y+9	; 0x09
    28b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	3f ef       	ldi	r19, 0xFF	; 255
    28be:	4f e7       	ldi	r20, 0x7F	; 127
    28c0:	57 e4       	ldi	r21, 0x47	; 71
    28c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28c6:	18 16       	cp	r1, r24
    28c8:	4c f5       	brge	.+82     	; 0x291c <FollowTheLine+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    28cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e2       	ldi	r20, 0x20	; 32
    28d8:	51 e4       	ldi	r21, 0x41	; 65
    28da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
    28f2:	0f c0       	rjmp	.+30     	; 0x2912 <FollowTheLine+0x38a>
    28f4:	80 e9       	ldi	r24, 0x90	; 144
    28f6:	91 e0       	ldi	r25, 0x01	; 1
    28f8:	9c 83       	std	Y+4, r25	; 0x04
    28fa:	8b 83       	std	Y+3, r24	; 0x03
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <FollowTheLine+0x378>
    2904:	9c 83       	std	Y+4, r25	; 0x04
    2906:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2908:	8d 81       	ldd	r24, Y+5	; 0x05
    290a:	9e 81       	ldd	r25, Y+6	; 0x06
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	9e 83       	std	Y+6, r25	; 0x06
    2910:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2912:	8d 81       	ldd	r24, Y+5	; 0x05
    2914:	9e 81       	ldd	r25, Y+6	; 0x06
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	69 f7       	brne	.-38     	; 0x28f4 <FollowTheLine+0x36c>
    291a:	17 c0       	rjmp	.+46     	; 0x294a <FollowTheLine+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291c:	6f 81       	ldd	r22, Y+7	; 0x07
    291e:	78 85       	ldd	r23, Y+8	; 0x08
    2920:	89 85       	ldd	r24, Y+9	; 0x09
    2922:	9a 85       	ldd	r25, Y+10	; 0x0a
    2924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	9e 83       	std	Y+6, r25	; 0x06
    292e:	8d 83       	std	Y+5, r24	; 0x05
    2930:	8d 81       	ldd	r24, Y+5	; 0x05
    2932:	9e 81       	ldd	r25, Y+6	; 0x06
    2934:	9a 83       	std	Y+2, r25	; 0x02
    2936:	89 83       	std	Y+1, r24	; 0x01
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	9a 81       	ldd	r25, Y+2	; 0x02
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <FollowTheLine+0x3b4>
    2940:	9a 83       	std	Y+2, r25	; 0x02
    2942:	89 83       	std	Y+1, r24	; 0x01
    2944:	02 c0       	rjmp	.+4      	; 0x294a <FollowTheLine+0x3c2>
		_delay_ms(750) ;
	}else{
		GoStraight() ;
    2946:	0e 94 09 15 	call	0x2a12	; 0x2a12 <GoStraight>

	}
}
    294a:	e6 96       	adiw	r28, 0x36	; 54
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	cf 91       	pop	r28
    2958:	df 91       	pop	r29
    295a:	08 95       	ret

0000295c <MOTOR_init>:
#include "STD_TYPES.h"
#include <avr/io.h>
#include "DIO_Interface.h"
#include "MOTOR.h"

void MOTOR_init(void){
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
	DDRD|=(1<<6)|(1<<7);
    2964:	a1 e3       	ldi	r26, 0x31	; 49
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	e1 e3       	ldi	r30, 0x31	; 49
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	80 6c       	ori	r24, 0xC0	; 192
    2970:	8c 93       	st	X, r24
	DDRC|=(1<<4)|(1<<3);
    2972:	a4 e3       	ldi	r26, 0x34	; 52
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	e4 e3       	ldi	r30, 0x34	; 52
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	88 61       	ori	r24, 0x18	; 24
    297e:	8c 93       	st	X, r24
}
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	08 95       	ret

00002986 <Rotate_right>:
void Rotate_right(void){
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
	PORTD|=(1<<6);
    298e:	a2 e3       	ldi	r26, 0x32	; 50
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e2 e3       	ldi	r30, 0x32	; 50
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	80 64       	ori	r24, 0x40	; 64
    299a:	8c 93       	st	X, r24
	PORTD&=~(1<<7) ;
    299c:	a2 e3       	ldi	r26, 0x32	; 50
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e2 e3       	ldi	r30, 0x32	; 50
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	8f 77       	andi	r24, 0x7F	; 127
    29a8:	8c 93       	st	X, r24

	PORTC|=(1<<4);
    29aa:	a5 e3       	ldi	r26, 0x35	; 53
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	e5 e3       	ldi	r30, 0x35	; 53
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	80 61       	ori	r24, 0x10	; 16
    29b6:	8c 93       	st	X, r24
	PORTC&=~(1<<3) ;
    29b8:	a5 e3       	ldi	r26, 0x35	; 53
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	e5 e3       	ldi	r30, 0x35	; 53
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	87 7f       	andi	r24, 0xF7	; 247
    29c4:	8c 93       	st	X, r24
}
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <Rotate_left>:
void Rotate_left(void){
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
	PORTD|=(1<<7);
    29d4:	a2 e3       	ldi	r26, 0x32	; 50
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	e2 e3       	ldi	r30, 0x32	; 50
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	80 68       	ori	r24, 0x80	; 128
    29e0:	8c 93       	st	X, r24
	PORTD&=~(1<<6) ;
    29e2:	a2 e3       	ldi	r26, 0x32	; 50
    29e4:	b0 e0       	ldi	r27, 0x00	; 0
    29e6:	e2 e3       	ldi	r30, 0x32	; 50
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	8f 7b       	andi	r24, 0xBF	; 191
    29ee:	8c 93       	st	X, r24

	PORTC&=~(1<<4);
    29f0:	a5 e3       	ldi	r26, 0x35	; 53
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	e5 e3       	ldi	r30, 0x35	; 53
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	8f 7e       	andi	r24, 0xEF	; 239
    29fc:	8c 93       	st	X, r24
	PORTC|=(1<<3) ;
    29fe:	a5 e3       	ldi	r26, 0x35	; 53
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	e5 e3       	ldi	r30, 0x35	; 53
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	88 60       	ori	r24, 0x08	; 8
    2a0a:	8c 93       	st	X, r24
}
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	08 95       	ret

00002a12 <GoStraight>:
void GoStraight(void){
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
	PORTD|=(1<<7);
    2a1a:	a2 e3       	ldi	r26, 0x32	; 50
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e2 e3       	ldi	r30, 0x32	; 50
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	80 68       	ori	r24, 0x80	; 128
    2a26:	8c 93       	st	X, r24
	PORTD&=~(1<<6);
    2a28:	a2 e3       	ldi	r26, 0x32	; 50
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	e2 e3       	ldi	r30, 0x32	; 50
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	8f 7b       	andi	r24, 0xBF	; 191
    2a34:	8c 93       	st	X, r24
	PORTC|=(1<<4);
    2a36:	a5 e3       	ldi	r26, 0x35	; 53
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	e5 e3       	ldi	r30, 0x35	; 53
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	80 61       	ori	r24, 0x10	; 16
    2a42:	8c 93       	st	X, r24
	PORTC&=~(1<<3) ;
    2a44:	a5 e3       	ldi	r26, 0x35	; 53
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e5 e3       	ldi	r30, 0x35	; 53
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	87 7f       	andi	r24, 0xF7	; 247
    2a50:	8c 93       	st	X, r24
}
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <Timer1_VidTimer1Normal>:
#define NULL ((void *)0)

void (*ICU_PFCallBack)(void)=NULL;

void Timer1_VidTimer1Normal (void)
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
	/*MODE -> Normal*/
	CLR_BIT(TCCR1A,WGM10);
    2a60:	af e4       	ldi	r26, 0x4F	; 79
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	ef e4       	ldi	r30, 0x4F	; 79
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	8e 7f       	andi	r24, 0xFE	; 254
    2a6c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,WGM11);
    2a6e:	af e4       	ldi	r26, 0x4F	; 79
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	ef e4       	ldi	r30, 0x4F	; 79
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	8d 7f       	andi	r24, 0xFD	; 253
    2a7a:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B,WGM12);
    2a7c:	ae e4       	ldi	r26, 0x4E	; 78
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	ee e4       	ldi	r30, 0x4E	; 78
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	87 7f       	andi	r24, 0xF7	; 247
    2a88:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,WGM13);
    2a8a:	ae e4       	ldi	r26, 0x4E	; 78
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	ee e4       	ldi	r30, 0x4E	; 78
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	8f 7e       	andi	r24, 0xEF	; 239
    2a96:	8c 93       	st	X, r24


	/* CLK / 256 	*/
	CLR_BIT(TCCR1B,CS10);
    2a98:	ae e4       	ldi	r26, 0x4E	; 78
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	ee e4       	ldi	r30, 0x4E	; 78
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
    2aa2:	8e 7f       	andi	r24, 0xFE	; 254
    2aa4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    2aa6:	ae e4       	ldi	r26, 0x4E	; 78
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	ee e4       	ldi	r30, 0x4E	; 78
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	8d 7f       	andi	r24, 0xFD	; 253
    2ab2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS12);
    2ab4:	ae e4       	ldi	r26, 0x4E	; 78
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	ee e4       	ldi	r30, 0x4E	; 78
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	84 60       	ori	r24, 0x04	; 4
    2ac0:	8c 93       	st	X, r24
}
    2ac2:	cf 91       	pop	r28
    2ac4:	df 91       	pop	r29
    2ac6:	08 95       	ret

00002ac8 <Timer1_VidTimer1FPWM>:

void Timer1_VidTimer1FPWM (void)
{
    2ac8:	df 93       	push	r29
    2aca:	cf 93       	push	r28
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
	/*MODE -> FAST PWM*/
	CLR_BIT(TCCR1A,WGM10);
    2ad0:	af e4       	ldi	r26, 0x4F	; 79
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	ef e4       	ldi	r30, 0x4F	; 79
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	8e 7f       	andi	r24, 0xFE	; 254
    2adc:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    2ade:	af e4       	ldi	r26, 0x4F	; 79
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	ef e4       	ldi	r30, 0x4F	; 79
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	82 60       	ori	r24, 0x02	; 2
    2aea:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    2aec:	ae e4       	ldi	r26, 0x4E	; 78
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	ee e4       	ldi	r30, 0x4E	; 78
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	88 60       	ori	r24, 0x08	; 8
    2af8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    2afa:	ae e4       	ldi	r26, 0x4E	; 78
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	ee e4       	ldi	r30, 0x4E	; 78
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	80 61       	ori	r24, 0x10	; 16
    2b06:	8c 93       	st	X, r24

	/*CLEAR OC1A*/
	CLR_BIT(TCCR1A,COM1A0);
    2b08:	af e4       	ldi	r26, 0x4F	; 79
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	ef e4       	ldi	r30, 0x4F	; 79
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	8f 7b       	andi	r24, 0xBF	; 191
    2b14:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    2b16:	af e4       	ldi	r26, 0x4F	; 79
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	ef e4       	ldi	r30, 0x4F	; 79
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	80 68       	ori	r24, 0x80	; 128
    2b22:	8c 93       	st	X, r24

	ICR1=19999;
    2b24:	e6 e4       	ldi	r30, 0x46	; 70
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	8f e1       	ldi	r24, 0x1F	; 31
    2b2a:	9e e4       	ldi	r25, 0x4E	; 78
    2b2c:	91 83       	std	Z+1, r25	; 0x01
    2b2e:	80 83       	st	Z, r24

	/* CLK / 8 	*/
	CLR_BIT(TCCR1B,CS10);
    2b30:	ae e4       	ldi	r26, 0x4E	; 78
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	ee e4       	ldi	r30, 0x4E	; 78
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	8e 7f       	andi	r24, 0xFE	; 254
    2b3c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    2b3e:	ae e4       	ldi	r26, 0x4E	; 78
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	ee e4       	ldi	r30, 0x4E	; 78
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	82 60       	ori	r24, 0x02	; 2
    2b4a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    2b4c:	ae e4       	ldi	r26, 0x4E	; 78
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	ee e4       	ldi	r30, 0x4E	; 78
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	8b 7f       	andi	r24, 0xFB	; 251
    2b58:	8c 93       	st	X, r24
}
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	08 95       	ret

00002b60 <ICU_VidInit>:

void ICU_VidInit(void){
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
	/*rising edge*/
	SET_BIT(TCCR1B,ICES1);
    2b68:	ae e4       	ldi	r26, 0x4E	; 78
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	ee e4       	ldi	r30, 0x4E	; 78
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	80 64       	ori	r24, 0x40	; 64
    2b74:	8c 93       	st	X, r24

	/*INPUT CAPTURE INTERRUPT ENABLE*/
	SET_BIT(TIMSK,TICIE1);
    2b76:	a9 e5       	ldi	r26, 0x59	; 89
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e9 e5       	ldi	r30, 0x59	; 89
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	80 62       	ori	r24, 0x20	; 32
    2b82:	8c 93       	st	X, r24
}
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <ICU_VidEdgeSelect>:


void ICU_VidEdgeSelect(u8 Copy_U8EdgeSelect)
{
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	00 d0       	rcall	.+0      	; 0x2b90 <ICU_VidEdgeSelect+0x6>
    2b90:	0f 92       	push	r0
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    2b96:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8EdgeSelect)
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	28 2f       	mov	r18, r24
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	3b 83       	std	Y+3, r19	; 0x03
    2ba0:	2a 83       	std	Y+2, r18	; 0x02
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	31 f0       	breq	.+12     	; 0x2bb6 <ICU_VidEdgeSelect+0x2c>
    2baa:	2a 81       	ldd	r18, Y+2	; 0x02
    2bac:	3b 81       	ldd	r19, Y+3	; 0x03
    2bae:	21 30       	cpi	r18, 0x01	; 1
    2bb0:	31 05       	cpc	r19, r1
    2bb2:	49 f0       	breq	.+18     	; 0x2bc6 <ICU_VidEdgeSelect+0x3c>
    2bb4:	0f c0       	rjmp	.+30     	; 0x2bd4 <ICU_VidEdgeSelect+0x4a>
	{
	case 0:
		CLR_BIT(TCCR1B,ICES1);
    2bb6:	ae e4       	ldi	r26, 0x4E	; 78
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	ee e4       	ldi	r30, 0x4E	; 78
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	8f 7b       	andi	r24, 0xBF	; 191
    2bc2:	8c 93       	st	X, r24
    2bc4:	07 c0       	rjmp	.+14     	; 0x2bd4 <ICU_VidEdgeSelect+0x4a>
		break;
	case 1:
		SET_BIT(TCCR1B,ICES1);
    2bc6:	ae e4       	ldi	r26, 0x4E	; 78
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	ee e4       	ldi	r30, 0x4E	; 78
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 81       	ld	r24, Z
    2bd0:	80 64       	ori	r24, 0x40	; 64
    2bd2:	8c 93       	st	X, r24
		break;

	}
}
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <ICU_U16ReadICR>:



u16 ICU_U16ReadICR()
{
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
	return	ICR1;//Value of TCNT1
    2be8:	e6 e4       	ldi	r30, 0x46	; 70
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	91 81       	ldd	r25, Z+1	; 0x01
}
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <ICU_VidINT_Disable>:
void ICU_VidINT_Disable(void)
{
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TICIE1);
    2bfe:	a9 e5       	ldi	r26, 0x59	; 89
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	e9 e5       	ldi	r30, 0x59	; 89
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	8f 7d       	andi	r24, 0xDF	; 223
    2c0a:	8c 93       	st	X, r24
}
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <ICU_VidSetCallBack>:

void ICU_VidSetCallBack(void (*Copy_pfCallBack)(void)){
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <ICU_VidSetCallBack+0x6>
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	9a 83       	std	Y+2, r25	; 0x02
    2c1e:	89 83       	std	Y+1, r24	; 0x01
	ICU_PFCallBack=Copy_pfCallBack;
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	9a 81       	ldd	r25, Y+2	; 0x02
    2c24:	90 93 c7 01 	sts	0x01C7, r25
    2c28:	80 93 c6 01 	sts	0x01C6, r24
}
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    2c36:	1f 92       	push	r1
    2c38:	0f 92       	push	r0
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	0f 92       	push	r0
    2c3e:	11 24       	eor	r1, r1
    2c40:	2f 93       	push	r18
    2c42:	3f 93       	push	r19
    2c44:	4f 93       	push	r20
    2c46:	5f 93       	push	r21
    2c48:	6f 93       	push	r22
    2c4a:	7f 93       	push	r23
    2c4c:	8f 93       	push	r24
    2c4e:	9f 93       	push	r25
    2c50:	af 93       	push	r26
    2c52:	bf 93       	push	r27
    2c54:	ef 93       	push	r30
    2c56:	ff 93       	push	r31
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
	if(ICU_PFCallBack != NULL)
    2c60:	80 91 c6 01 	lds	r24, 0x01C6
    2c64:	90 91 c7 01 	lds	r25, 0x01C7
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	29 f0       	breq	.+10     	; 0x2c76 <__vector_6+0x40>
		ICU_PFCallBack();
    2c6c:	e0 91 c6 01 	lds	r30, 0x01C6
    2c70:	f0 91 c7 01 	lds	r31, 0x01C7
    2c74:	09 95       	icall
}
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	ff 91       	pop	r31
    2c7c:	ef 91       	pop	r30
    2c7e:	bf 91       	pop	r27
    2c80:	af 91       	pop	r26
    2c82:	9f 91       	pop	r25
    2c84:	8f 91       	pop	r24
    2c86:	7f 91       	pop	r23
    2c88:	6f 91       	pop	r22
    2c8a:	5f 91       	pop	r21
    2c8c:	4f 91       	pop	r20
    2c8e:	3f 91       	pop	r19
    2c90:	2f 91       	pop	r18
    2c92:	0f 90       	pop	r0
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	0f 90       	pop	r0
    2c98:	1f 90       	pop	r1
    2c9a:	18 95       	reti

00002c9c <UART_VidInit>:

#include <avr/io.h>
#include "UART.h"

void UART_VidInit(void)
{
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <UART_VidInit+0x6>
    2ca2:	0f 92       	push	r0
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62

	u16 Local_u16BaudRate=51;
    2ca8:	83 e3       	ldi	r24, 0x33	; 51
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	9b 83       	std	Y+3, r25	; 0x03
    2cae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8USCRC=0b10000000;
    2cb0:	80 e8       	ldi	r24, 0x80	; 128
    2cb2:	89 83       	std	Y+1, r24	; 0x01

	/*Baud Rate 9600*/
	UBRRL=(u8)Local_u16BaudRate;
    2cb4:	e9 e2       	ldi	r30, 0x29	; 41
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	80 83       	st	Z, r24
	UBRRH=(u8)(Local_u16BaudRate>>8);
    2cbc:	e0 e4       	ldi	r30, 0x40	; 64
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc4:	89 2f       	mov	r24, r25
    2cc6:	99 27       	eor	r25, r25
    2cc8:	80 83       	st	Z, r24

	/*Normal Speed */
	CLR_BIT(UCSRA,U2X);
    2cca:	ab e2       	ldi	r26, 0x2B	; 43
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	eb e2       	ldi	r30, 0x2B	; 43
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	8d 7f       	andi	r24, 0xFD	; 253
    2cd6:	8c 93       	st	X, r24

	/*Disable Multi-processor*/
	CLR_BIT(UCSRA,MPCM);
    2cd8:	ab e2       	ldi	r26, 0x2B	; 43
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	eb e2       	ldi	r30, 0x2B	; 43
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	8e 7f       	andi	r24, 0xFE	; 254
    2ce4:	8c 93       	st	X, r24

	/*RX Enable / TX Enable */
	SET_BIT(UCSRB,RXEN);
    2ce6:	aa e2       	ldi	r26, 0x2A	; 42
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	ea e2       	ldi	r30, 0x2A	; 42
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	80 61       	ori	r24, 0x10	; 16
    2cf2:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    2cf4:	aa e2       	ldi	r26, 0x2A	; 42
    2cf6:	b0 e0       	ldi	r27, 0x00	; 0
    2cf8:	ea e2       	ldi	r30, 0x2A	; 42
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	88 60       	ori	r24, 0x08	; 8
    2d00:	8c 93       	st	X, r24

	/*Select 8 bit */
	SET_BIT(Local_u8USCRC,UCSZ0);
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	82 60       	ori	r24, 0x02	; 2
    2d06:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8USCRC,UCSZ1);
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	84 60       	ori	r24, 0x04	; 4
    2d0c:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSZ2);
    2d0e:	aa e2       	ldi	r26, 0x2A	; 42
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	ea e2       	ldi	r30, 0x2A	; 42
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	8b 7f       	andi	r24, 0xFB	; 251
    2d1a:	8c 93       	st	X, r24

	/*Asynchronous Operation*/
	CLR_BIT(Local_u8USCRC,UMSEL);
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	8f 7b       	andi	r24, 0xBF	; 191
    2d20:	89 83       	std	Y+1, r24	; 0x01

	/*Parity Mode Disable*/
	CLR_BIT(Local_u8USCRC,UPM0);
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	8f 7e       	andi	r24, 0xEF	; 239
    2d26:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8USCRC,UPM1);
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	8f 7d       	andi	r24, 0xDF	; 223
    2d2c:	89 83       	std	Y+1, r24	; 0x01

	/*Stop Bit (2)*/
	SET_BIT(Local_u8USCRC,USBS);
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	88 60       	ori	r24, 0x08	; 8
    2d32:	89 83       	std	Y+1, r24	; 0x01

	UCSRC=Local_u8USCRC;
    2d34:	e0 e4       	ldi	r30, 0x40	; 64
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	80 83       	st	Z, r24

}
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <UART_VidSendData>:


void UART_VidSendData(u16 Copy_u16Data)
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	00 d0       	rcall	.+0      	; 0x2d4e <UART_VidSendData+0x6>
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	9a 83       	std	Y+2, r25	; 0x02
    2d54:	89 83       	std	Y+1, r24	; 0x01
	/*Wait to empty shift reg*/
	while(GET_BIT(UCSRA,UDRE)==0);
    2d56:	eb e2       	ldi	r30, 0x2B	; 43
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	82 95       	swap	r24
    2d5e:	86 95       	lsr	r24
    2d60:	87 70       	andi	r24, 0x07	; 7
    2d62:	88 2f       	mov	r24, r24
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	81 70       	andi	r24, 0x01	; 1
    2d68:	90 70       	andi	r25, 0x00	; 0
    2d6a:	00 97       	sbiw	r24, 0x00	; 0
    2d6c:	a1 f3       	breq	.-24     	; 0x2d56 <UART_VidSendData+0xe>

	UDR=(u8)Copy_u16Data;
    2d6e:	ec e2       	ldi	r30, 0x2C	; 44
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	80 83       	st	Z, r24

}
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <UART_VidReciveData>:



u16 UART_VidReciveData(void)
{
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
	/*Wait to*/
	while(GET_BIT(UCSRA,RXC)==0);
    2d88:	eb e2       	ldi	r30, 0x2B	; 43
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	88 23       	and	r24, r24
    2d90:	dc f7       	brge	.-10     	; 0x2d88 <UART_VidReciveData+0x8>

	return UDR;
    2d92:	ec e2       	ldi	r30, 0x2C	; 44
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	88 2f       	mov	r24, r24
    2d9a:	90 e0       	ldi	r25, 0x00	; 0

}
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	08 95       	ret

00002da2 <ULTRASONIC_init>:
#include "LCD.h"
#include "UART.h"
u16 pulse=0 ;
u8  i =0 ;
f32 distance = 0 ;
void ULTRASONIC_init(void){
    2da2:	df 93       	push	r29
    2da4:	cf 93       	push	r28
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
	DDRD  |=  (1<<5) ;
    2daa:	a1 e3       	ldi	r26, 0x31	; 49
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	e1 e3       	ldi	r30, 0x31	; 49
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	80 62       	ori	r24, 0x20	; 32
    2db6:	8c 93       	st	X, r24
	DDRD  &= ~(1<<2) ;
    2db8:	a1 e3       	ldi	r26, 0x31	; 49
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	e1 e3       	ldi	r30, 0x31	; 49
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	8b 7f       	andi	r24, 0xFB	; 251
    2dc4:	8c 93       	st	X, r24
	PORTD|=(1<<5);
    2dc6:	a2 e3       	ldi	r26, 0x32	; 50
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e2 e3       	ldi	r30, 0x32	; 50
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	80 62       	ori	r24, 0x20	; 32
    2dd2:	8c 93       	st	X, r24
	PORTD &=~(1<<0)  ;
    2dd4:	a2 e3       	ldi	r26, 0x32	; 50
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	e2 e3       	ldi	r30, 0x32	; 50
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	8e 7f       	andi	r24, 0xFE	; 254
    2de0:	8c 93       	st	X, r24


}
    2de2:	cf 91       	pop	r28
    2de4:	df 91       	pop	r29
    2de6:	08 95       	ret

00002de8 <ultrasonic_in_action>:
void ultrasonic_in_action(void){
    2de8:	df 93       	push	r29
    2dea:	cf 93       	push	r28
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	aa 97       	sbiw	r28, 0x2a	; 42
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	de bf       	out	0x3e, r29	; 62
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	cd bf       	out	0x3d, r28	; 61

	if(i==1){
    2dfc:	80 91 ca 01 	lds	r24, 0x01CA
    2e00:	81 30       	cpi	r24, 0x01	; 1
    2e02:	09 f0       	breq	.+2      	; 0x2e06 <ultrasonic_in_action+0x1e>
    2e04:	d1 c1       	rjmp	.+930    	; 0x31a8 <ultrasonic_in_action+0x3c0>
		pulse=TCNT1;
    2e06:	ec e4       	ldi	r30, 0x4C	; 76
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	91 81       	ldd	r25, Z+1	; 0x01
    2e0e:	90 93 c9 01 	sts	0x01C9, r25
    2e12:	80 93 c8 01 	sts	0x01C8, r24
		i=0;
    2e16:	10 92 ca 01 	sts	0x01CA, r1
		distance=(pulse/2)*(float)(0.5488);//cm
    2e1a:	80 91 c8 01 	lds	r24, 0x01C8
    2e1e:	90 91 c9 01 	lds	r25, 0x01C9
    2e22:	96 95       	lsr	r25
    2e24:	87 95       	ror	r24
    2e26:	cc 01       	movw	r24, r24
    2e28:	a0 e0       	ldi	r26, 0x00	; 0
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	bc 01       	movw	r22, r24
    2e2e:	cd 01       	movw	r24, r26
    2e30:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	bc 01       	movw	r22, r24
    2e3a:	cd 01       	movw	r24, r26
    2e3c:	28 e2       	ldi	r18, 0x28	; 40
    2e3e:	3e e7       	ldi	r19, 0x7E	; 126
    2e40:	4c e0       	ldi	r20, 0x0C	; 12
    2e42:	5f e3       	ldi	r21, 0x3F	; 63
    2e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	80 93 cb 01 	sts	0x01CB, r24
    2e50:	90 93 cc 01 	sts	0x01CC, r25
    2e54:	a0 93 cd 01 	sts	0x01CD, r26
    2e58:	b0 93 ce 01 	sts	0x01CE, r27
		if(distance< MINIMUM_DISTANCE ){
    2e5c:	80 91 cb 01 	lds	r24, 0x01CB
    2e60:	90 91 cc 01 	lds	r25, 0x01CC
    2e64:	a0 91 cd 01 	lds	r26, 0x01CD
    2e68:	b0 91 ce 01 	lds	r27, 0x01CE
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	48 e4       	ldi	r20, 0x48	; 72
    2e76:	53 e4       	ldi	r21, 0x43	; 67
    2e78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e7c:	88 23       	and	r24, r24
    2e7e:	0c f0       	brlt	.+2      	; 0x2e82 <ultrasonic_in_action+0x9a>
    2e80:	00 c1       	rjmp	.+512    	; 0x3082 <ultrasonic_in_action+0x29a>
			LCD_VidSendString("STEERING..");
    2e82:	80 e6       	ldi	r24, 0x60	; 96
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LCD_VidSendString>
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	aa ef       	ldi	r26, 0xFA	; 250
    2e90:	b3 e4       	ldi	r27, 0x43	; 67
    2e92:	8f a3       	std	Y+39, r24	; 0x27
    2e94:	98 a7       	std	Y+40, r25	; 0x28
    2e96:	a9 a7       	std	Y+41, r26	; 0x29
    2e98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e9a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e9c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e9e:	89 a5       	ldd	r24, Y+41	; 0x29
    2ea0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	4a e7       	ldi	r20, 0x7A	; 122
    2ea8:	55 e4       	ldi	r21, 0x45	; 69
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	8b a3       	std	Y+35, r24	; 0x23
    2eb4:	9c a3       	std	Y+36, r25	; 0x24
    2eb6:	ad a3       	std	Y+37, r26	; 0x25
    2eb8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2eba:	6b a1       	ldd	r22, Y+35	; 0x23
    2ebc:	7c a1       	ldd	r23, Y+36	; 0x24
    2ebe:	8d a1       	ldd	r24, Y+37	; 0x25
    2ec0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e8       	ldi	r20, 0x80	; 128
    2ec8:	5f e3       	ldi	r21, 0x3F	; 63
    2eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ece:	88 23       	and	r24, r24
    2ed0:	2c f4       	brge	.+10     	; 0x2edc <ultrasonic_in_action+0xf4>
		__ticks = 1;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	9a a3       	std	Y+34, r25	; 0x22
    2ed8:	89 a3       	std	Y+33, r24	; 0x21
    2eda:	3f c0       	rjmp	.+126    	; 0x2f5a <ultrasonic_in_action+0x172>
	else if (__tmp > 65535)
    2edc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ede:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ee2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	3f ef       	ldi	r19, 0xFF	; 255
    2ee8:	4f e7       	ldi	r20, 0x7F	; 127
    2eea:	57 e4       	ldi	r21, 0x47	; 71
    2eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef0:	18 16       	cp	r1, r24
    2ef2:	4c f5       	brge	.+82     	; 0x2f46 <ultrasonic_in_action+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ef6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ef8:	89 a5       	ldd	r24, Y+41	; 0x29
    2efa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9a a3       	std	Y+34, r25	; 0x22
    2f1a:	89 a3       	std	Y+33, r24	; 0x21
    2f1c:	0f c0       	rjmp	.+30     	; 0x2f3c <ultrasonic_in_action+0x154>
    2f1e:	80 e9       	ldi	r24, 0x90	; 144
    2f20:	91 e0       	ldi	r25, 0x01	; 1
    2f22:	98 a3       	std	Y+32, r25	; 0x20
    2f24:	8f 8f       	std	Y+31, r24	; 0x1f
    2f26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f28:	98 a1       	ldd	r25, Y+32	; 0x20
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <ultrasonic_in_action+0x142>
    2f2e:	98 a3       	std	Y+32, r25	; 0x20
    2f30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f32:	89 a1       	ldd	r24, Y+33	; 0x21
    2f34:	9a a1       	ldd	r25, Y+34	; 0x22
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	9a a3       	std	Y+34, r25	; 0x22
    2f3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	69 f7       	brne	.-38     	; 0x2f1e <ultrasonic_in_action+0x136>
    2f44:	14 c0       	rjmp	.+40     	; 0x2f6e <ultrasonic_in_action+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f46:	6b a1       	ldd	r22, Y+35	; 0x23
    2f48:	7c a1       	ldd	r23, Y+36	; 0x24
    2f4a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f4c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	9a a3       	std	Y+34, r25	; 0x22
    2f58:	89 a3       	std	Y+33, r24	; 0x21
    2f5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f5e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f60:	8d 8f       	std	Y+29, r24	; 0x1d
    2f62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	f1 f7       	brne	.-4      	; 0x2f66 <ultrasonic_in_action+0x17e>
    2f6a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f6c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			LCD_Clear();
    2f6e:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_Clear>
			UART_VidSendData(1);
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <UART_VidSendData>
			UART_VidSendData(distance);
    2f7a:	80 91 cb 01 	lds	r24, 0x01CB
    2f7e:	90 91 cc 01 	lds	r25, 0x01CC
    2f82:	a0 91 cd 01 	lds	r26, 0x01CD
    2f86:	b0 91 ce 01 	lds	r27, 0x01CE
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	cd 01       	movw	r24, r26
    2f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <UART_VidSendData>
			Obstacle_avoiding() ;
    2f9a:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <Obstacle_avoiding>
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	aa ef       	ldi	r26, 0xFA	; 250
    2fa4:	b3 e4       	ldi	r27, 0x43	; 67
    2fa6:	89 8f       	std	Y+25, r24	; 0x19
    2fa8:	9a 8f       	std	Y+26, r25	; 0x1a
    2faa:	ab 8f       	std	Y+27, r26	; 0x1b
    2fac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fae:	69 8d       	ldd	r22, Y+25	; 0x19
    2fb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	4a e7       	ldi	r20, 0x7A	; 122
    2fbc:	55 e4       	ldi	r21, 0x45	; 69
    2fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	8d 8b       	std	Y+21, r24	; 0x15
    2fc8:	9e 8b       	std	Y+22, r25	; 0x16
    2fca:	af 8b       	std	Y+23, r26	; 0x17
    2fcc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fce:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e8       	ldi	r20, 0x80	; 128
    2fdc:	5f e3       	ldi	r21, 0x3F	; 63
    2fde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fe2:	88 23       	and	r24, r24
    2fe4:	2c f4       	brge	.+10     	; 0x2ff0 <ultrasonic_in_action+0x208>
		__ticks = 1;
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	9c 8b       	std	Y+20, r25	; 0x14
    2fec:	8b 8b       	std	Y+19, r24	; 0x13
    2fee:	3f c0       	rjmp	.+126    	; 0x306e <ultrasonic_in_action+0x286>
	else if (__tmp > 65535)
    2ff0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	3f ef       	ldi	r19, 0xFF	; 255
    2ffc:	4f e7       	ldi	r20, 0x7F	; 127
    2ffe:	57 e4       	ldi	r21, 0x47	; 71
    3000:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3004:	18 16       	cp	r1, r24
    3006:	4c f5       	brge	.+82     	; 0x305a <ultrasonic_in_action+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3008:	69 8d       	ldd	r22, Y+25	; 0x19
    300a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    300c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    300e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	40 e2       	ldi	r20, 0x20	; 32
    3016:	51 e4       	ldi	r21, 0x41	; 65
    3018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	bc 01       	movw	r22, r24
    3022:	cd 01       	movw	r24, r26
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9c 8b       	std	Y+20, r25	; 0x14
    302e:	8b 8b       	std	Y+19, r24	; 0x13
    3030:	0f c0       	rjmp	.+30     	; 0x3050 <ultrasonic_in_action+0x268>
    3032:	80 e9       	ldi	r24, 0x90	; 144
    3034:	91 e0       	ldi	r25, 0x01	; 1
    3036:	9a 8b       	std	Y+18, r25	; 0x12
    3038:	89 8b       	std	Y+17, r24	; 0x11
    303a:	89 89       	ldd	r24, Y+17	; 0x11
    303c:	9a 89       	ldd	r25, Y+18	; 0x12
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	f1 f7       	brne	.-4      	; 0x303e <ultrasonic_in_action+0x256>
    3042:	9a 8b       	std	Y+18, r25	; 0x12
    3044:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3046:	8b 89       	ldd	r24, Y+19	; 0x13
    3048:	9c 89       	ldd	r25, Y+20	; 0x14
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	9c 8b       	std	Y+20, r25	; 0x14
    304e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3050:	8b 89       	ldd	r24, Y+19	; 0x13
    3052:	9c 89       	ldd	r25, Y+20	; 0x14
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	69 f7       	brne	.-38     	; 0x3032 <ultrasonic_in_action+0x24a>
    3058:	14 c0       	rjmp	.+40     	; 0x3082 <ultrasonic_in_action+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305a:	6d 89       	ldd	r22, Y+21	; 0x15
    305c:	7e 89       	ldd	r23, Y+22	; 0x16
    305e:	8f 89       	ldd	r24, Y+23	; 0x17
    3060:	98 8d       	ldd	r25, Y+24	; 0x18
    3062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	9c 8b       	std	Y+20, r25	; 0x14
    306c:	8b 8b       	std	Y+19, r24	; 0x13
    306e:	8b 89       	ldd	r24, Y+19	; 0x13
    3070:	9c 89       	ldd	r25, Y+20	; 0x14
    3072:	98 8b       	std	Y+16, r25	; 0x10
    3074:	8f 87       	std	Y+15, r24	; 0x0f
    3076:	8f 85       	ldd	r24, Y+15	; 0x0f
    3078:	98 89       	ldd	r25, Y+16	; 0x10
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	f1 f7       	brne	.-4      	; 0x307a <ultrasonic_in_action+0x292>
    307e:	98 8b       	std	Y+16, r25	; 0x10
    3080:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);


		}
		LCD_Clear() ;
    3082:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_Clear>
		LCD_VidLocation(LINE_1,2);
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	62 e0       	ldi	r22, 0x02	; 2
    308a:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_VidLocation>
		LCD_VidSendString("Distance is ");
    308e:	8b e6       	ldi	r24, 0x6B	; 107
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LCD_VidSendString>
		LCD_VidLocation(LINE_2,7);
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	67 e0       	ldi	r22, 0x07	; 7
    309a:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_VidLocation>
		LCD_VidSendMultiInt(distance) ;
    309e:	80 91 cb 01 	lds	r24, 0x01CB
    30a2:	90 91 cc 01 	lds	r25, 0x01CC
    30a6:	a0 91 cd 01 	lds	r26, 0x01CD
    30aa:	b0 91 ce 01 	lds	r27, 0x01CE
    30ae:	bc 01       	movw	r22, r24
    30b0:	cd 01       	movw	r24, r26
    30b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_VidSendMultiInt>
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	aa ef       	ldi	r26, 0xFA	; 250
    30c8:	b3 e4       	ldi	r27, 0x43	; 67
    30ca:	8b 87       	std	Y+11, r24	; 0x0b
    30cc:	9c 87       	std	Y+12, r25	; 0x0c
    30ce:	ad 87       	std	Y+13, r26	; 0x0d
    30d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	4a e7       	ldi	r20, 0x7A	; 122
    30e0:	55 e4       	ldi	r21, 0x45	; 69
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	8f 83       	std	Y+7, r24	; 0x07
    30ec:	98 87       	std	Y+8, r25	; 0x08
    30ee:	a9 87       	std	Y+9, r26	; 0x09
    30f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30f2:	6f 81       	ldd	r22, Y+7	; 0x07
    30f4:	78 85       	ldd	r23, Y+8	; 0x08
    30f6:	89 85       	ldd	r24, Y+9	; 0x09
    30f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e8       	ldi	r20, 0x80	; 128
    3100:	5f e3       	ldi	r21, 0x3F	; 63
    3102:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3106:	88 23       	and	r24, r24
    3108:	2c f4       	brge	.+10     	; 0x3114 <ultrasonic_in_action+0x32c>
		__ticks = 1;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	9e 83       	std	Y+6, r25	; 0x06
    3110:	8d 83       	std	Y+5, r24	; 0x05
    3112:	3f c0       	rjmp	.+126    	; 0x3192 <ultrasonic_in_action+0x3aa>
	else if (__tmp > 65535)
    3114:	6f 81       	ldd	r22, Y+7	; 0x07
    3116:	78 85       	ldd	r23, Y+8	; 0x08
    3118:	89 85       	ldd	r24, Y+9	; 0x09
    311a:	9a 85       	ldd	r25, Y+10	; 0x0a
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	3f ef       	ldi	r19, 0xFF	; 255
    3120:	4f e7       	ldi	r20, 0x7F	; 127
    3122:	57 e4       	ldi	r21, 0x47	; 71
    3124:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3128:	18 16       	cp	r1, r24
    312a:	4c f5       	brge	.+82     	; 0x317e <ultrasonic_in_action+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312c:	6b 85       	ldd	r22, Y+11	; 0x0b
    312e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3130:	8d 85       	ldd	r24, Y+13	; 0x0d
    3132:	9e 85       	ldd	r25, Y+14	; 0x0e
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e2       	ldi	r20, 0x20	; 32
    313a:	51 e4       	ldi	r21, 0x41	; 65
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	bc 01       	movw	r22, r24
    3146:	cd 01       	movw	r24, r26
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	9e 83       	std	Y+6, r25	; 0x06
    3152:	8d 83       	std	Y+5, r24	; 0x05
    3154:	0f c0       	rjmp	.+30     	; 0x3174 <ultrasonic_in_action+0x38c>
    3156:	80 e9       	ldi	r24, 0x90	; 144
    3158:	91 e0       	ldi	r25, 0x01	; 1
    315a:	9c 83       	std	Y+4, r25	; 0x04
    315c:	8b 83       	std	Y+3, r24	; 0x03
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	9c 81       	ldd	r25, Y+4	; 0x04
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	f1 f7       	brne	.-4      	; 0x3162 <ultrasonic_in_action+0x37a>
    3166:	9c 83       	std	Y+4, r25	; 0x04
    3168:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316a:	8d 81       	ldd	r24, Y+5	; 0x05
    316c:	9e 81       	ldd	r25, Y+6	; 0x06
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	9e 83       	std	Y+6, r25	; 0x06
    3172:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3174:	8d 81       	ldd	r24, Y+5	; 0x05
    3176:	9e 81       	ldd	r25, Y+6	; 0x06
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	69 f7       	brne	.-38     	; 0x3156 <ultrasonic_in_action+0x36e>
    317c:	22 c0       	rjmp	.+68     	; 0x31c2 <ultrasonic_in_action+0x3da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317e:	6f 81       	ldd	r22, Y+7	; 0x07
    3180:	78 85       	ldd	r23, Y+8	; 0x08
    3182:	89 85       	ldd	r24, Y+9	; 0x09
    3184:	9a 85       	ldd	r25, Y+10	; 0x0a
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	9e 83       	std	Y+6, r25	; 0x06
    3190:	8d 83       	std	Y+5, r24	; 0x05
    3192:	8d 81       	ldd	r24, Y+5	; 0x05
    3194:	9e 81       	ldd	r25, Y+6	; 0x06
    3196:	9a 83       	std	Y+2, r25	; 0x02
    3198:	89 83       	std	Y+1, r24	; 0x01
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	9a 81       	ldd	r25, Y+2	; 0x02
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <ultrasonic_in_action+0x3b6>
    31a2:	9a 83       	std	Y+2, r25	; 0x02
    31a4:	89 83       	std	Y+1, r24	; 0x01
    31a6:	0d c0       	rjmp	.+26     	; 0x31c2 <ultrasonic_in_action+0x3da>
		_delay_ms(500) ;


	}else if(i==0){
    31a8:	80 91 ca 01 	lds	r24, 0x01CA
    31ac:	88 23       	and	r24, r24
    31ae:	49 f4       	brne	.+18     	; 0x31c2 <ultrasonic_in_action+0x3da>
		TCNT1=0 ;
    31b0:	ec e4       	ldi	r30, 0x4C	; 76
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	11 82       	std	Z+1, r1	; 0x01
    31b6:	10 82       	st	Z, r1
		i=1;
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	80 93 ca 01 	sts	0x01CA, r24
		LCD_Clear() ;
    31be:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_Clear>
	}
}
    31c2:	aa 96       	adiw	r28, 0x2a	; 42
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	cf 91       	pop	r28
    31d0:	df 91       	pop	r29
    31d2:	08 95       	ret

000031d4 <Obstacle_avoiding>:


void Obstacle_avoiding(void){
    31d4:	0f 93       	push	r16
    31d6:	1f 93       	push	r17
    31d8:	df 93       	push	r29
    31da:	cf 93       	push	r28
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	c4 55       	subi	r28, 0x54	; 84
    31e2:	d0 40       	sbci	r29, 0x00	; 0
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	cd bf       	out	0x3d, r28	; 61
	Rotate_right();
    31ee:	0e 94 c3 14 	call	0x2986	; 0x2986 <Rotate_right>
    31f2:	fe 01       	movw	r30, r28
    31f4:	ef 5a       	subi	r30, 0xAF	; 175
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	80 e0       	ldi	r24, 0x00	; 0
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	aa ef       	ldi	r26, 0xFA	; 250
    31fe:	b3 e4       	ldi	r27, 0x43	; 67
    3200:	80 83       	st	Z, r24
    3202:	91 83       	std	Z+1, r25	; 0x01
    3204:	a2 83       	std	Z+2, r26	; 0x02
    3206:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3208:	8e 01       	movw	r16, r28
    320a:	03 5b       	subi	r16, 0xB3	; 179
    320c:	1f 4f       	sbci	r17, 0xFF	; 255
    320e:	fe 01       	movw	r30, r28
    3210:	ef 5a       	subi	r30, 0xAF	; 175
    3212:	ff 4f       	sbci	r31, 0xFF	; 255
    3214:	60 81       	ld	r22, Z
    3216:	71 81       	ldd	r23, Z+1	; 0x01
    3218:	82 81       	ldd	r24, Z+2	; 0x02
    321a:	93 81       	ldd	r25, Z+3	; 0x03
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	4a e7       	ldi	r20, 0x7A	; 122
    3222:	55 e4       	ldi	r21, 0x45	; 69
    3224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	f8 01       	movw	r30, r16
    322e:	80 83       	st	Z, r24
    3230:	91 83       	std	Z+1, r25	; 0x01
    3232:	a2 83       	std	Z+2, r26	; 0x02
    3234:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3236:	fe 01       	movw	r30, r28
    3238:	e3 5b       	subi	r30, 0xB3	; 179
    323a:	ff 4f       	sbci	r31, 0xFF	; 255
    323c:	60 81       	ld	r22, Z
    323e:	71 81       	ldd	r23, Z+1	; 0x01
    3240:	82 81       	ldd	r24, Z+2	; 0x02
    3242:	93 81       	ldd	r25, Z+3	; 0x03
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e8       	ldi	r20, 0x80	; 128
    324a:	5f e3       	ldi	r21, 0x3F	; 63
    324c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3250:	88 23       	and	r24, r24
    3252:	44 f4       	brge	.+16     	; 0x3264 <Obstacle_avoiding+0x90>
		__ticks = 1;
    3254:	fe 01       	movw	r30, r28
    3256:	e5 5b       	subi	r30, 0xB5	; 181
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	91 83       	std	Z+1, r25	; 0x01
    3260:	80 83       	st	Z, r24
    3262:	64 c0       	rjmp	.+200    	; 0x332c <Obstacle_avoiding+0x158>
	else if (__tmp > 65535)
    3264:	fe 01       	movw	r30, r28
    3266:	e3 5b       	subi	r30, 0xB3	; 179
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	60 81       	ld	r22, Z
    326c:	71 81       	ldd	r23, Z+1	; 0x01
    326e:	82 81       	ldd	r24, Z+2	; 0x02
    3270:	93 81       	ldd	r25, Z+3	; 0x03
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	3f ef       	ldi	r19, 0xFF	; 255
    3276:	4f e7       	ldi	r20, 0x7F	; 127
    3278:	57 e4       	ldi	r21, 0x47	; 71
    327a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    327e:	18 16       	cp	r1, r24
    3280:	0c f0       	brlt	.+2      	; 0x3284 <Obstacle_avoiding+0xb0>
    3282:	43 c0       	rjmp	.+134    	; 0x330a <Obstacle_avoiding+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3284:	fe 01       	movw	r30, r28
    3286:	ef 5a       	subi	r30, 0xAF	; 175
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	60 81       	ld	r22, Z
    328c:	71 81       	ldd	r23, Z+1	; 0x01
    328e:	82 81       	ldd	r24, Z+2	; 0x02
    3290:	93 81       	ldd	r25, Z+3	; 0x03
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	40 e2       	ldi	r20, 0x20	; 32
    3298:	51 e4       	ldi	r21, 0x41	; 65
    329a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	8e 01       	movw	r16, r28
    32a4:	05 5b       	subi	r16, 0xB5	; 181
    32a6:	1f 4f       	sbci	r17, 0xFF	; 255
    32a8:	bc 01       	movw	r22, r24
    32aa:	cd 01       	movw	r24, r26
    32ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	f8 01       	movw	r30, r16
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	80 83       	st	Z, r24
    32ba:	1f c0       	rjmp	.+62     	; 0x32fa <Obstacle_avoiding+0x126>
    32bc:	fe 01       	movw	r30, r28
    32be:	e7 5b       	subi	r30, 0xB7	; 183
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	80 e9       	ldi	r24, 0x90	; 144
    32c4:	91 e0       	ldi	r25, 0x01	; 1
    32c6:	91 83       	std	Z+1, r25	; 0x01
    32c8:	80 83       	st	Z, r24
    32ca:	fe 01       	movw	r30, r28
    32cc:	e7 5b       	subi	r30, 0xB7	; 183
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	80 81       	ld	r24, Z
    32d2:	91 81       	ldd	r25, Z+1	; 0x01
    32d4:	01 97       	sbiw	r24, 0x01	; 1
    32d6:	f1 f7       	brne	.-4      	; 0x32d4 <Obstacle_avoiding+0x100>
    32d8:	fe 01       	movw	r30, r28
    32da:	e7 5b       	subi	r30, 0xB7	; 183
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	91 83       	std	Z+1, r25	; 0x01
    32e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e2:	de 01       	movw	r26, r28
    32e4:	a5 5b       	subi	r26, 0xB5	; 181
    32e6:	bf 4f       	sbci	r27, 0xFF	; 255
    32e8:	fe 01       	movw	r30, r28
    32ea:	e5 5b       	subi	r30, 0xB5	; 181
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	80 81       	ld	r24, Z
    32f0:	91 81       	ldd	r25, Z+1	; 0x01
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	11 96       	adiw	r26, 0x01	; 1
    32f6:	9c 93       	st	X, r25
    32f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fa:	fe 01       	movw	r30, r28
    32fc:	e5 5b       	subi	r30, 0xB5	; 181
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	80 81       	ld	r24, Z
    3302:	91 81       	ldd	r25, Z+1	; 0x01
    3304:	00 97       	sbiw	r24, 0x00	; 0
    3306:	d1 f6       	brne	.-76     	; 0x32bc <Obstacle_avoiding+0xe8>
    3308:	27 c0       	rjmp	.+78     	; 0x3358 <Obstacle_avoiding+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330a:	8e 01       	movw	r16, r28
    330c:	05 5b       	subi	r16, 0xB5	; 181
    330e:	1f 4f       	sbci	r17, 0xFF	; 255
    3310:	fe 01       	movw	r30, r28
    3312:	e3 5b       	subi	r30, 0xB3	; 179
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	60 81       	ld	r22, Z
    3318:	71 81       	ldd	r23, Z+1	; 0x01
    331a:	82 81       	ldd	r24, Z+2	; 0x02
    331c:	93 81       	ldd	r25, Z+3	; 0x03
    331e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	f8 01       	movw	r30, r16
    3328:	91 83       	std	Z+1, r25	; 0x01
    332a:	80 83       	st	Z, r24
    332c:	de 01       	movw	r26, r28
    332e:	a9 5b       	subi	r26, 0xB9	; 185
    3330:	bf 4f       	sbci	r27, 0xFF	; 255
    3332:	fe 01       	movw	r30, r28
    3334:	e5 5b       	subi	r30, 0xB5	; 181
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	80 81       	ld	r24, Z
    333a:	91 81       	ldd	r25, Z+1	; 0x01
    333c:	8d 93       	st	X+, r24
    333e:	9c 93       	st	X, r25
    3340:	fe 01       	movw	r30, r28
    3342:	e9 5b       	subi	r30, 0xB9	; 185
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	80 81       	ld	r24, Z
    3348:	91 81       	ldd	r25, Z+1	; 0x01
    334a:	01 97       	sbiw	r24, 0x01	; 1
    334c:	f1 f7       	brne	.-4      	; 0x334a <Obstacle_avoiding+0x176>
    334e:	fe 01       	movw	r30, r28
    3350:	e9 5b       	subi	r30, 0xB9	; 185
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	91 83       	std	Z+1, r25	; 0x01
    3356:	80 83       	st	Z, r24
	_delay_ms(500);
	GoStraight();
    3358:	0e 94 09 15 	call	0x2a12	; 0x2a12 <GoStraight>
    335c:	fe 01       	movw	r30, r28
    335e:	ed 5b       	subi	r30, 0xBD	; 189
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	aa ef       	ldi	r26, 0xFA	; 250
    3368:	b3 e4       	ldi	r27, 0x43	; 67
    336a:	80 83       	st	Z, r24
    336c:	91 83       	std	Z+1, r25	; 0x01
    336e:	a2 83       	std	Z+2, r26	; 0x02
    3370:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3372:	8e 01       	movw	r16, r28
    3374:	01 5c       	subi	r16, 0xC1	; 193
    3376:	1f 4f       	sbci	r17, 0xFF	; 255
    3378:	fe 01       	movw	r30, r28
    337a:	ed 5b       	subi	r30, 0xBD	; 189
    337c:	ff 4f       	sbci	r31, 0xFF	; 255
    337e:	60 81       	ld	r22, Z
    3380:	71 81       	ldd	r23, Z+1	; 0x01
    3382:	82 81       	ldd	r24, Z+2	; 0x02
    3384:	93 81       	ldd	r25, Z+3	; 0x03
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	4a e7       	ldi	r20, 0x7A	; 122
    338c:	55 e4       	ldi	r21, 0x45	; 69
    338e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	f8 01       	movw	r30, r16
    3398:	80 83       	st	Z, r24
    339a:	91 83       	std	Z+1, r25	; 0x01
    339c:	a2 83       	std	Z+2, r26	; 0x02
    339e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33a0:	fe 01       	movw	r30, r28
    33a2:	ff 96       	adiw	r30, 0x3f	; 63
    33a4:	60 81       	ld	r22, Z
    33a6:	71 81       	ldd	r23, Z+1	; 0x01
    33a8:	82 81       	ldd	r24, Z+2	; 0x02
    33aa:	93 81       	ldd	r25, Z+3	; 0x03
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	40 e8       	ldi	r20, 0x80	; 128
    33b2:	5f e3       	ldi	r21, 0x3F	; 63
    33b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33b8:	88 23       	and	r24, r24
    33ba:	2c f4       	brge	.+10     	; 0x33c6 <Obstacle_avoiding+0x1f2>
		__ticks = 1;
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	9e af       	std	Y+62, r25	; 0x3e
    33c2:	8d af       	std	Y+61, r24	; 0x3d
    33c4:	46 c0       	rjmp	.+140    	; 0x3452 <Obstacle_avoiding+0x27e>
	else if (__tmp > 65535)
    33c6:	fe 01       	movw	r30, r28
    33c8:	ff 96       	adiw	r30, 0x3f	; 63
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	3f ef       	ldi	r19, 0xFF	; 255
    33d6:	4f e7       	ldi	r20, 0x7F	; 127
    33d8:	57 e4       	ldi	r21, 0x47	; 71
    33da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33de:	18 16       	cp	r1, r24
    33e0:	64 f5       	brge	.+88     	; 0x343a <Obstacle_avoiding+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e2:	fe 01       	movw	r30, r28
    33e4:	ed 5b       	subi	r30, 0xBD	; 189
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	60 81       	ld	r22, Z
    33ea:	71 81       	ldd	r23, Z+1	; 0x01
    33ec:	82 81       	ldd	r24, Z+2	; 0x02
    33ee:	93 81       	ldd	r25, Z+3	; 0x03
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	40 e2       	ldi	r20, 0x20	; 32
    33f6:	51 e4       	ldi	r21, 0x41	; 65
    33f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	bc 01       	movw	r22, r24
    3402:	cd 01       	movw	r24, r26
    3404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	9e af       	std	Y+62, r25	; 0x3e
    340e:	8d af       	std	Y+61, r24	; 0x3d
    3410:	0f c0       	rjmp	.+30     	; 0x3430 <Obstacle_avoiding+0x25c>
    3412:	80 e9       	ldi	r24, 0x90	; 144
    3414:	91 e0       	ldi	r25, 0x01	; 1
    3416:	9c af       	std	Y+60, r25	; 0x3c
    3418:	8b af       	std	Y+59, r24	; 0x3b
    341a:	8b ad       	ldd	r24, Y+59	; 0x3b
    341c:	9c ad       	ldd	r25, Y+60	; 0x3c
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	f1 f7       	brne	.-4      	; 0x341e <Obstacle_avoiding+0x24a>
    3422:	9c af       	std	Y+60, r25	; 0x3c
    3424:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3426:	8d ad       	ldd	r24, Y+61	; 0x3d
    3428:	9e ad       	ldd	r25, Y+62	; 0x3e
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	9e af       	std	Y+62, r25	; 0x3e
    342e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3430:	8d ad       	ldd	r24, Y+61	; 0x3d
    3432:	9e ad       	ldd	r25, Y+62	; 0x3e
    3434:	00 97       	sbiw	r24, 0x00	; 0
    3436:	69 f7       	brne	.-38     	; 0x3412 <Obstacle_avoiding+0x23e>
    3438:	16 c0       	rjmp	.+44     	; 0x3466 <Obstacle_avoiding+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    343a:	fe 01       	movw	r30, r28
    343c:	ff 96       	adiw	r30, 0x3f	; 63
    343e:	60 81       	ld	r22, Z
    3440:	71 81       	ldd	r23, Z+1	; 0x01
    3442:	82 81       	ldd	r24, Z+2	; 0x02
    3444:	93 81       	ldd	r25, Z+3	; 0x03
    3446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	9e af       	std	Y+62, r25	; 0x3e
    3450:	8d af       	std	Y+61, r24	; 0x3d
    3452:	8d ad       	ldd	r24, Y+61	; 0x3d
    3454:	9e ad       	ldd	r25, Y+62	; 0x3e
    3456:	9a af       	std	Y+58, r25	; 0x3a
    3458:	89 af       	std	Y+57, r24	; 0x39
    345a:	89 ad       	ldd	r24, Y+57	; 0x39
    345c:	9a ad       	ldd	r25, Y+58	; 0x3a
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	f1 f7       	brne	.-4      	; 0x345e <Obstacle_avoiding+0x28a>
    3462:	9a af       	std	Y+58, r25	; 0x3a
    3464:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);

	Rotate_left();
    3466:	0e 94 e6 14 	call	0x29cc	; 0x29cc <Rotate_left>
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	aa ef       	ldi	r26, 0xFA	; 250
    3470:	b3 e4       	ldi	r27, 0x43	; 67
    3472:	8d ab       	std	Y+53, r24	; 0x35
    3474:	9e ab       	std	Y+54, r25	; 0x36
    3476:	af ab       	std	Y+55, r26	; 0x37
    3478:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347a:	6d a9       	ldd	r22, Y+53	; 0x35
    347c:	7e a9       	ldd	r23, Y+54	; 0x36
    347e:	8f a9       	ldd	r24, Y+55	; 0x37
    3480:	98 ad       	ldd	r25, Y+56	; 0x38
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	4a e7       	ldi	r20, 0x7A	; 122
    3488:	55 e4       	ldi	r21, 0x45	; 69
    348a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	89 ab       	std	Y+49, r24	; 0x31
    3494:	9a ab       	std	Y+50, r25	; 0x32
    3496:	ab ab       	std	Y+51, r26	; 0x33
    3498:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    349a:	69 a9       	ldd	r22, Y+49	; 0x31
    349c:	7a a9       	ldd	r23, Y+50	; 0x32
    349e:	8b a9       	ldd	r24, Y+51	; 0x33
    34a0:	9c a9       	ldd	r25, Y+52	; 0x34
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	40 e8       	ldi	r20, 0x80	; 128
    34a8:	5f e3       	ldi	r21, 0x3F	; 63
    34aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ae:	88 23       	and	r24, r24
    34b0:	2c f4       	brge	.+10     	; 0x34bc <Obstacle_avoiding+0x2e8>
		__ticks = 1;
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	98 ab       	std	Y+48, r25	; 0x30
    34b8:	8f a7       	std	Y+47, r24	; 0x2f
    34ba:	3f c0       	rjmp	.+126    	; 0x353a <Obstacle_avoiding+0x366>
	else if (__tmp > 65535)
    34bc:	69 a9       	ldd	r22, Y+49	; 0x31
    34be:	7a a9       	ldd	r23, Y+50	; 0x32
    34c0:	8b a9       	ldd	r24, Y+51	; 0x33
    34c2:	9c a9       	ldd	r25, Y+52	; 0x34
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	3f ef       	ldi	r19, 0xFF	; 255
    34c8:	4f e7       	ldi	r20, 0x7F	; 127
    34ca:	57 e4       	ldi	r21, 0x47	; 71
    34cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34d0:	18 16       	cp	r1, r24
    34d2:	4c f5       	brge	.+82     	; 0x3526 <Obstacle_avoiding+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d4:	6d a9       	ldd	r22, Y+53	; 0x35
    34d6:	7e a9       	ldd	r23, Y+54	; 0x36
    34d8:	8f a9       	ldd	r24, Y+55	; 0x37
    34da:	98 ad       	ldd	r25, Y+56	; 0x38
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	40 e2       	ldi	r20, 0x20	; 32
    34e2:	51 e4       	ldi	r21, 0x41	; 65
    34e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	bc 01       	movw	r22, r24
    34ee:	cd 01       	movw	r24, r26
    34f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	98 ab       	std	Y+48, r25	; 0x30
    34fa:	8f a7       	std	Y+47, r24	; 0x2f
    34fc:	0f c0       	rjmp	.+30     	; 0x351c <Obstacle_avoiding+0x348>
    34fe:	80 e9       	ldi	r24, 0x90	; 144
    3500:	91 e0       	ldi	r25, 0x01	; 1
    3502:	9e a7       	std	Y+46, r25	; 0x2e
    3504:	8d a7       	std	Y+45, r24	; 0x2d
    3506:	8d a5       	ldd	r24, Y+45	; 0x2d
    3508:	9e a5       	ldd	r25, Y+46	; 0x2e
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	f1 f7       	brne	.-4      	; 0x350a <Obstacle_avoiding+0x336>
    350e:	9e a7       	std	Y+46, r25	; 0x2e
    3510:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3512:	8f a5       	ldd	r24, Y+47	; 0x2f
    3514:	98 a9       	ldd	r25, Y+48	; 0x30
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	98 ab       	std	Y+48, r25	; 0x30
    351a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    351c:	8f a5       	ldd	r24, Y+47	; 0x2f
    351e:	98 a9       	ldd	r25, Y+48	; 0x30
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	69 f7       	brne	.-38     	; 0x34fe <Obstacle_avoiding+0x32a>
    3524:	14 c0       	rjmp	.+40     	; 0x354e <Obstacle_avoiding+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3526:	69 a9       	ldd	r22, Y+49	; 0x31
    3528:	7a a9       	ldd	r23, Y+50	; 0x32
    352a:	8b a9       	ldd	r24, Y+51	; 0x33
    352c:	9c a9       	ldd	r25, Y+52	; 0x34
    352e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	98 ab       	std	Y+48, r25	; 0x30
    3538:	8f a7       	std	Y+47, r24	; 0x2f
    353a:	8f a5       	ldd	r24, Y+47	; 0x2f
    353c:	98 a9       	ldd	r25, Y+48	; 0x30
    353e:	9c a7       	std	Y+44, r25	; 0x2c
    3540:	8b a7       	std	Y+43, r24	; 0x2b
    3542:	8b a5       	ldd	r24, Y+43	; 0x2b
    3544:	9c a5       	ldd	r25, Y+44	; 0x2c
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	f1 f7       	brne	.-4      	; 0x3546 <Obstacle_avoiding+0x372>
    354a:	9c a7       	std	Y+44, r25	; 0x2c
    354c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);
	GoStraight();
    354e:	0e 94 09 15 	call	0x2a12	; 0x2a12 <GoStraight>
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	aa ef       	ldi	r26, 0xFA	; 250
    3558:	b3 e4       	ldi	r27, 0x43	; 67
    355a:	8f a3       	std	Y+39, r24	; 0x27
    355c:	98 a7       	std	Y+40, r25	; 0x28
    355e:	a9 a7       	std	Y+41, r26	; 0x29
    3560:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3562:	6f a1       	ldd	r22, Y+39	; 0x27
    3564:	78 a5       	ldd	r23, Y+40	; 0x28
    3566:	89 a5       	ldd	r24, Y+41	; 0x29
    3568:	9a a5       	ldd	r25, Y+42	; 0x2a
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	4a e7       	ldi	r20, 0x7A	; 122
    3570:	55 e4       	ldi	r21, 0x45	; 69
    3572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	8b a3       	std	Y+35, r24	; 0x23
    357c:	9c a3       	std	Y+36, r25	; 0x24
    357e:	ad a3       	std	Y+37, r26	; 0x25
    3580:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3582:	6b a1       	ldd	r22, Y+35	; 0x23
    3584:	7c a1       	ldd	r23, Y+36	; 0x24
    3586:	8d a1       	ldd	r24, Y+37	; 0x25
    3588:	9e a1       	ldd	r25, Y+38	; 0x26
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	40 e8       	ldi	r20, 0x80	; 128
    3590:	5f e3       	ldi	r21, 0x3F	; 63
    3592:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3596:	88 23       	and	r24, r24
    3598:	2c f4       	brge	.+10     	; 0x35a4 <Obstacle_avoiding+0x3d0>
		__ticks = 1;
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	9a a3       	std	Y+34, r25	; 0x22
    35a0:	89 a3       	std	Y+33, r24	; 0x21
    35a2:	3f c0       	rjmp	.+126    	; 0x3622 <Obstacle_avoiding+0x44e>
	else if (__tmp > 65535)
    35a4:	6b a1       	ldd	r22, Y+35	; 0x23
    35a6:	7c a1       	ldd	r23, Y+36	; 0x24
    35a8:	8d a1       	ldd	r24, Y+37	; 0x25
    35aa:	9e a1       	ldd	r25, Y+38	; 0x26
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	3f ef       	ldi	r19, 0xFF	; 255
    35b0:	4f e7       	ldi	r20, 0x7F	; 127
    35b2:	57 e4       	ldi	r21, 0x47	; 71
    35b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35b8:	18 16       	cp	r1, r24
    35ba:	4c f5       	brge	.+82     	; 0x360e <Obstacle_avoiding+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35bc:	6f a1       	ldd	r22, Y+39	; 0x27
    35be:	78 a5       	ldd	r23, Y+40	; 0x28
    35c0:	89 a5       	ldd	r24, Y+41	; 0x29
    35c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e2       	ldi	r20, 0x20	; 32
    35ca:	51 e4       	ldi	r21, 0x41	; 65
    35cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	bc 01       	movw	r22, r24
    35d6:	cd 01       	movw	r24, r26
    35d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	9a a3       	std	Y+34, r25	; 0x22
    35e2:	89 a3       	std	Y+33, r24	; 0x21
    35e4:	0f c0       	rjmp	.+30     	; 0x3604 <Obstacle_avoiding+0x430>
    35e6:	80 e9       	ldi	r24, 0x90	; 144
    35e8:	91 e0       	ldi	r25, 0x01	; 1
    35ea:	98 a3       	std	Y+32, r25	; 0x20
    35ec:	8f 8f       	std	Y+31, r24	; 0x1f
    35ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35f0:	98 a1       	ldd	r25, Y+32	; 0x20
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	f1 f7       	brne	.-4      	; 0x35f2 <Obstacle_avoiding+0x41e>
    35f6:	98 a3       	std	Y+32, r25	; 0x20
    35f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35fa:	89 a1       	ldd	r24, Y+33	; 0x21
    35fc:	9a a1       	ldd	r25, Y+34	; 0x22
    35fe:	01 97       	sbiw	r24, 0x01	; 1
    3600:	9a a3       	std	Y+34, r25	; 0x22
    3602:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3604:	89 a1       	ldd	r24, Y+33	; 0x21
    3606:	9a a1       	ldd	r25, Y+34	; 0x22
    3608:	00 97       	sbiw	r24, 0x00	; 0
    360a:	69 f7       	brne	.-38     	; 0x35e6 <Obstacle_avoiding+0x412>
    360c:	14 c0       	rjmp	.+40     	; 0x3636 <Obstacle_avoiding+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    360e:	6b a1       	ldd	r22, Y+35	; 0x23
    3610:	7c a1       	ldd	r23, Y+36	; 0x24
    3612:	8d a1       	ldd	r24, Y+37	; 0x25
    3614:	9e a1       	ldd	r25, Y+38	; 0x26
    3616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	9a a3       	std	Y+34, r25	; 0x22
    3620:	89 a3       	std	Y+33, r24	; 0x21
    3622:	89 a1       	ldd	r24, Y+33	; 0x21
    3624:	9a a1       	ldd	r25, Y+34	; 0x22
    3626:	9e 8f       	std	Y+30, r25	; 0x1e
    3628:	8d 8f       	std	Y+29, r24	; 0x1d
    362a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    362c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    362e:	01 97       	sbiw	r24, 0x01	; 1
    3630:	f1 f7       	brne	.-4      	; 0x362e <Obstacle_avoiding+0x45a>
    3632:	9e 8f       	std	Y+30, r25	; 0x1e
    3634:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);

	Rotate_left();
    3636:	0e 94 e6 14 	call	0x29cc	; 0x29cc <Rotate_left>
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	aa ef       	ldi	r26, 0xFA	; 250
    3640:	b3 e4       	ldi	r27, 0x43	; 67
    3642:	89 8f       	std	Y+25, r24	; 0x19
    3644:	9a 8f       	std	Y+26, r25	; 0x1a
    3646:	ab 8f       	std	Y+27, r26	; 0x1b
    3648:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    364a:	69 8d       	ldd	r22, Y+25	; 0x19
    364c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    364e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3650:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	4a e7       	ldi	r20, 0x7A	; 122
    3658:	55 e4       	ldi	r21, 0x45	; 69
    365a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	8d 8b       	std	Y+21, r24	; 0x15
    3664:	9e 8b       	std	Y+22, r25	; 0x16
    3666:	af 8b       	std	Y+23, r26	; 0x17
    3668:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    366a:	6d 89       	ldd	r22, Y+21	; 0x15
    366c:	7e 89       	ldd	r23, Y+22	; 0x16
    366e:	8f 89       	ldd	r24, Y+23	; 0x17
    3670:	98 8d       	ldd	r25, Y+24	; 0x18
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	40 e8       	ldi	r20, 0x80	; 128
    3678:	5f e3       	ldi	r21, 0x3F	; 63
    367a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    367e:	88 23       	and	r24, r24
    3680:	2c f4       	brge	.+10     	; 0x368c <Obstacle_avoiding+0x4b8>
		__ticks = 1;
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	9c 8b       	std	Y+20, r25	; 0x14
    3688:	8b 8b       	std	Y+19, r24	; 0x13
    368a:	3f c0       	rjmp	.+126    	; 0x370a <Obstacle_avoiding+0x536>
	else if (__tmp > 65535)
    368c:	6d 89       	ldd	r22, Y+21	; 0x15
    368e:	7e 89       	ldd	r23, Y+22	; 0x16
    3690:	8f 89       	ldd	r24, Y+23	; 0x17
    3692:	98 8d       	ldd	r25, Y+24	; 0x18
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	3f ef       	ldi	r19, 0xFF	; 255
    3698:	4f e7       	ldi	r20, 0x7F	; 127
    369a:	57 e4       	ldi	r21, 0x47	; 71
    369c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36a0:	18 16       	cp	r1, r24
    36a2:	4c f5       	brge	.+82     	; 0x36f6 <Obstacle_avoiding+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a4:	69 8d       	ldd	r22, Y+25	; 0x19
    36a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	40 e2       	ldi	r20, 0x20	; 32
    36b2:	51 e4       	ldi	r21, 0x41	; 65
    36b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	bc 01       	movw	r22, r24
    36be:	cd 01       	movw	r24, r26
    36c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	9c 8b       	std	Y+20, r25	; 0x14
    36ca:	8b 8b       	std	Y+19, r24	; 0x13
    36cc:	0f c0       	rjmp	.+30     	; 0x36ec <Obstacle_avoiding+0x518>
    36ce:	80 e9       	ldi	r24, 0x90	; 144
    36d0:	91 e0       	ldi	r25, 0x01	; 1
    36d2:	9a 8b       	std	Y+18, r25	; 0x12
    36d4:	89 8b       	std	Y+17, r24	; 0x11
    36d6:	89 89       	ldd	r24, Y+17	; 0x11
    36d8:	9a 89       	ldd	r25, Y+18	; 0x12
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <Obstacle_avoiding+0x506>
    36de:	9a 8b       	std	Y+18, r25	; 0x12
    36e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e2:	8b 89       	ldd	r24, Y+19	; 0x13
    36e4:	9c 89       	ldd	r25, Y+20	; 0x14
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	9c 8b       	std	Y+20, r25	; 0x14
    36ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ec:	8b 89       	ldd	r24, Y+19	; 0x13
    36ee:	9c 89       	ldd	r25, Y+20	; 0x14
    36f0:	00 97       	sbiw	r24, 0x00	; 0
    36f2:	69 f7       	brne	.-38     	; 0x36ce <Obstacle_avoiding+0x4fa>
    36f4:	14 c0       	rjmp	.+40     	; 0x371e <Obstacle_avoiding+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f6:	6d 89       	ldd	r22, Y+21	; 0x15
    36f8:	7e 89       	ldd	r23, Y+22	; 0x16
    36fa:	8f 89       	ldd	r24, Y+23	; 0x17
    36fc:	98 8d       	ldd	r25, Y+24	; 0x18
    36fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	9c 8b       	std	Y+20, r25	; 0x14
    3708:	8b 8b       	std	Y+19, r24	; 0x13
    370a:	8b 89       	ldd	r24, Y+19	; 0x13
    370c:	9c 89       	ldd	r25, Y+20	; 0x14
    370e:	98 8b       	std	Y+16, r25	; 0x10
    3710:	8f 87       	std	Y+15, r24	; 0x0f
    3712:	8f 85       	ldd	r24, Y+15	; 0x0f
    3714:	98 89       	ldd	r25, Y+16	; 0x10
    3716:	01 97       	sbiw	r24, 0x01	; 1
    3718:	f1 f7       	brne	.-4      	; 0x3716 <Obstacle_avoiding+0x542>
    371a:	98 8b       	std	Y+16, r25	; 0x10
    371c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	GoStraight();
    371e:	0e 94 09 15 	call	0x2a12	; 0x2a12 <GoStraight>
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	aa ef       	ldi	r26, 0xFA	; 250
    3728:	b3 e4       	ldi	r27, 0x43	; 67
    372a:	8b 87       	std	Y+11, r24	; 0x0b
    372c:	9c 87       	std	Y+12, r25	; 0x0c
    372e:	ad 87       	std	Y+13, r26	; 0x0d
    3730:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3732:	6b 85       	ldd	r22, Y+11	; 0x0b
    3734:	7c 85       	ldd	r23, Y+12	; 0x0c
    3736:	8d 85       	ldd	r24, Y+13	; 0x0d
    3738:	9e 85       	ldd	r25, Y+14	; 0x0e
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	4a e7       	ldi	r20, 0x7A	; 122
    3740:	55 e4       	ldi	r21, 0x45	; 69
    3742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	8f 83       	std	Y+7, r24	; 0x07
    374c:	98 87       	std	Y+8, r25	; 0x08
    374e:	a9 87       	std	Y+9, r26	; 0x09
    3750:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3752:	6f 81       	ldd	r22, Y+7	; 0x07
    3754:	78 85       	ldd	r23, Y+8	; 0x08
    3756:	89 85       	ldd	r24, Y+9	; 0x09
    3758:	9a 85       	ldd	r25, Y+10	; 0x0a
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e8       	ldi	r20, 0x80	; 128
    3760:	5f e3       	ldi	r21, 0x3F	; 63
    3762:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3766:	88 23       	and	r24, r24
    3768:	2c f4       	brge	.+10     	; 0x3774 <Obstacle_avoiding+0x5a0>
		__ticks = 1;
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	9e 83       	std	Y+6, r25	; 0x06
    3770:	8d 83       	std	Y+5, r24	; 0x05
    3772:	3f c0       	rjmp	.+126    	; 0x37f2 <Obstacle_avoiding+0x61e>
	else if (__tmp > 65535)
    3774:	6f 81       	ldd	r22, Y+7	; 0x07
    3776:	78 85       	ldd	r23, Y+8	; 0x08
    3778:	89 85       	ldd	r24, Y+9	; 0x09
    377a:	9a 85       	ldd	r25, Y+10	; 0x0a
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	3f ef       	ldi	r19, 0xFF	; 255
    3780:	4f e7       	ldi	r20, 0x7F	; 127
    3782:	57 e4       	ldi	r21, 0x47	; 71
    3784:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3788:	18 16       	cp	r1, r24
    378a:	4c f5       	brge	.+82     	; 0x37de <Obstacle_avoiding+0x60a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    378c:	6b 85       	ldd	r22, Y+11	; 0x0b
    378e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3790:	8d 85       	ldd	r24, Y+13	; 0x0d
    3792:	9e 85       	ldd	r25, Y+14	; 0x0e
    3794:	20 e0       	ldi	r18, 0x00	; 0
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	40 e2       	ldi	r20, 0x20	; 32
    379a:	51 e4       	ldi	r21, 0x41	; 65
    379c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	bc 01       	movw	r22, r24
    37a6:	cd 01       	movw	r24, r26
    37a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	9e 83       	std	Y+6, r25	; 0x06
    37b2:	8d 83       	std	Y+5, r24	; 0x05
    37b4:	0f c0       	rjmp	.+30     	; 0x37d4 <Obstacle_avoiding+0x600>
    37b6:	80 e9       	ldi	r24, 0x90	; 144
    37b8:	91 e0       	ldi	r25, 0x01	; 1
    37ba:	9c 83       	std	Y+4, r25	; 0x04
    37bc:	8b 83       	std	Y+3, r24	; 0x03
    37be:	8b 81       	ldd	r24, Y+3	; 0x03
    37c0:	9c 81       	ldd	r25, Y+4	; 0x04
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	f1 f7       	brne	.-4      	; 0x37c2 <Obstacle_avoiding+0x5ee>
    37c6:	9c 83       	std	Y+4, r25	; 0x04
    37c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ca:	8d 81       	ldd	r24, Y+5	; 0x05
    37cc:	9e 81       	ldd	r25, Y+6	; 0x06
    37ce:	01 97       	sbiw	r24, 0x01	; 1
    37d0:	9e 83       	std	Y+6, r25	; 0x06
    37d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d4:	8d 81       	ldd	r24, Y+5	; 0x05
    37d6:	9e 81       	ldd	r25, Y+6	; 0x06
    37d8:	00 97       	sbiw	r24, 0x00	; 0
    37da:	69 f7       	brne	.-38     	; 0x37b6 <Obstacle_avoiding+0x5e2>
    37dc:	14 c0       	rjmp	.+40     	; 0x3806 <Obstacle_avoiding+0x632>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37de:	6f 81       	ldd	r22, Y+7	; 0x07
    37e0:	78 85       	ldd	r23, Y+8	; 0x08
    37e2:	89 85       	ldd	r24, Y+9	; 0x09
    37e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	9e 83       	std	Y+6, r25	; 0x06
    37f0:	8d 83       	std	Y+5, r24	; 0x05
    37f2:	8d 81       	ldd	r24, Y+5	; 0x05
    37f4:	9e 81       	ldd	r25, Y+6	; 0x06
    37f6:	9a 83       	std	Y+2, r25	; 0x02
    37f8:	89 83       	std	Y+1, r24	; 0x01
    37fa:	89 81       	ldd	r24, Y+1	; 0x01
    37fc:	9a 81       	ldd	r25, Y+2	; 0x02
    37fe:	01 97       	sbiw	r24, 0x01	; 1
    3800:	f1 f7       	brne	.-4      	; 0x37fe <Obstacle_avoiding+0x62a>
    3802:	9a 83       	std	Y+2, r25	; 0x02
    3804:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

	Rotate_right();
    3806:	0e 94 c3 14 	call	0x2986	; 0x2986 <Rotate_right>
	GoStraight();
    380a:	0e 94 09 15 	call	0x2a12	; 0x2a12 <GoStraight>
}
    380e:	cc 5a       	subi	r28, 0xAC	; 172
    3810:	df 4f       	sbci	r29, 0xFF	; 255
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	f8 94       	cli
    3816:	de bf       	out	0x3e, r29	; 62
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	cd bf       	out	0x3d, r28	; 61
    381c:	cf 91       	pop	r28
    381e:	df 91       	pop	r29
    3820:	1f 91       	pop	r17
    3822:	0f 91       	pop	r16
    3824:	08 95       	ret

00003826 <EXTI_VidInit>:

#include "EXTERNAL_INT.h"

void (*EXTI_PTemp[3])(void)={NULL,NULL,NULL};
void EXTI_VidInit(void)
{
    3826:	df 93       	push	r29
    3828:	cf 93       	push	r28
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62

#if EXTI_MODE==LOW_LEVEL
	CLR_BIT(MCUCR,ISC00);
	CLR_BIT(MCUCR,ISC01);
#elif EXTI_MODE==ANY_LOGICAL_CHANGE
	SET_BIT(MCUCR,ISC00);
    382e:	a5 e5       	ldi	r26, 0x55	; 85
    3830:	b0 e0       	ldi	r27, 0x00	; 0
    3832:	e5 e5       	ldi	r30, 0x55	; 85
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	80 81       	ld	r24, Z
    3838:	81 60       	ori	r24, 0x01	; 1
    383a:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC01);
    383c:	a5 e5       	ldi	r26, 0x55	; 85
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	e5 e5       	ldi	r30, 0x55	; 85
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	80 81       	ld	r24, Z
    3846:	8d 7f       	andi	r24, 0xFD	; 253
    3848:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC01);
#elif EXTI_MODE==RISING_EDGE
	SET_BIT(MCUCR,ISC00);
	SET_BIT(MCUCR,ISC01);
#endif
	SET_BIT(GICR,INT_0);
    384a:	ab e5       	ldi	r26, 0x5B	; 91
    384c:	b0 e0       	ldi	r27, 0x00	; 0
    384e:	eb e5       	ldi	r30, 0x5B	; 91
    3850:	f0 e0       	ldi	r31, 0x00	; 0
    3852:	80 81       	ld	r24, Z
    3854:	81 60       	ori	r24, 0x01	; 1
    3856:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,ISC2);
#endif
	SET_BIT(GICR,INT_2);
#endif

}
    3858:	cf 91       	pop	r28
    385a:	df 91       	pop	r29
    385c:	08 95       	ret

0000385e <EXTI_VidGIE>:


void EXTI_VidGIE (void)
{
    385e:	df 93       	push	r29
    3860:	cf 93       	push	r28
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
#if GIE == ENABLE
	SET_BIT(SREG,I_BIT);
    3866:	af e5       	ldi	r26, 0x5F	; 95
    3868:	b0 e0       	ldi	r27, 0x00	; 0
    386a:	ef e5       	ldi	r30, 0x5F	; 95
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	80 81       	ld	r24, Z
    3870:	80 68       	ori	r24, 0x80	; 128
    3872:	8c 93       	st	X, r24
#elif GIE==DISABLE
	CLR_BIT(SREG,I_BIT);
#endif
}
    3874:	cf 91       	pop	r28
    3876:	df 91       	pop	r29
    3878:	08 95       	ret

0000387a <EXTI_VidSetCallBack>:


void EXTI_VidSetCallBack(u8 Copy_U8Index,void (*Copy_PFPtr)(void)){
    387a:	df 93       	push	r29
    387c:	cf 93       	push	r28
    387e:	00 d0       	rcall	.+0      	; 0x3880 <EXTI_VidSetCallBack+0x6>
    3880:	0f 92       	push	r0
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    3886:	89 83       	std	Y+1, r24	; 0x01
    3888:	7b 83       	std	Y+3, r23	; 0x03
    388a:	6a 83       	std	Y+2, r22	; 0x02
	EXTI_PTemp[Copy_U8Index]=Copy_PFPtr;
    388c:	89 81       	ldd	r24, Y+1	; 0x01
    388e:	88 2f       	mov	r24, r24
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	88 0f       	add	r24, r24
    3894:	99 1f       	adc	r25, r25
    3896:	fc 01       	movw	r30, r24
    3898:	e1 53       	subi	r30, 0x31	; 49
    389a:	fe 4f       	sbci	r31, 0xFE	; 254
    389c:	8a 81       	ldd	r24, Y+2	; 0x02
    389e:	9b 81       	ldd	r25, Y+3	; 0x03
    38a0:	91 83       	std	Z+1, r25	; 0x01
    38a2:	80 83       	st	Z, r24
}
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	cf 91       	pop	r28
    38ac:	df 91       	pop	r29
    38ae:	08 95       	ret

000038b0 <__vector_1>:



ISR(INT0_vect){
    38b0:	1f 92       	push	r1
    38b2:	0f 92       	push	r0
    38b4:	0f b6       	in	r0, 0x3f	; 63
    38b6:	0f 92       	push	r0
    38b8:	11 24       	eor	r1, r1
    38ba:	2f 93       	push	r18
    38bc:	3f 93       	push	r19
    38be:	4f 93       	push	r20
    38c0:	5f 93       	push	r21
    38c2:	6f 93       	push	r22
    38c4:	7f 93       	push	r23
    38c6:	8f 93       	push	r24
    38c8:	9f 93       	push	r25
    38ca:	af 93       	push	r26
    38cc:	bf 93       	push	r27
    38ce:	ef 93       	push	r30
    38d0:	ff 93       	push	r31
    38d2:	df 93       	push	r29
    38d4:	cf 93       	push	r28
    38d6:	cd b7       	in	r28, 0x3d	; 61
    38d8:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PTemp[0]!=NULL)
    38da:	80 91 cf 01 	lds	r24, 0x01CF
    38de:	90 91 d0 01 	lds	r25, 0x01D0
    38e2:	00 97       	sbiw	r24, 0x00	; 0
    38e4:	29 f0       	breq	.+10     	; 0x38f0 <__vector_1+0x40>
	EXTI_PTemp[0]();
    38e6:	e0 91 cf 01 	lds	r30, 0x01CF
    38ea:	f0 91 d0 01 	lds	r31, 0x01D0
    38ee:	09 95       	icall
}
    38f0:	cf 91       	pop	r28
    38f2:	df 91       	pop	r29
    38f4:	ff 91       	pop	r31
    38f6:	ef 91       	pop	r30
    38f8:	bf 91       	pop	r27
    38fa:	af 91       	pop	r26
    38fc:	9f 91       	pop	r25
    38fe:	8f 91       	pop	r24
    3900:	7f 91       	pop	r23
    3902:	6f 91       	pop	r22
    3904:	5f 91       	pop	r21
    3906:	4f 91       	pop	r20
    3908:	3f 91       	pop	r19
    390a:	2f 91       	pop	r18
    390c:	0f 90       	pop	r0
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	0f 90       	pop	r0
    3912:	1f 90       	pop	r1
    3914:	18 95       	reti

00003916 <__vector_2>:

ISR(INT1_vect){
    3916:	1f 92       	push	r1
    3918:	0f 92       	push	r0
    391a:	0f b6       	in	r0, 0x3f	; 63
    391c:	0f 92       	push	r0
    391e:	11 24       	eor	r1, r1
    3920:	2f 93       	push	r18
    3922:	3f 93       	push	r19
    3924:	4f 93       	push	r20
    3926:	5f 93       	push	r21
    3928:	6f 93       	push	r22
    392a:	7f 93       	push	r23
    392c:	8f 93       	push	r24
    392e:	9f 93       	push	r25
    3930:	af 93       	push	r26
    3932:	bf 93       	push	r27
    3934:	ef 93       	push	r30
    3936:	ff 93       	push	r31
    3938:	df 93       	push	r29
    393a:	cf 93       	push	r28
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PTemp[1]!=NULL)
    3940:	80 91 d1 01 	lds	r24, 0x01D1
    3944:	90 91 d2 01 	lds	r25, 0x01D2
    3948:	00 97       	sbiw	r24, 0x00	; 0
    394a:	29 f0       	breq	.+10     	; 0x3956 <__vector_2+0x40>
	EXTI_PTemp[1]();
    394c:	e0 91 d1 01 	lds	r30, 0x01D1
    3950:	f0 91 d2 01 	lds	r31, 0x01D2
    3954:	09 95       	icall
}
    3956:	cf 91       	pop	r28
    3958:	df 91       	pop	r29
    395a:	ff 91       	pop	r31
    395c:	ef 91       	pop	r30
    395e:	bf 91       	pop	r27
    3960:	af 91       	pop	r26
    3962:	9f 91       	pop	r25
    3964:	8f 91       	pop	r24
    3966:	7f 91       	pop	r23
    3968:	6f 91       	pop	r22
    396a:	5f 91       	pop	r21
    396c:	4f 91       	pop	r20
    396e:	3f 91       	pop	r19
    3970:	2f 91       	pop	r18
    3972:	0f 90       	pop	r0
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	0f 90       	pop	r0
    3978:	1f 90       	pop	r1
    397a:	18 95       	reti

0000397c <__vector_3>:

ISR(INT2_vect){
    397c:	1f 92       	push	r1
    397e:	0f 92       	push	r0
    3980:	0f b6       	in	r0, 0x3f	; 63
    3982:	0f 92       	push	r0
    3984:	11 24       	eor	r1, r1
    3986:	2f 93       	push	r18
    3988:	3f 93       	push	r19
    398a:	4f 93       	push	r20
    398c:	5f 93       	push	r21
    398e:	6f 93       	push	r22
    3990:	7f 93       	push	r23
    3992:	8f 93       	push	r24
    3994:	9f 93       	push	r25
    3996:	af 93       	push	r26
    3998:	bf 93       	push	r27
    399a:	ef 93       	push	r30
    399c:	ff 93       	push	r31
    399e:	df 93       	push	r29
    39a0:	cf 93       	push	r28
    39a2:	cd b7       	in	r28, 0x3d	; 61
    39a4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_PTemp[2]!=NULL)
    39a6:	80 91 d3 01 	lds	r24, 0x01D3
    39aa:	90 91 d4 01 	lds	r25, 0x01D4
    39ae:	00 97       	sbiw	r24, 0x00	; 0
    39b0:	29 f0       	breq	.+10     	; 0x39bc <__vector_3+0x40>
	EXTI_PTemp[2]();
    39b2:	e0 91 d3 01 	lds	r30, 0x01D3
    39b6:	f0 91 d4 01 	lds	r31, 0x01D4
    39ba:	09 95       	icall
}
    39bc:	cf 91       	pop	r28
    39be:	df 91       	pop	r29
    39c0:	ff 91       	pop	r31
    39c2:	ef 91       	pop	r30
    39c4:	bf 91       	pop	r27
    39c6:	af 91       	pop	r26
    39c8:	9f 91       	pop	r25
    39ca:	8f 91       	pop	r24
    39cc:	7f 91       	pop	r23
    39ce:	6f 91       	pop	r22
    39d0:	5f 91       	pop	r21
    39d2:	4f 91       	pop	r20
    39d4:	3f 91       	pop	r19
    39d6:	2f 91       	pop	r18
    39d8:	0f 90       	pop	r0
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	0f 90       	pop	r0
    39de:	1f 90       	pop	r1
    39e0:	18 95       	reti

000039e2 <IRArrayOf5_Init>:
#include "STD_TYPES.h"
#include <avr/io.h>
#include "DIO_Interface.h"
#include "ir.h"

void IRArrayOf5_Init(void){
    39e2:	df 93       	push	r29
    39e4:	cf 93       	push	r28
    39e6:	cd b7       	in	r28, 0x3d	; 61
    39e8:	de b7       	in	r29, 0x3e	; 62
	DDRD &=~(0b00011000) ;
    39ea:	a1 e3       	ldi	r26, 0x31	; 49
    39ec:	b0 e0       	ldi	r27, 0x00	; 0
    39ee:	e1 e3       	ldi	r30, 0x31	; 49
    39f0:	f0 e0       	ldi	r31, 0x00	; 0
    39f2:	80 81       	ld	r24, Z
    39f4:	87 7e       	andi	r24, 0xE7	; 231
    39f6:	8c 93       	st	X, r24
}
    39f8:	cf 91       	pop	r28
    39fa:	df 91       	pop	r29
    39fc:	08 95       	ret

000039fe <getIR>:
u8 getIR (u8 snum){
    39fe:	df 93       	push	r29
    3a00:	cf 93       	push	r28
    3a02:	00 d0       	rcall	.+0      	; 0x3a04 <getIR+0x6>
    3a04:	00 d0       	rcall	.+0      	; 0x3a06 <getIR+0x8>
    3a06:	cd b7       	in	r28, 0x3d	; 61
    3a08:	de b7       	in	r29, 0x3e	; 62
    3a0a:	89 83       	std	Y+1, r24	; 0x01
	switch(snum){
    3a0c:	89 81       	ldd	r24, Y+1	; 0x01
    3a0e:	28 2f       	mov	r18, r24
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	3c 83       	std	Y+4, r19	; 0x04
    3a14:	2b 83       	std	Y+3, r18	; 0x03
    3a16:	8b 81       	ldd	r24, Y+3	; 0x03
    3a18:	9c 81       	ldd	r25, Y+4	; 0x04
    3a1a:	81 30       	cpi	r24, 0x01	; 1
    3a1c:	91 05       	cpc	r25, r1
    3a1e:	31 f0       	breq	.+12     	; 0x3a2c <getIR+0x2e>
    3a20:	2b 81       	ldd	r18, Y+3	; 0x03
    3a22:	3c 81       	ldd	r19, Y+4	; 0x04
    3a24:	22 30       	cpi	r18, 0x02	; 2
    3a26:	31 05       	cpc	r19, r1
    3a28:	59 f0       	breq	.+22     	; 0x3a40 <getIR+0x42>
    3a2a:	13 c0       	rjmp	.+38     	; 0x3a52 <getIR+0x54>
	case 1:return GET_BIT(PIND,3);break ;
    3a2c:	e0 e3       	ldi	r30, 0x30	; 48
    3a2e:	f0 e0       	ldi	r31, 0x00	; 0
    3a30:	80 81       	ld	r24, Z
    3a32:	86 95       	lsr	r24
    3a34:	86 95       	lsr	r24
    3a36:	86 95       	lsr	r24
    3a38:	38 2f       	mov	r19, r24
    3a3a:	31 70       	andi	r19, 0x01	; 1
    3a3c:	3a 83       	std	Y+2, r19	; 0x02
    3a3e:	0a c0       	rjmp	.+20     	; 0x3a54 <getIR+0x56>
	case 2:return GET_BIT(PIND,4);break ;
    3a40:	e0 e3       	ldi	r30, 0x30	; 48
    3a42:	f0 e0       	ldi	r31, 0x00	; 0
    3a44:	80 81       	ld	r24, Z
    3a46:	82 95       	swap	r24
    3a48:	8f 70       	andi	r24, 0x0F	; 15
    3a4a:	98 2f       	mov	r25, r24
    3a4c:	91 70       	andi	r25, 0x01	; 1
    3a4e:	9a 83       	std	Y+2, r25	; 0x02
    3a50:	01 c0       	rjmp	.+2      	; 0x3a54 <getIR+0x56>

	}
	return 0 ;
    3a52:	1a 82       	std	Y+2, r1	; 0x02
    3a54:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	cf 91       	pop	r28
    3a60:	df 91       	pop	r29
    3a62:	08 95       	ret

00003a64 <INT0_Init>:
#include "KPD.h"
#include "LCD.h"
#include "UART.h"

void INT0_Init(void)
{
    3a64:	df 93       	push	r29
    3a66:	cf 93       	push	r28
    3a68:	cd b7       	in	r28, 0x3d	; 61
    3a6a:	de b7       	in	r29, 0x3e	; 62
	DDRD  &= (~(1<<PD2));               // Configure INT0/PD2 as input pin
    3a6c:	a1 e3       	ldi	r26, 0x31	; 49
    3a6e:	b0 e0       	ldi	r27, 0x00	; 0
    3a70:	e1 e3       	ldi	r30, 0x31	; 49
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	80 81       	ld	r24, Z
    3a76:	8b 7f       	andi	r24, 0xFB	; 251
    3a78:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC00);
    3a7a:	a5 e5       	ldi	r26, 0x55	; 85
    3a7c:	b0 e0       	ldi	r27, 0x00	; 0
    3a7e:	e5 e5       	ldi	r30, 0x55	; 85
    3a80:	f0 e0       	ldi	r31, 0x00	; 0
    3a82:	80 81       	ld	r24, Z
    3a84:	81 60       	ori	r24, 0x01	; 1
    3a86:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC01);
    3a88:	a5 e5       	ldi	r26, 0x55	; 85
    3a8a:	b0 e0       	ldi	r27, 0x00	; 0
    3a8c:	e5 e5       	ldi	r30, 0x55	; 85
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	80 81       	ld	r24, Z
    3a92:	8d 7f       	andi	r24, 0xFD	; 253
    3a94:	8c 93       	st	X, r24
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
    3a96:	ab e5       	ldi	r26, 0x5B	; 91
    3a98:	b0 e0       	ldi	r27, 0x00	; 0
    3a9a:	eb e5       	ldi	r30, 0x5B	; 91
    3a9c:	f0 e0       	ldi	r31, 0x00	; 0
    3a9e:	80 81       	ld	r24, Z
    3aa0:	80 64       	ori	r24, 0x40	; 64
    3aa2:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    3aa4:	af e5       	ldi	r26, 0x5F	; 95
    3aa6:	b0 e0       	ldi	r27, 0x00	; 0
    3aa8:	ef e5       	ldi	r30, 0x5F	; 95
    3aaa:	f0 e0       	ldi	r31, 0x00	; 0
    3aac:	80 81       	ld	r24, Z
    3aae:	80 68       	ori	r24, 0x80	; 128
    3ab0:	8c 93       	st	X, r24
}
    3ab2:	cf 91       	pop	r28
    3ab4:	df 91       	pop	r29
    3ab6:	08 95       	ret

00003ab8 <main>:
void main (void){
    3ab8:	0f 93       	push	r16
    3aba:	1f 93       	push	r17
    3abc:	df 93       	push	r29
    3abe:	cf 93       	push	r28
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
    3ac4:	cc 56       	subi	r28, 0x6C	; 108
    3ac6:	d0 40       	sbci	r29, 0x00	; 0
    3ac8:	0f b6       	in	r0, 0x3f	; 63
    3aca:	f8 94       	cli
    3acc:	de bf       	out	0x3e, r29	; 62
    3ace:	0f be       	out	0x3f, r0	; 63
    3ad0:	cd bf       	out	0x3d, r28	; 61
	DDRC|=(1<<0);
    3ad2:	a4 e3       	ldi	r26, 0x34	; 52
    3ad4:	b0 e0       	ldi	r27, 0x00	; 0
    3ad6:	e4 e3       	ldi	r30, 0x34	; 52
    3ad8:	f0 e0       	ldi	r31, 0x00	; 0
    3ada:	80 81       	ld	r24, Z
    3adc:	81 60       	ori	r24, 0x01	; 1
    3ade:	8c 93       	st	X, r24
	PORTC&=~1;
    3ae0:	a5 e3       	ldi	r26, 0x35	; 53
    3ae2:	b0 e0       	ldi	r27, 0x00	; 0
    3ae4:	e5 e3       	ldi	r30, 0x35	; 53
    3ae6:	f0 e0       	ldi	r31, 0x00	; 0
    3ae8:	80 81       	ld	r24, Z
    3aea:	8e 7f       	andi	r24, 0xFE	; 254
    3aec:	8c 93       	st	X, r24
	u8 numtimes=0;
    3aee:	fe 01       	movw	r30, r28
    3af0:	e8 59       	subi	r30, 0x98	; 152
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	10 82       	st	Z, r1
	EXTI_VidGIE () ;
    3af6:	0e 94 2f 1c 	call	0x385e	; 0x385e <EXTI_VidGIE>
	EXTI_VidInit();
    3afa:	0e 94 13 1c 	call	0x3826	; 0x3826 <EXTI_VidInit>
	EXTI_VidSetCallBack(0,&ultrasonic_in_action) ;
    3afe:	24 ef       	ldi	r18, 0xF4	; 244
    3b00:	36 e1       	ldi	r19, 0x16	; 22
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	b9 01       	movw	r22, r18
    3b06:	0e 94 3d 1c 	call	0x387a	; 0x387a <EXTI_VidSetCallBack>
	INT0_Init();
    3b0a:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <INT0_Init>
		LCD_VidInit();
    3b0e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_VidInit>
		Timer1_VidTimer1Normal () ;
    3b12:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <Timer1_VidTimer1Normal>
		ULTRASONIC_init() ;
    3b16:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <ULTRASONIC_init>
		UART_VidInit() ;
    3b1a:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <UART_VidInit>


	DDRD &= ~(1 << PD0);
    3b1e:	a1 e3       	ldi	r26, 0x31	; 49
    3b20:	b0 e0       	ldi	r27, 0x00	; 0
    3b22:	e1 e3       	ldi	r30, 0x31	; 49
    3b24:	f0 e0       	ldi	r31, 0x00	; 0
    3b26:	80 81       	ld	r24, Z
    3b28:	8e 7f       	andi	r24, 0xFE	; 254
    3b2a:	8c 93       	st	X, r24
	DDRD |= (1 << PD1);
    3b2c:	a1 e3       	ldi	r26, 0x31	; 49
    3b2e:	b0 e0       	ldi	r27, 0x00	; 0
    3b30:	e1 e3       	ldi	r30, 0x31	; 49
    3b32:	f0 e0       	ldi	r31, 0x00	; 0
    3b34:	80 81       	ld	r24, Z
    3b36:	82 60       	ori	r24, 0x02	; 2
    3b38:	8c 93       	st	X, r24

	IRArrayOf5_Init();
    3b3a:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <IRArrayOf5_Init>
	MOTOR_init();
    3b3e:	0e 94 ae 14 	call	0x295c	; 0x295c <MOTOR_init>
	KPD_VidInit() ;
    3b42:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <KPD_VidInit>
	GoStraight();
    3b46:	0e 94 09 15 	call	0x2a12	; 0x2a12 <GoStraight>
	//INT0_Init();


	u8 pw []={'1','2','3','4'};
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	e7 59       	subi	r30, 0x97	; 151
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	81 e3       	ldi	r24, 0x31	; 49
    3b52:	80 83       	st	Z, r24
    3b54:	fe 01       	movw	r30, r28
    3b56:	e7 59       	subi	r30, 0x97	; 151
    3b58:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5a:	82 e3       	ldi	r24, 0x32	; 50
    3b5c:	81 83       	std	Z+1, r24	; 0x01
    3b5e:	fe 01       	movw	r30, r28
    3b60:	e7 59       	subi	r30, 0x97	; 151
    3b62:	ff 4f       	sbci	r31, 0xFF	; 255
    3b64:	83 e3       	ldi	r24, 0x33	; 51
    3b66:	82 83       	std	Z+2, r24	; 0x02
    3b68:	fe 01       	movw	r30, r28
    3b6a:	e7 59       	subi	r30, 0x97	; 151
    3b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6e:	84 e3       	ldi	r24, 0x34	; 52
    3b70:	83 83       	std	Z+3, r24	; 0x03
	u8 num=KPD_CHECK ;
    3b72:	fe 01       	movw	r30, r28
    3b74:	e9 59       	subi	r30, 0x99	; 153
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	8f ef       	ldi	r24, 0xFF	; 255
    3b7a:	80 83       	st	Z, r24
	u8 cnt =3;
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	ea 59       	subi	r30, 0x9A	; 154
    3b80:	ff 4f       	sbci	r31, 0xFF	; 255
    3b82:	83 e0       	ldi	r24, 0x03	; 3
    3b84:	80 83       	st	Z, r24

	u8 numwa=1;
    3b86:	fe 01       	movw	r30, r28
    3b88:	eb 59       	subi	r30, 0x9B	; 155
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	80 83       	st	Z, r24
	LCD_VidSendString("  LOGIN_SYSTEM");
    3b90:	88 e7       	ldi	r24, 0x78	; 120
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LCD_VidSendString>
    3b98:	fe 01       	movw	r30, r28
    3b9a:	e1 5a       	subi	r30, 0xA1	; 161
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	aa ef       	ldi	r26, 0xFA	; 250
    3ba4:	b3 e4       	ldi	r27, 0x43	; 67
    3ba6:	80 83       	st	Z, r24
    3ba8:	91 83       	std	Z+1, r25	; 0x01
    3baa:	a2 83       	std	Z+2, r26	; 0x02
    3bac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bae:	8e 01       	movw	r16, r28
    3bb0:	05 5a       	subi	r16, 0xA5	; 165
    3bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	e1 5a       	subi	r30, 0xA1	; 161
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	60 81       	ld	r22, Z
    3bbc:	71 81       	ldd	r23, Z+1	; 0x01
    3bbe:	82 81       	ldd	r24, Z+2	; 0x02
    3bc0:	93 81       	ldd	r25, Z+3	; 0x03
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	4a e7       	ldi	r20, 0x7A	; 122
    3bc8:	55 e4       	ldi	r21, 0x45	; 69
    3bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	f8 01       	movw	r30, r16
    3bd4:	80 83       	st	Z, r24
    3bd6:	91 83       	std	Z+1, r25	; 0x01
    3bd8:	a2 83       	std	Z+2, r26	; 0x02
    3bda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e5 5a       	subi	r30, 0xA5	; 165
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	60 81       	ld	r22, Z
    3be4:	71 81       	ldd	r23, Z+1	; 0x01
    3be6:	82 81       	ldd	r24, Z+2	; 0x02
    3be8:	93 81       	ldd	r25, Z+3	; 0x03
    3bea:	20 e0       	ldi	r18, 0x00	; 0
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	40 e8       	ldi	r20, 0x80	; 128
    3bf0:	5f e3       	ldi	r21, 0x3F	; 63
    3bf2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bf6:	88 23       	and	r24, r24
    3bf8:	44 f4       	brge	.+16     	; 0x3c0a <main+0x152>
		__ticks = 1;
    3bfa:	fe 01       	movw	r30, r28
    3bfc:	e7 5a       	subi	r30, 0xA7	; 167
    3bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	91 83       	std	Z+1, r25	; 0x01
    3c06:	80 83       	st	Z, r24
    3c08:	64 c0       	rjmp	.+200    	; 0x3cd2 <main+0x21a>
	else if (__tmp > 65535)
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	e5 5a       	subi	r30, 0xA5	; 165
    3c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c10:	60 81       	ld	r22, Z
    3c12:	71 81       	ldd	r23, Z+1	; 0x01
    3c14:	82 81       	ldd	r24, Z+2	; 0x02
    3c16:	93 81       	ldd	r25, Z+3	; 0x03
    3c18:	20 e0       	ldi	r18, 0x00	; 0
    3c1a:	3f ef       	ldi	r19, 0xFF	; 255
    3c1c:	4f e7       	ldi	r20, 0x7F	; 127
    3c1e:	57 e4       	ldi	r21, 0x47	; 71
    3c20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c24:	18 16       	cp	r1, r24
    3c26:	0c f0       	brlt	.+2      	; 0x3c2a <main+0x172>
    3c28:	43 c0       	rjmp	.+134    	; 0x3cb0 <main+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	e1 5a       	subi	r30, 0xA1	; 161
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	60 81       	ld	r22, Z
    3c32:	71 81       	ldd	r23, Z+1	; 0x01
    3c34:	82 81       	ldd	r24, Z+2	; 0x02
    3c36:	93 81       	ldd	r25, Z+3	; 0x03
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	40 e2       	ldi	r20, 0x20	; 32
    3c3e:	51 e4       	ldi	r21, 0x41	; 65
    3c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c44:	dc 01       	movw	r26, r24
    3c46:	cb 01       	movw	r24, r22
    3c48:	8e 01       	movw	r16, r28
    3c4a:	07 5a       	subi	r16, 0xA7	; 167
    3c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c4e:	bc 01       	movw	r22, r24
    3c50:	cd 01       	movw	r24, r26
    3c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	f8 01       	movw	r30, r16
    3c5c:	91 83       	std	Z+1, r25	; 0x01
    3c5e:	80 83       	st	Z, r24
    3c60:	1f c0       	rjmp	.+62     	; 0x3ca0 <main+0x1e8>
    3c62:	fe 01       	movw	r30, r28
    3c64:	e9 5a       	subi	r30, 0xA9	; 169
    3c66:	ff 4f       	sbci	r31, 0xFF	; 255
    3c68:	80 e9       	ldi	r24, 0x90	; 144
    3c6a:	91 e0       	ldi	r25, 0x01	; 1
    3c6c:	91 83       	std	Z+1, r25	; 0x01
    3c6e:	80 83       	st	Z, r24
    3c70:	fe 01       	movw	r30, r28
    3c72:	e9 5a       	subi	r30, 0xA9	; 169
    3c74:	ff 4f       	sbci	r31, 0xFF	; 255
    3c76:	80 81       	ld	r24, Z
    3c78:	91 81       	ldd	r25, Z+1	; 0x01
    3c7a:	01 97       	sbiw	r24, 0x01	; 1
    3c7c:	f1 f7       	brne	.-4      	; 0x3c7a <main+0x1c2>
    3c7e:	fe 01       	movw	r30, r28
    3c80:	e9 5a       	subi	r30, 0xA9	; 169
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	91 83       	std	Z+1, r25	; 0x01
    3c86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c88:	de 01       	movw	r26, r28
    3c8a:	a7 5a       	subi	r26, 0xA7	; 167
    3c8c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c8e:	fe 01       	movw	r30, r28
    3c90:	e7 5a       	subi	r30, 0xA7	; 167
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	80 81       	ld	r24, Z
    3c96:	91 81       	ldd	r25, Z+1	; 0x01
    3c98:	01 97       	sbiw	r24, 0x01	; 1
    3c9a:	11 96       	adiw	r26, 0x01	; 1
    3c9c:	9c 93       	st	X, r25
    3c9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e7 5a       	subi	r30, 0xA7	; 167
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	80 81       	ld	r24, Z
    3ca8:	91 81       	ldd	r25, Z+1	; 0x01
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	d1 f6       	brne	.-76     	; 0x3c62 <main+0x1aa>
    3cae:	27 c0       	rjmp	.+78     	; 0x3cfe <main+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb0:	8e 01       	movw	r16, r28
    3cb2:	07 5a       	subi	r16, 0xA7	; 167
    3cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	e5 5a       	subi	r30, 0xA5	; 165
    3cba:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbc:	60 81       	ld	r22, Z
    3cbe:	71 81       	ldd	r23, Z+1	; 0x01
    3cc0:	82 81       	ldd	r24, Z+2	; 0x02
    3cc2:	93 81       	ldd	r25, Z+3	; 0x03
    3cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc8:	dc 01       	movw	r26, r24
    3cca:	cb 01       	movw	r24, r22
    3ccc:	f8 01       	movw	r30, r16
    3cce:	91 83       	std	Z+1, r25	; 0x01
    3cd0:	80 83       	st	Z, r24
    3cd2:	de 01       	movw	r26, r28
    3cd4:	ab 5a       	subi	r26, 0xAB	; 171
    3cd6:	bf 4f       	sbci	r27, 0xFF	; 255
    3cd8:	fe 01       	movw	r30, r28
    3cda:	e7 5a       	subi	r30, 0xA7	; 167
    3cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cde:	80 81       	ld	r24, Z
    3ce0:	91 81       	ldd	r25, Z+1	; 0x01
    3ce2:	8d 93       	st	X+, r24
    3ce4:	9c 93       	st	X, r25
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	eb 5a       	subi	r30, 0xAB	; 171
    3cea:	ff 4f       	sbci	r31, 0xFF	; 255
    3cec:	80 81       	ld	r24, Z
    3cee:	91 81       	ldd	r25, Z+1	; 0x01
    3cf0:	01 97       	sbiw	r24, 0x01	; 1
    3cf2:	f1 f7       	brne	.-4      	; 0x3cf0 <main+0x238>
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	eb 5a       	subi	r30, 0xAB	; 171
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	91 83       	std	Z+1, r25	; 0x01
    3cfc:	80 83       	st	Z, r24
	_delay_ms(500);
	LCD_VidSendCMD(0x01) ;
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_VidSendCMD>
	while (1){
		int i =0 ;
    3d04:	fe 01       	movw	r30, r28
    3d06:	ed 59       	subi	r30, 0x9D	; 157
    3d08:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0a:	11 82       	std	Z+1, r1	; 0x01
    3d0c:	10 82       	st	Z, r1
		if(numwa>0){
    3d0e:	fe 01       	movw	r30, r28
    3d10:	eb 59       	subi	r30, 0x9B	; 155
    3d12:	ff 4f       	sbci	r31, 0xFF	; 255
    3d14:	80 81       	ld	r24, Z
    3d16:	88 23       	and	r24, r24
    3d18:	09 f4       	brne	.+2      	; 0x3d1c <main+0x264>
    3d1a:	57 c0       	rjmp	.+174    	; 0x3dca <main+0x312>
			numwa=0;
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	eb 59       	subi	r30, 0x9B	; 155
    3d20:	ff 4f       	sbci	r31, 0xFF	; 255
    3d22:	10 82       	st	Z, r1
			num=KPD_CHECK ;
    3d24:	fe 01       	movw	r30, r28
    3d26:	e9 59       	subi	r30, 0x99	; 153
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	8f ef       	ldi	r24, 0xFF	; 255
    3d2c:	80 83       	st	Z, r24
			for(i=0;i<4;i++){
    3d2e:	fe 01       	movw	r30, r28
    3d30:	ed 59       	subi	r30, 0x9D	; 157
    3d32:	ff 4f       	sbci	r31, 0xFF	; 255
    3d34:	11 82       	std	Z+1, r1	; 0x01
    3d36:	10 82       	st	Z, r1
    3d38:	3f c0       	rjmp	.+126    	; 0x3db8 <main+0x300>
				while((num==KPD_CHECK)){
					num=KPD_U8PressedKey();
    3d3a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <KPD_U8PressedKey>
    3d3e:	fe 01       	movw	r30, r28
    3d40:	e9 59       	subi	r30, 0x99	; 153
    3d42:	ff 4f       	sbci	r31, 0xFF	; 255
    3d44:	80 83       	st	Z, r24
		int i =0 ;
		if(numwa>0){
			numwa=0;
			num=KPD_CHECK ;
			for(i=0;i<4;i++){
				while((num==KPD_CHECK)){
    3d46:	fe 01       	movw	r30, r28
    3d48:	e9 59       	subi	r30, 0x99	; 153
    3d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4c:	80 81       	ld	r24, Z
    3d4e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d50:	a1 f3       	breq	.-24     	; 0x3d3a <main+0x282>
					num=KPD_U8PressedKey();
				}


				if(num!=(pw[i])){
    3d52:	fe 01       	movw	r30, r28
    3d54:	ed 59       	subi	r30, 0x9D	; 157
    3d56:	ff 4f       	sbci	r31, 0xFF	; 255
    3d58:	20 81       	ld	r18, Z
    3d5a:	31 81       	ldd	r19, Z+1	; 0x01
    3d5c:	ce 01       	movw	r24, r28
    3d5e:	87 59       	subi	r24, 0x97	; 151
    3d60:	9f 4f       	sbci	r25, 0xFF	; 255
    3d62:	fc 01       	movw	r30, r24
    3d64:	e2 0f       	add	r30, r18
    3d66:	f3 1f       	adc	r31, r19
    3d68:	90 81       	ld	r25, Z
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	e9 59       	subi	r30, 0x99	; 153
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	80 81       	ld	r24, Z
    3d72:	98 17       	cp	r25, r24
    3d74:	69 f0       	breq	.+26     	; 0x3d90 <main+0x2d8>

					numwa++;
    3d76:	de 01       	movw	r26, r28
    3d78:	ab 59       	subi	r26, 0x9B	; 155
    3d7a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	eb 59       	subi	r30, 0x9B	; 155
    3d80:	ff 4f       	sbci	r31, 0xFF	; 255
    3d82:	80 81       	ld	r24, Z
    3d84:	8f 5f       	subi	r24, 0xFF	; 255
    3d86:	8c 93       	st	X, r24
					LCD_VidSendChar('*');
    3d88:	8a e2       	ldi	r24, 0x2A	; 42
    3d8a:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_VidSendChar>
    3d8e:	03 c0       	rjmp	.+6      	; 0x3d96 <main+0x2de>
					//break ;
				}else{

					//LCD_VidLocation(LINE_1,)
					LCD_VidSendChar('*');
    3d90:	8a e2       	ldi	r24, 0x2A	; 42
    3d92:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_VidSendChar>
				}
				num=KPD_CHECK ;
    3d96:	fe 01       	movw	r30, r28
    3d98:	e9 59       	subi	r30, 0x99	; 153
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	8f ef       	ldi	r24, 0xFF	; 255
    3d9e:	80 83       	st	Z, r24
	while (1){
		int i =0 ;
		if(numwa>0){
			numwa=0;
			num=KPD_CHECK ;
			for(i=0;i<4;i++){
    3da0:	de 01       	movw	r26, r28
    3da2:	ad 59       	subi	r26, 0x9D	; 157
    3da4:	bf 4f       	sbci	r27, 0xFF	; 255
    3da6:	fe 01       	movw	r30, r28
    3da8:	ed 59       	subi	r30, 0x9D	; 157
    3daa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dac:	80 81       	ld	r24, Z
    3dae:	91 81       	ldd	r25, Z+1	; 0x01
    3db0:	01 96       	adiw	r24, 0x01	; 1
    3db2:	11 96       	adiw	r26, 0x01	; 1
    3db4:	9c 93       	st	X, r25
    3db6:	8e 93       	st	-X, r24
    3db8:	fe 01       	movw	r30, r28
    3dba:	ed 59       	subi	r30, 0x9D	; 157
    3dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbe:	80 81       	ld	r24, Z
    3dc0:	91 81       	ldd	r25, Z+1	; 0x01
    3dc2:	84 30       	cpi	r24, 0x04	; 4
    3dc4:	91 05       	cpc	r25, r1
    3dc6:	0c f4       	brge	.+2      	; 0x3dca <main+0x312>
    3dc8:	be cf       	rjmp	.-132    	; 0x3d46 <main+0x28e>
					LCD_VidSendChar('*');
				}
				num=KPD_CHECK ;
			}
		}
		if(numwa>0){
    3dca:	fe 01       	movw	r30, r28
    3dcc:	eb 59       	subi	r30, 0x9B	; 155
    3dce:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd0:	80 81       	ld	r24, Z
    3dd2:	88 23       	and	r24, r24
    3dd4:	09 f4       	brne	.+2      	; 0x3dd8 <main+0x320>
    3dd6:	75 c2       	rjmp	.+1258   	; 0x42c2 <main+0x80a>
			cnt--;
    3dd8:	de 01       	movw	r26, r28
    3dda:	aa 59       	subi	r26, 0x9A	; 154
    3ddc:	bf 4f       	sbci	r27, 0xFF	; 255
    3dde:	fe 01       	movw	r30, r28
    3de0:	ea 59       	subi	r30, 0x9A	; 154
    3de2:	ff 4f       	sbci	r31, 0xFF	; 255
    3de4:	80 81       	ld	r24, Z
    3de6:	81 50       	subi	r24, 0x01	; 1
    3de8:	8c 93       	st	X, r24
			LCD_VidSendString("INCORRECT");
    3dea:	87 e8       	ldi	r24, 0x87	; 135
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LCD_VidSendString>
    3df2:	fe 01       	movw	r30, r28
    3df4:	ef 5a       	subi	r30, 0xAF	; 175
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	aa ef       	ldi	r26, 0xFA	; 250
    3dfe:	b4 e4       	ldi	r27, 0x44	; 68
    3e00:	80 83       	st	Z, r24
    3e02:	91 83       	std	Z+1, r25	; 0x01
    3e04:	a2 83       	std	Z+2, r26	; 0x02
    3e06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e08:	8e 01       	movw	r16, r28
    3e0a:	03 5b       	subi	r16, 0xB3	; 179
    3e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e0e:	fe 01       	movw	r30, r28
    3e10:	ef 5a       	subi	r30, 0xAF	; 175
    3e12:	ff 4f       	sbci	r31, 0xFF	; 255
    3e14:	60 81       	ld	r22, Z
    3e16:	71 81       	ldd	r23, Z+1	; 0x01
    3e18:	82 81       	ldd	r24, Z+2	; 0x02
    3e1a:	93 81       	ldd	r25, Z+3	; 0x03
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	4a e7       	ldi	r20, 0x7A	; 122
    3e22:	55 e4       	ldi	r21, 0x45	; 69
    3e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	f8 01       	movw	r30, r16
    3e2e:	80 83       	st	Z, r24
    3e30:	91 83       	std	Z+1, r25	; 0x01
    3e32:	a2 83       	std	Z+2, r26	; 0x02
    3e34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e36:	fe 01       	movw	r30, r28
    3e38:	e3 5b       	subi	r30, 0xB3	; 179
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	60 81       	ld	r22, Z
    3e3e:	71 81       	ldd	r23, Z+1	; 0x01
    3e40:	82 81       	ldd	r24, Z+2	; 0x02
    3e42:	93 81       	ldd	r25, Z+3	; 0x03
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	40 e8       	ldi	r20, 0x80	; 128
    3e4a:	5f e3       	ldi	r21, 0x3F	; 63
    3e4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e50:	88 23       	and	r24, r24
    3e52:	44 f4       	brge	.+16     	; 0x3e64 <main+0x3ac>
		__ticks = 1;
    3e54:	fe 01       	movw	r30, r28
    3e56:	e5 5b       	subi	r30, 0xB5	; 181
    3e58:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	91 83       	std	Z+1, r25	; 0x01
    3e60:	80 83       	st	Z, r24
    3e62:	64 c0       	rjmp	.+200    	; 0x3f2c <main+0x474>
	else if (__tmp > 65535)
    3e64:	fe 01       	movw	r30, r28
    3e66:	e3 5b       	subi	r30, 0xB3	; 179
    3e68:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6a:	60 81       	ld	r22, Z
    3e6c:	71 81       	ldd	r23, Z+1	; 0x01
    3e6e:	82 81       	ldd	r24, Z+2	; 0x02
    3e70:	93 81       	ldd	r25, Z+3	; 0x03
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	3f ef       	ldi	r19, 0xFF	; 255
    3e76:	4f e7       	ldi	r20, 0x7F	; 127
    3e78:	57 e4       	ldi	r21, 0x47	; 71
    3e7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e7e:	18 16       	cp	r1, r24
    3e80:	0c f0       	brlt	.+2      	; 0x3e84 <main+0x3cc>
    3e82:	43 c0       	rjmp	.+134    	; 0x3f0a <main+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e84:	fe 01       	movw	r30, r28
    3e86:	ef 5a       	subi	r30, 0xAF	; 175
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	60 81       	ld	r22, Z
    3e8c:	71 81       	ldd	r23, Z+1	; 0x01
    3e8e:	82 81       	ldd	r24, Z+2	; 0x02
    3e90:	93 81       	ldd	r25, Z+3	; 0x03
    3e92:	20 e0       	ldi	r18, 0x00	; 0
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	40 e2       	ldi	r20, 0x20	; 32
    3e98:	51 e4       	ldi	r21, 0x41	; 65
    3e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	8e 01       	movw	r16, r28
    3ea4:	05 5b       	subi	r16, 0xB5	; 181
    3ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea8:	bc 01       	movw	r22, r24
    3eaa:	cd 01       	movw	r24, r26
    3eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	f8 01       	movw	r30, r16
    3eb6:	91 83       	std	Z+1, r25	; 0x01
    3eb8:	80 83       	st	Z, r24
    3eba:	1f c0       	rjmp	.+62     	; 0x3efa <main+0x442>
    3ebc:	fe 01       	movw	r30, r28
    3ebe:	e7 5b       	subi	r30, 0xB7	; 183
    3ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec2:	80 e9       	ldi	r24, 0x90	; 144
    3ec4:	91 e0       	ldi	r25, 0x01	; 1
    3ec6:	91 83       	std	Z+1, r25	; 0x01
    3ec8:	80 83       	st	Z, r24
    3eca:	fe 01       	movw	r30, r28
    3ecc:	e7 5b       	subi	r30, 0xB7	; 183
    3ece:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed0:	80 81       	ld	r24, Z
    3ed2:	91 81       	ldd	r25, Z+1	; 0x01
    3ed4:	01 97       	sbiw	r24, 0x01	; 1
    3ed6:	f1 f7       	brne	.-4      	; 0x3ed4 <main+0x41c>
    3ed8:	fe 01       	movw	r30, r28
    3eda:	e7 5b       	subi	r30, 0xB7	; 183
    3edc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ede:	91 83       	std	Z+1, r25	; 0x01
    3ee0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ee2:	de 01       	movw	r26, r28
    3ee4:	a5 5b       	subi	r26, 0xB5	; 181
    3ee6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ee8:	fe 01       	movw	r30, r28
    3eea:	e5 5b       	subi	r30, 0xB5	; 181
    3eec:	ff 4f       	sbci	r31, 0xFF	; 255
    3eee:	80 81       	ld	r24, Z
    3ef0:	91 81       	ldd	r25, Z+1	; 0x01
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	11 96       	adiw	r26, 0x01	; 1
    3ef6:	9c 93       	st	X, r25
    3ef8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3efa:	fe 01       	movw	r30, r28
    3efc:	e5 5b       	subi	r30, 0xB5	; 181
    3efe:	ff 4f       	sbci	r31, 0xFF	; 255
    3f00:	80 81       	ld	r24, Z
    3f02:	91 81       	ldd	r25, Z+1	; 0x01
    3f04:	00 97       	sbiw	r24, 0x00	; 0
    3f06:	d1 f6       	brne	.-76     	; 0x3ebc <main+0x404>
    3f08:	27 c0       	rjmp	.+78     	; 0x3f58 <main+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f0a:	8e 01       	movw	r16, r28
    3f0c:	05 5b       	subi	r16, 0xB5	; 181
    3f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f10:	fe 01       	movw	r30, r28
    3f12:	e3 5b       	subi	r30, 0xB3	; 179
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	60 81       	ld	r22, Z
    3f18:	71 81       	ldd	r23, Z+1	; 0x01
    3f1a:	82 81       	ldd	r24, Z+2	; 0x02
    3f1c:	93 81       	ldd	r25, Z+3	; 0x03
    3f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	f8 01       	movw	r30, r16
    3f28:	91 83       	std	Z+1, r25	; 0x01
    3f2a:	80 83       	st	Z, r24
    3f2c:	de 01       	movw	r26, r28
    3f2e:	a9 5b       	subi	r26, 0xB9	; 185
    3f30:	bf 4f       	sbci	r27, 0xFF	; 255
    3f32:	fe 01       	movw	r30, r28
    3f34:	e5 5b       	subi	r30, 0xB5	; 181
    3f36:	ff 4f       	sbci	r31, 0xFF	; 255
    3f38:	80 81       	ld	r24, Z
    3f3a:	91 81       	ldd	r25, Z+1	; 0x01
    3f3c:	8d 93       	st	X+, r24
    3f3e:	9c 93       	st	X, r25
    3f40:	fe 01       	movw	r30, r28
    3f42:	e9 5b       	subi	r30, 0xB9	; 185
    3f44:	ff 4f       	sbci	r31, 0xFF	; 255
    3f46:	80 81       	ld	r24, Z
    3f48:	91 81       	ldd	r25, Z+1	; 0x01
    3f4a:	01 97       	sbiw	r24, 0x01	; 1
    3f4c:	f1 f7       	brne	.-4      	; 0x3f4a <main+0x492>
    3f4e:	fe 01       	movw	r30, r28
    3f50:	e9 5b       	subi	r30, 0xB9	; 185
    3f52:	ff 4f       	sbci	r31, 0xFF	; 255
    3f54:	91 83       	std	Z+1, r25	; 0x01
    3f56:	80 83       	st	Z, r24
			_delay_ms(2000) ;
			LCD_VidSendCMD(0x01) ;
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_VidSendCMD>
			if(cnt==0){
    3f5e:	fe 01       	movw	r30, r28
    3f60:	ea 59       	subi	r30, 0x9A	; 154
    3f62:	ff 4f       	sbci	r31, 0xFF	; 255
    3f64:	80 81       	ld	r24, Z
    3f66:	88 23       	and	r24, r24
    3f68:	09 f0       	breq	.+2      	; 0x3f6c <main+0x4b4>
    3f6a:	ab c1       	rjmp	.+854    	; 0x42c2 <main+0x80a>
				cnt=3 ;
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	ea 59       	subi	r30, 0x9A	; 154
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	83 e0       	ldi	r24, 0x03	; 3
    3f74:	80 83       	st	Z, r24
				LCD_VidSendString(" wait 10 sec");
    3f76:	81 e9       	ldi	r24, 0x91	; 145
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LCD_VidSendString>
    3f7e:	fe 01       	movw	r30, r28
    3f80:	ed 5b       	subi	r30, 0xBD	; 189
    3f82:	ff 4f       	sbci	r31, 0xFF	; 255
    3f84:	80 e0       	ldi	r24, 0x00	; 0
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	aa e7       	ldi	r26, 0x7A	; 122
    3f8a:	b4 e4       	ldi	r27, 0x44	; 68
    3f8c:	80 83       	st	Z, r24
    3f8e:	91 83       	std	Z+1, r25	; 0x01
    3f90:	a2 83       	std	Z+2, r26	; 0x02
    3f92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f94:	8e 01       	movw	r16, r28
    3f96:	01 5c       	subi	r16, 0xC1	; 193
    3f98:	1f 4f       	sbci	r17, 0xFF	; 255
    3f9a:	fe 01       	movw	r30, r28
    3f9c:	ed 5b       	subi	r30, 0xBD	; 189
    3f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa0:	60 81       	ld	r22, Z
    3fa2:	71 81       	ldd	r23, Z+1	; 0x01
    3fa4:	82 81       	ldd	r24, Z+2	; 0x02
    3fa6:	93 81       	ldd	r25, Z+3	; 0x03
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	4a e7       	ldi	r20, 0x7A	; 122
    3fae:	55 e4       	ldi	r21, 0x45	; 69
    3fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	cb 01       	movw	r24, r22
    3fb8:	f8 01       	movw	r30, r16
    3fba:	80 83       	st	Z, r24
    3fbc:	91 83       	std	Z+1, r25	; 0x01
    3fbe:	a2 83       	std	Z+2, r26	; 0x02
    3fc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	ff 96       	adiw	r30, 0x3f	; 63
    3fc6:	60 81       	ld	r22, Z
    3fc8:	71 81       	ldd	r23, Z+1	; 0x01
    3fca:	82 81       	ldd	r24, Z+2	; 0x02
    3fcc:	93 81       	ldd	r25, Z+3	; 0x03
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	40 e8       	ldi	r20, 0x80	; 128
    3fd4:	5f e3       	ldi	r21, 0x3F	; 63
    3fd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fda:	88 23       	and	r24, r24
    3fdc:	2c f4       	brge	.+10     	; 0x3fe8 <main+0x530>
		__ticks = 1;
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	9e af       	std	Y+62, r25	; 0x3e
    3fe4:	8d af       	std	Y+61, r24	; 0x3d
    3fe6:	46 c0       	rjmp	.+140    	; 0x4074 <main+0x5bc>
	else if (__tmp > 65535)
    3fe8:	fe 01       	movw	r30, r28
    3fea:	ff 96       	adiw	r30, 0x3f	; 63
    3fec:	60 81       	ld	r22, Z
    3fee:	71 81       	ldd	r23, Z+1	; 0x01
    3ff0:	82 81       	ldd	r24, Z+2	; 0x02
    3ff2:	93 81       	ldd	r25, Z+3	; 0x03
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	3f ef       	ldi	r19, 0xFF	; 255
    3ff8:	4f e7       	ldi	r20, 0x7F	; 127
    3ffa:	57 e4       	ldi	r21, 0x47	; 71
    3ffc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4000:	18 16       	cp	r1, r24
    4002:	64 f5       	brge	.+88     	; 0x405c <main+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4004:	fe 01       	movw	r30, r28
    4006:	ed 5b       	subi	r30, 0xBD	; 189
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	60 81       	ld	r22, Z
    400c:	71 81       	ldd	r23, Z+1	; 0x01
    400e:	82 81       	ldd	r24, Z+2	; 0x02
    4010:	93 81       	ldd	r25, Z+3	; 0x03
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	40 e2       	ldi	r20, 0x20	; 32
    4018:	51 e4       	ldi	r21, 0x41	; 65
    401a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    401e:	dc 01       	movw	r26, r24
    4020:	cb 01       	movw	r24, r22
    4022:	bc 01       	movw	r22, r24
    4024:	cd 01       	movw	r24, r26
    4026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	9e af       	std	Y+62, r25	; 0x3e
    4030:	8d af       	std	Y+61, r24	; 0x3d
    4032:	0f c0       	rjmp	.+30     	; 0x4052 <main+0x59a>
    4034:	80 e9       	ldi	r24, 0x90	; 144
    4036:	91 e0       	ldi	r25, 0x01	; 1
    4038:	9c af       	std	Y+60, r25	; 0x3c
    403a:	8b af       	std	Y+59, r24	; 0x3b
    403c:	8b ad       	ldd	r24, Y+59	; 0x3b
    403e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4040:	01 97       	sbiw	r24, 0x01	; 1
    4042:	f1 f7       	brne	.-4      	; 0x4040 <main+0x588>
    4044:	9c af       	std	Y+60, r25	; 0x3c
    4046:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4048:	8d ad       	ldd	r24, Y+61	; 0x3d
    404a:	9e ad       	ldd	r25, Y+62	; 0x3e
    404c:	01 97       	sbiw	r24, 0x01	; 1
    404e:	9e af       	std	Y+62, r25	; 0x3e
    4050:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4052:	8d ad       	ldd	r24, Y+61	; 0x3d
    4054:	9e ad       	ldd	r25, Y+62	; 0x3e
    4056:	00 97       	sbiw	r24, 0x00	; 0
    4058:	69 f7       	brne	.-38     	; 0x4034 <main+0x57c>
    405a:	16 c0       	rjmp	.+44     	; 0x4088 <main+0x5d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    405c:	fe 01       	movw	r30, r28
    405e:	ff 96       	adiw	r30, 0x3f	; 63
    4060:	60 81       	ld	r22, Z
    4062:	71 81       	ldd	r23, Z+1	; 0x01
    4064:	82 81       	ldd	r24, Z+2	; 0x02
    4066:	93 81       	ldd	r25, Z+3	; 0x03
    4068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	9e af       	std	Y+62, r25	; 0x3e
    4072:	8d af       	std	Y+61, r24	; 0x3d
    4074:	8d ad       	ldd	r24, Y+61	; 0x3d
    4076:	9e ad       	ldd	r25, Y+62	; 0x3e
    4078:	9a af       	std	Y+58, r25	; 0x3a
    407a:	89 af       	std	Y+57, r24	; 0x39
    407c:	89 ad       	ldd	r24, Y+57	; 0x39
    407e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4080:	01 97       	sbiw	r24, 0x01	; 1
    4082:	f1 f7       	brne	.-4      	; 0x4080 <main+0x5c8>
    4084:	9a af       	std	Y+58, r25	; 0x3a
    4086:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(1000);
				LCD_VidSendCMD(0x01) ;
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_VidSendCMD>
				for(i=1;i<11;i++){
    408e:	fe 01       	movw	r30, r28
    4090:	ed 59       	subi	r30, 0x9D	; 157
    4092:	ff 4f       	sbci	r31, 0xFF	; 255
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	91 83       	std	Z+1, r25	; 0x01
    409a:	80 83       	st	Z, r24
    409c:	09 c1       	rjmp	.+530    	; 0x42b0 <main+0x7f8>
					if(i<10){
    409e:	fe 01       	movw	r30, r28
    40a0:	ed 59       	subi	r30, 0x9D	; 157
    40a2:	ff 4f       	sbci	r31, 0xFF	; 255
    40a4:	80 81       	ld	r24, Z
    40a6:	91 81       	ldd	r25, Z+1	; 0x01
    40a8:	8a 30       	cpi	r24, 0x0A	; 10
    40aa:	91 05       	cpc	r25, r1
    40ac:	44 f4       	brge	.+16     	; 0x40be <main+0x606>
						LCD_VidSendChar((char)(i+'0'));
    40ae:	fe 01       	movw	r30, r28
    40b0:	ed 59       	subi	r30, 0x9D	; 157
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	80 81       	ld	r24, Z
    40b6:	80 5d       	subi	r24, 0xD0	; 208
    40b8:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_VidSendChar>
    40bc:	06 c0       	rjmp	.+12     	; 0x40ca <main+0x612>
					}else {LCD_VidSendChar('1');LCD_VidSendChar('0');}
    40be:	81 e3       	ldi	r24, 0x31	; 49
    40c0:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_VidSendChar>
    40c4:	80 e3       	ldi	r24, 0x30	; 48
    40c6:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_VidSendChar>
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	aa ef       	ldi	r26, 0xFA	; 250
    40d0:	b3 e4       	ldi	r27, 0x43	; 67
    40d2:	8d ab       	std	Y+53, r24	; 0x35
    40d4:	9e ab       	std	Y+54, r25	; 0x36
    40d6:	af ab       	std	Y+55, r26	; 0x37
    40d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40da:	6d a9       	ldd	r22, Y+53	; 0x35
    40dc:	7e a9       	ldd	r23, Y+54	; 0x36
    40de:	8f a9       	ldd	r24, Y+55	; 0x37
    40e0:	98 ad       	ldd	r25, Y+56	; 0x38
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	4a e7       	ldi	r20, 0x7A	; 122
    40e8:	55 e4       	ldi	r21, 0x45	; 69
    40ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	89 ab       	std	Y+49, r24	; 0x31
    40f4:	9a ab       	std	Y+50, r25	; 0x32
    40f6:	ab ab       	std	Y+51, r26	; 0x33
    40f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    40fa:	69 a9       	ldd	r22, Y+49	; 0x31
    40fc:	7a a9       	ldd	r23, Y+50	; 0x32
    40fe:	8b a9       	ldd	r24, Y+51	; 0x33
    4100:	9c a9       	ldd	r25, Y+52	; 0x34
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	40 e8       	ldi	r20, 0x80	; 128
    4108:	5f e3       	ldi	r21, 0x3F	; 63
    410a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    410e:	88 23       	and	r24, r24
    4110:	2c f4       	brge	.+10     	; 0x411c <main+0x664>
		__ticks = 1;
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	98 ab       	std	Y+48, r25	; 0x30
    4118:	8f a7       	std	Y+47, r24	; 0x2f
    411a:	3f c0       	rjmp	.+126    	; 0x419a <main+0x6e2>
	else if (__tmp > 65535)
    411c:	69 a9       	ldd	r22, Y+49	; 0x31
    411e:	7a a9       	ldd	r23, Y+50	; 0x32
    4120:	8b a9       	ldd	r24, Y+51	; 0x33
    4122:	9c a9       	ldd	r25, Y+52	; 0x34
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	3f ef       	ldi	r19, 0xFF	; 255
    4128:	4f e7       	ldi	r20, 0x7F	; 127
    412a:	57 e4       	ldi	r21, 0x47	; 71
    412c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4130:	18 16       	cp	r1, r24
    4132:	4c f5       	brge	.+82     	; 0x4186 <main+0x6ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4134:	6d a9       	ldd	r22, Y+53	; 0x35
    4136:	7e a9       	ldd	r23, Y+54	; 0x36
    4138:	8f a9       	ldd	r24, Y+55	; 0x37
    413a:	98 ad       	ldd	r25, Y+56	; 0x38
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	40 e2       	ldi	r20, 0x20	; 32
    4142:	51 e4       	ldi	r21, 0x41	; 65
    4144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4148:	dc 01       	movw	r26, r24
    414a:	cb 01       	movw	r24, r22
    414c:	bc 01       	movw	r22, r24
    414e:	cd 01       	movw	r24, r26
    4150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	98 ab       	std	Y+48, r25	; 0x30
    415a:	8f a7       	std	Y+47, r24	; 0x2f
    415c:	0f c0       	rjmp	.+30     	; 0x417c <main+0x6c4>
    415e:	80 e9       	ldi	r24, 0x90	; 144
    4160:	91 e0       	ldi	r25, 0x01	; 1
    4162:	9e a7       	std	Y+46, r25	; 0x2e
    4164:	8d a7       	std	Y+45, r24	; 0x2d
    4166:	8d a5       	ldd	r24, Y+45	; 0x2d
    4168:	9e a5       	ldd	r25, Y+46	; 0x2e
    416a:	01 97       	sbiw	r24, 0x01	; 1
    416c:	f1 f7       	brne	.-4      	; 0x416a <main+0x6b2>
    416e:	9e a7       	std	Y+46, r25	; 0x2e
    4170:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4172:	8f a5       	ldd	r24, Y+47	; 0x2f
    4174:	98 a9       	ldd	r25, Y+48	; 0x30
    4176:	01 97       	sbiw	r24, 0x01	; 1
    4178:	98 ab       	std	Y+48, r25	; 0x30
    417a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    417c:	8f a5       	ldd	r24, Y+47	; 0x2f
    417e:	98 a9       	ldd	r25, Y+48	; 0x30
    4180:	00 97       	sbiw	r24, 0x00	; 0
    4182:	69 f7       	brne	.-38     	; 0x415e <main+0x6a6>
    4184:	14 c0       	rjmp	.+40     	; 0x41ae <main+0x6f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4186:	69 a9       	ldd	r22, Y+49	; 0x31
    4188:	7a a9       	ldd	r23, Y+50	; 0x32
    418a:	8b a9       	ldd	r24, Y+51	; 0x33
    418c:	9c a9       	ldd	r25, Y+52	; 0x34
    418e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	98 ab       	std	Y+48, r25	; 0x30
    4198:	8f a7       	std	Y+47, r24	; 0x2f
    419a:	8f a5       	ldd	r24, Y+47	; 0x2f
    419c:	98 a9       	ldd	r25, Y+48	; 0x30
    419e:	9c a7       	std	Y+44, r25	; 0x2c
    41a0:	8b a7       	std	Y+43, r24	; 0x2b
    41a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    41a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    41a6:	01 97       	sbiw	r24, 0x01	; 1
    41a8:	f1 f7       	brne	.-4      	; 0x41a6 <main+0x6ee>
    41aa:	9c a7       	std	Y+44, r25	; 0x2c
    41ac:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(500);
					LCD_VidSendCMD(0x01) ;
    41ae:	81 e0       	ldi	r24, 0x01	; 1
    41b0:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_VidSendCMD>
    41b4:	80 e0       	ldi	r24, 0x00	; 0
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	aa ef       	ldi	r26, 0xFA	; 250
    41ba:	b3 e4       	ldi	r27, 0x43	; 67
    41bc:	8f a3       	std	Y+39, r24	; 0x27
    41be:	98 a7       	std	Y+40, r25	; 0x28
    41c0:	a9 a7       	std	Y+41, r26	; 0x29
    41c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41c4:	6f a1       	ldd	r22, Y+39	; 0x27
    41c6:	78 a5       	ldd	r23, Y+40	; 0x28
    41c8:	89 a5       	ldd	r24, Y+41	; 0x29
    41ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	4a e7       	ldi	r20, 0x7A	; 122
    41d2:	55 e4       	ldi	r21, 0x45	; 69
    41d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	8b a3       	std	Y+35, r24	; 0x23
    41de:	9c a3       	std	Y+36, r25	; 0x24
    41e0:	ad a3       	std	Y+37, r26	; 0x25
    41e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    41e4:	6b a1       	ldd	r22, Y+35	; 0x23
    41e6:	7c a1       	ldd	r23, Y+36	; 0x24
    41e8:	8d a1       	ldd	r24, Y+37	; 0x25
    41ea:	9e a1       	ldd	r25, Y+38	; 0x26
    41ec:	20 e0       	ldi	r18, 0x00	; 0
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	40 e8       	ldi	r20, 0x80	; 128
    41f2:	5f e3       	ldi	r21, 0x3F	; 63
    41f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41f8:	88 23       	and	r24, r24
    41fa:	2c f4       	brge	.+10     	; 0x4206 <main+0x74e>
		__ticks = 1;
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	9a a3       	std	Y+34, r25	; 0x22
    4202:	89 a3       	std	Y+33, r24	; 0x21
    4204:	3f c0       	rjmp	.+126    	; 0x4284 <main+0x7cc>
	else if (__tmp > 65535)
    4206:	6b a1       	ldd	r22, Y+35	; 0x23
    4208:	7c a1       	ldd	r23, Y+36	; 0x24
    420a:	8d a1       	ldd	r24, Y+37	; 0x25
    420c:	9e a1       	ldd	r25, Y+38	; 0x26
    420e:	20 e0       	ldi	r18, 0x00	; 0
    4210:	3f ef       	ldi	r19, 0xFF	; 255
    4212:	4f e7       	ldi	r20, 0x7F	; 127
    4214:	57 e4       	ldi	r21, 0x47	; 71
    4216:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    421a:	18 16       	cp	r1, r24
    421c:	4c f5       	brge	.+82     	; 0x4270 <main+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    421e:	6f a1       	ldd	r22, Y+39	; 0x27
    4220:	78 a5       	ldd	r23, Y+40	; 0x28
    4222:	89 a5       	ldd	r24, Y+41	; 0x29
    4224:	9a a5       	ldd	r25, Y+42	; 0x2a
    4226:	20 e0       	ldi	r18, 0x00	; 0
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	40 e2       	ldi	r20, 0x20	; 32
    422c:	51 e4       	ldi	r21, 0x41	; 65
    422e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4232:	dc 01       	movw	r26, r24
    4234:	cb 01       	movw	r24, r22
    4236:	bc 01       	movw	r22, r24
    4238:	cd 01       	movw	r24, r26
    423a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    423e:	dc 01       	movw	r26, r24
    4240:	cb 01       	movw	r24, r22
    4242:	9a a3       	std	Y+34, r25	; 0x22
    4244:	89 a3       	std	Y+33, r24	; 0x21
    4246:	0f c0       	rjmp	.+30     	; 0x4266 <main+0x7ae>
    4248:	80 e9       	ldi	r24, 0x90	; 144
    424a:	91 e0       	ldi	r25, 0x01	; 1
    424c:	98 a3       	std	Y+32, r25	; 0x20
    424e:	8f 8f       	std	Y+31, r24	; 0x1f
    4250:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4252:	98 a1       	ldd	r25, Y+32	; 0x20
    4254:	01 97       	sbiw	r24, 0x01	; 1
    4256:	f1 f7       	brne	.-4      	; 0x4254 <main+0x79c>
    4258:	98 a3       	std	Y+32, r25	; 0x20
    425a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    425c:	89 a1       	ldd	r24, Y+33	; 0x21
    425e:	9a a1       	ldd	r25, Y+34	; 0x22
    4260:	01 97       	sbiw	r24, 0x01	; 1
    4262:	9a a3       	std	Y+34, r25	; 0x22
    4264:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4266:	89 a1       	ldd	r24, Y+33	; 0x21
    4268:	9a a1       	ldd	r25, Y+34	; 0x22
    426a:	00 97       	sbiw	r24, 0x00	; 0
    426c:	69 f7       	brne	.-38     	; 0x4248 <main+0x790>
    426e:	14 c0       	rjmp	.+40     	; 0x4298 <main+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4270:	6b a1       	ldd	r22, Y+35	; 0x23
    4272:	7c a1       	ldd	r23, Y+36	; 0x24
    4274:	8d a1       	ldd	r24, Y+37	; 0x25
    4276:	9e a1       	ldd	r25, Y+38	; 0x26
    4278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	9a a3       	std	Y+34, r25	; 0x22
    4282:	89 a3       	std	Y+33, r24	; 0x21
    4284:	89 a1       	ldd	r24, Y+33	; 0x21
    4286:	9a a1       	ldd	r25, Y+34	; 0x22
    4288:	9e 8f       	std	Y+30, r25	; 0x1e
    428a:	8d 8f       	std	Y+29, r24	; 0x1d
    428c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    428e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4290:	01 97       	sbiw	r24, 0x01	; 1
    4292:	f1 f7       	brne	.-4      	; 0x4290 <main+0x7d8>
    4294:	9e 8f       	std	Y+30, r25	; 0x1e
    4296:	8d 8f       	std	Y+29, r24	; 0x1d
			if(cnt==0){
				cnt=3 ;
				LCD_VidSendString(" wait 10 sec");
				_delay_ms(1000);
				LCD_VidSendCMD(0x01) ;
				for(i=1;i<11;i++){
    4298:	de 01       	movw	r26, r28
    429a:	ad 59       	subi	r26, 0x9D	; 157
    429c:	bf 4f       	sbci	r27, 0xFF	; 255
    429e:	fe 01       	movw	r30, r28
    42a0:	ed 59       	subi	r30, 0x9D	; 157
    42a2:	ff 4f       	sbci	r31, 0xFF	; 255
    42a4:	80 81       	ld	r24, Z
    42a6:	91 81       	ldd	r25, Z+1	; 0x01
    42a8:	01 96       	adiw	r24, 0x01	; 1
    42aa:	11 96       	adiw	r26, 0x01	; 1
    42ac:	9c 93       	st	X, r25
    42ae:	8e 93       	st	-X, r24
    42b0:	fe 01       	movw	r30, r28
    42b2:	ed 59       	subi	r30, 0x9D	; 157
    42b4:	ff 4f       	sbci	r31, 0xFF	; 255
    42b6:	80 81       	ld	r24, Z
    42b8:	91 81       	ldd	r25, Z+1	; 0x01
    42ba:	8b 30       	cpi	r24, 0x0B	; 11
    42bc:	91 05       	cpc	r25, r1
    42be:	0c f4       	brge	.+2      	; 0x42c2 <main+0x80a>
    42c0:	ee ce       	rjmp	.-548    	; 0x409e <main+0x5e6>



		}

		if(numwa==0){
    42c2:	fe 01       	movw	r30, r28
    42c4:	eb 59       	subi	r30, 0x9B	; 155
    42c6:	ff 4f       	sbci	r31, 0xFF	; 255
    42c8:	80 81       	ld	r24, Z
    42ca:	88 23       	and	r24, r24
    42cc:	09 f0       	breq	.+2      	; 0x42d0 <main+0x818>
    42ce:	1a cd       	rjmp	.-1484   	; 0x3d04 <main+0x24c>
			if(numtimes==0){
    42d0:	fe 01       	movw	r30, r28
    42d2:	e8 59       	subi	r30, 0x98	; 152
    42d4:	ff 4f       	sbci	r31, 0xFF	; 255
    42d6:	80 81       	ld	r24, Z
    42d8:	88 23       	and	r24, r24
    42da:	09 f0       	breq	.+2      	; 0x42de <main+0x826>
    42dc:	f5 c0       	rjmp	.+490    	; 0x44c8 <main+0xa10>
				numtimes++;
    42de:	de 01       	movw	r26, r28
    42e0:	a8 59       	subi	r26, 0x98	; 152
    42e2:	bf 4f       	sbci	r27, 0xFF	; 255
    42e4:	fe 01       	movw	r30, r28
    42e6:	e8 59       	subi	r30, 0x98	; 152
    42e8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ea:	80 81       	ld	r24, Z
    42ec:	8f 5f       	subi	r24, 0xFF	; 255
    42ee:	8c 93       	st	X, r24
    42f0:	80 e0       	ldi	r24, 0x00	; 0
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	a8 e4       	ldi	r26, 0x48	; 72
    42f6:	b3 e4       	ldi	r27, 0x43	; 67
    42f8:	89 8f       	std	Y+25, r24	; 0x19
    42fa:	9a 8f       	std	Y+26, r25	; 0x1a
    42fc:	ab 8f       	std	Y+27, r26	; 0x1b
    42fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4300:	69 8d       	ldd	r22, Y+25	; 0x19
    4302:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4304:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4306:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4308:	20 e0       	ldi	r18, 0x00	; 0
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	4a e7       	ldi	r20, 0x7A	; 122
    430e:	55 e4       	ldi	r21, 0x45	; 69
    4310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4314:	dc 01       	movw	r26, r24
    4316:	cb 01       	movw	r24, r22
    4318:	8d 8b       	std	Y+21, r24	; 0x15
    431a:	9e 8b       	std	Y+22, r25	; 0x16
    431c:	af 8b       	std	Y+23, r26	; 0x17
    431e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4320:	6d 89       	ldd	r22, Y+21	; 0x15
    4322:	7e 89       	ldd	r23, Y+22	; 0x16
    4324:	8f 89       	ldd	r24, Y+23	; 0x17
    4326:	98 8d       	ldd	r25, Y+24	; 0x18
    4328:	20 e0       	ldi	r18, 0x00	; 0
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	40 e8       	ldi	r20, 0x80	; 128
    432e:	5f e3       	ldi	r21, 0x3F	; 63
    4330:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4334:	88 23       	and	r24, r24
    4336:	2c f4       	brge	.+10     	; 0x4342 <main+0x88a>
		__ticks = 1;
    4338:	81 e0       	ldi	r24, 0x01	; 1
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	9c 8b       	std	Y+20, r25	; 0x14
    433e:	8b 8b       	std	Y+19, r24	; 0x13
    4340:	3f c0       	rjmp	.+126    	; 0x43c0 <main+0x908>
	else if (__tmp > 65535)
    4342:	6d 89       	ldd	r22, Y+21	; 0x15
    4344:	7e 89       	ldd	r23, Y+22	; 0x16
    4346:	8f 89       	ldd	r24, Y+23	; 0x17
    4348:	98 8d       	ldd	r25, Y+24	; 0x18
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	3f ef       	ldi	r19, 0xFF	; 255
    434e:	4f e7       	ldi	r20, 0x7F	; 127
    4350:	57 e4       	ldi	r21, 0x47	; 71
    4352:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4356:	18 16       	cp	r1, r24
    4358:	4c f5       	brge	.+82     	; 0x43ac <main+0x8f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    435a:	69 8d       	ldd	r22, Y+25	; 0x19
    435c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    435e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4360:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	40 e2       	ldi	r20, 0x20	; 32
    4368:	51 e4       	ldi	r21, 0x41	; 65
    436a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    436e:	dc 01       	movw	r26, r24
    4370:	cb 01       	movw	r24, r22
    4372:	bc 01       	movw	r22, r24
    4374:	cd 01       	movw	r24, r26
    4376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437a:	dc 01       	movw	r26, r24
    437c:	cb 01       	movw	r24, r22
    437e:	9c 8b       	std	Y+20, r25	; 0x14
    4380:	8b 8b       	std	Y+19, r24	; 0x13
    4382:	0f c0       	rjmp	.+30     	; 0x43a2 <main+0x8ea>
    4384:	80 e9       	ldi	r24, 0x90	; 144
    4386:	91 e0       	ldi	r25, 0x01	; 1
    4388:	9a 8b       	std	Y+18, r25	; 0x12
    438a:	89 8b       	std	Y+17, r24	; 0x11
    438c:	89 89       	ldd	r24, Y+17	; 0x11
    438e:	9a 89       	ldd	r25, Y+18	; 0x12
    4390:	01 97       	sbiw	r24, 0x01	; 1
    4392:	f1 f7       	brne	.-4      	; 0x4390 <main+0x8d8>
    4394:	9a 8b       	std	Y+18, r25	; 0x12
    4396:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4398:	8b 89       	ldd	r24, Y+19	; 0x13
    439a:	9c 89       	ldd	r25, Y+20	; 0x14
    439c:	01 97       	sbiw	r24, 0x01	; 1
    439e:	9c 8b       	std	Y+20, r25	; 0x14
    43a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a2:	8b 89       	ldd	r24, Y+19	; 0x13
    43a4:	9c 89       	ldd	r25, Y+20	; 0x14
    43a6:	00 97       	sbiw	r24, 0x00	; 0
    43a8:	69 f7       	brne	.-38     	; 0x4384 <main+0x8cc>
    43aa:	14 c0       	rjmp	.+40     	; 0x43d4 <main+0x91c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ac:	6d 89       	ldd	r22, Y+21	; 0x15
    43ae:	7e 89       	ldd	r23, Y+22	; 0x16
    43b0:	8f 89       	ldd	r24, Y+23	; 0x17
    43b2:	98 8d       	ldd	r25, Y+24	; 0x18
    43b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b8:	dc 01       	movw	r26, r24
    43ba:	cb 01       	movw	r24, r22
    43bc:	9c 8b       	std	Y+20, r25	; 0x14
    43be:	8b 8b       	std	Y+19, r24	; 0x13
    43c0:	8b 89       	ldd	r24, Y+19	; 0x13
    43c2:	9c 89       	ldd	r25, Y+20	; 0x14
    43c4:	98 8b       	std	Y+16, r25	; 0x10
    43c6:	8f 87       	std	Y+15, r24	; 0x0f
    43c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    43ca:	98 89       	ldd	r25, Y+16	; 0x10
    43cc:	01 97       	sbiw	r24, 0x01	; 1
    43ce:	f1 f7       	brne	.-4      	; 0x43cc <main+0x914>
    43d0:	98 8b       	std	Y+16, r25	; 0x10
    43d2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(200);
				LCD_Clear();
    43d4:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_Clear>
				LCD_VidSendString("CORRECT");
    43d8:	8e e9       	ldi	r24, 0x9E	; 158
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LCD_VidSendString>
    43e0:	80 e0       	ldi	r24, 0x00	; 0
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	aa ef       	ldi	r26, 0xFA	; 250
    43e6:	b3 e4       	ldi	r27, 0x43	; 67
    43e8:	8b 87       	std	Y+11, r24	; 0x0b
    43ea:	9c 87       	std	Y+12, r25	; 0x0c
    43ec:	ad 87       	std	Y+13, r26	; 0x0d
    43ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    43f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    43f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    43f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    43f8:	20 e0       	ldi	r18, 0x00	; 0
    43fa:	30 e0       	ldi	r19, 0x00	; 0
    43fc:	4a e7       	ldi	r20, 0x7A	; 122
    43fe:	55 e4       	ldi	r21, 0x45	; 69
    4400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4404:	dc 01       	movw	r26, r24
    4406:	cb 01       	movw	r24, r22
    4408:	8f 83       	std	Y+7, r24	; 0x07
    440a:	98 87       	std	Y+8, r25	; 0x08
    440c:	a9 87       	std	Y+9, r26	; 0x09
    440e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4410:	6f 81       	ldd	r22, Y+7	; 0x07
    4412:	78 85       	ldd	r23, Y+8	; 0x08
    4414:	89 85       	ldd	r24, Y+9	; 0x09
    4416:	9a 85       	ldd	r25, Y+10	; 0x0a
    4418:	20 e0       	ldi	r18, 0x00	; 0
    441a:	30 e0       	ldi	r19, 0x00	; 0
    441c:	40 e8       	ldi	r20, 0x80	; 128
    441e:	5f e3       	ldi	r21, 0x3F	; 63
    4420:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4424:	88 23       	and	r24, r24
    4426:	2c f4       	brge	.+10     	; 0x4432 <main+0x97a>
		__ticks = 1;
    4428:	81 e0       	ldi	r24, 0x01	; 1
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	9e 83       	std	Y+6, r25	; 0x06
    442e:	8d 83       	std	Y+5, r24	; 0x05
    4430:	3f c0       	rjmp	.+126    	; 0x44b0 <main+0x9f8>
	else if (__tmp > 65535)
    4432:	6f 81       	ldd	r22, Y+7	; 0x07
    4434:	78 85       	ldd	r23, Y+8	; 0x08
    4436:	89 85       	ldd	r24, Y+9	; 0x09
    4438:	9a 85       	ldd	r25, Y+10	; 0x0a
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	3f ef       	ldi	r19, 0xFF	; 255
    443e:	4f e7       	ldi	r20, 0x7F	; 127
    4440:	57 e4       	ldi	r21, 0x47	; 71
    4442:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4446:	18 16       	cp	r1, r24
    4448:	4c f5       	brge	.+82     	; 0x449c <main+0x9e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    444a:	6b 85       	ldd	r22, Y+11	; 0x0b
    444c:	7c 85       	ldd	r23, Y+12	; 0x0c
    444e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4450:	9e 85       	ldd	r25, Y+14	; 0x0e
    4452:	20 e0       	ldi	r18, 0x00	; 0
    4454:	30 e0       	ldi	r19, 0x00	; 0
    4456:	40 e2       	ldi	r20, 0x20	; 32
    4458:	51 e4       	ldi	r21, 0x41	; 65
    445a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    445e:	dc 01       	movw	r26, r24
    4460:	cb 01       	movw	r24, r22
    4462:	bc 01       	movw	r22, r24
    4464:	cd 01       	movw	r24, r26
    4466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    446a:	dc 01       	movw	r26, r24
    446c:	cb 01       	movw	r24, r22
    446e:	9e 83       	std	Y+6, r25	; 0x06
    4470:	8d 83       	std	Y+5, r24	; 0x05
    4472:	0f c0       	rjmp	.+30     	; 0x4492 <main+0x9da>
    4474:	80 e9       	ldi	r24, 0x90	; 144
    4476:	91 e0       	ldi	r25, 0x01	; 1
    4478:	9c 83       	std	Y+4, r25	; 0x04
    447a:	8b 83       	std	Y+3, r24	; 0x03
    447c:	8b 81       	ldd	r24, Y+3	; 0x03
    447e:	9c 81       	ldd	r25, Y+4	; 0x04
    4480:	01 97       	sbiw	r24, 0x01	; 1
    4482:	f1 f7       	brne	.-4      	; 0x4480 <main+0x9c8>
    4484:	9c 83       	std	Y+4, r25	; 0x04
    4486:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4488:	8d 81       	ldd	r24, Y+5	; 0x05
    448a:	9e 81       	ldd	r25, Y+6	; 0x06
    448c:	01 97       	sbiw	r24, 0x01	; 1
    448e:	9e 83       	std	Y+6, r25	; 0x06
    4490:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4492:	8d 81       	ldd	r24, Y+5	; 0x05
    4494:	9e 81       	ldd	r25, Y+6	; 0x06
    4496:	00 97       	sbiw	r24, 0x00	; 0
    4498:	69 f7       	brne	.-38     	; 0x4474 <main+0x9bc>
    449a:	14 c0       	rjmp	.+40     	; 0x44c4 <main+0xa0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    449c:	6f 81       	ldd	r22, Y+7	; 0x07
    449e:	78 85       	ldd	r23, Y+8	; 0x08
    44a0:	89 85       	ldd	r24, Y+9	; 0x09
    44a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	9e 83       	std	Y+6, r25	; 0x06
    44ae:	8d 83       	std	Y+5, r24	; 0x05
    44b0:	8d 81       	ldd	r24, Y+5	; 0x05
    44b2:	9e 81       	ldd	r25, Y+6	; 0x06
    44b4:	9a 83       	std	Y+2, r25	; 0x02
    44b6:	89 83       	std	Y+1, r24	; 0x01
    44b8:	89 81       	ldd	r24, Y+1	; 0x01
    44ba:	9a 81       	ldd	r25, Y+2	; 0x02
    44bc:	01 97       	sbiw	r24, 0x01	; 1
    44be:	f1 f7       	brne	.-4      	; 0x44bc <main+0xa04>
    44c0:	9a 83       	std	Y+2, r25	; 0x02
    44c2:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				LCD_Clear(); }
    44c4:	0e 94 b3 12 	call	0x2566	; 0x2566 <LCD_Clear>

			FollowTheLine() ;
    44c8:	0e 94 c4 12 	call	0x2588	; 0x2588 <FollowTheLine>
    44cc:	1b cc       	rjmp	.-1994   	; 0x3d04 <main+0x24c>

000044ce <__mulsi3>:
    44ce:	62 9f       	mul	r22, r18
    44d0:	d0 01       	movw	r26, r0
    44d2:	73 9f       	mul	r23, r19
    44d4:	f0 01       	movw	r30, r0
    44d6:	82 9f       	mul	r24, r18
    44d8:	e0 0d       	add	r30, r0
    44da:	f1 1d       	adc	r31, r1
    44dc:	64 9f       	mul	r22, r20
    44de:	e0 0d       	add	r30, r0
    44e0:	f1 1d       	adc	r31, r1
    44e2:	92 9f       	mul	r25, r18
    44e4:	f0 0d       	add	r31, r0
    44e6:	83 9f       	mul	r24, r19
    44e8:	f0 0d       	add	r31, r0
    44ea:	74 9f       	mul	r23, r20
    44ec:	f0 0d       	add	r31, r0
    44ee:	65 9f       	mul	r22, r21
    44f0:	f0 0d       	add	r31, r0
    44f2:	99 27       	eor	r25, r25
    44f4:	72 9f       	mul	r23, r18
    44f6:	b0 0d       	add	r27, r0
    44f8:	e1 1d       	adc	r30, r1
    44fa:	f9 1f       	adc	r31, r25
    44fc:	63 9f       	mul	r22, r19
    44fe:	b0 0d       	add	r27, r0
    4500:	e1 1d       	adc	r30, r1
    4502:	f9 1f       	adc	r31, r25
    4504:	bd 01       	movw	r22, r26
    4506:	cf 01       	movw	r24, r30
    4508:	11 24       	eor	r1, r1
    450a:	08 95       	ret

0000450c <__udivmodsi4>:
    450c:	a1 e2       	ldi	r26, 0x21	; 33
    450e:	1a 2e       	mov	r1, r26
    4510:	aa 1b       	sub	r26, r26
    4512:	bb 1b       	sub	r27, r27
    4514:	fd 01       	movw	r30, r26
    4516:	0d c0       	rjmp	.+26     	; 0x4532 <__udivmodsi4_ep>

00004518 <__udivmodsi4_loop>:
    4518:	aa 1f       	adc	r26, r26
    451a:	bb 1f       	adc	r27, r27
    451c:	ee 1f       	adc	r30, r30
    451e:	ff 1f       	adc	r31, r31
    4520:	a2 17       	cp	r26, r18
    4522:	b3 07       	cpc	r27, r19
    4524:	e4 07       	cpc	r30, r20
    4526:	f5 07       	cpc	r31, r21
    4528:	20 f0       	brcs	.+8      	; 0x4532 <__udivmodsi4_ep>
    452a:	a2 1b       	sub	r26, r18
    452c:	b3 0b       	sbc	r27, r19
    452e:	e4 0b       	sbc	r30, r20
    4530:	f5 0b       	sbc	r31, r21

00004532 <__udivmodsi4_ep>:
    4532:	66 1f       	adc	r22, r22
    4534:	77 1f       	adc	r23, r23
    4536:	88 1f       	adc	r24, r24
    4538:	99 1f       	adc	r25, r25
    453a:	1a 94       	dec	r1
    453c:	69 f7       	brne	.-38     	; 0x4518 <__udivmodsi4_loop>
    453e:	60 95       	com	r22
    4540:	70 95       	com	r23
    4542:	80 95       	com	r24
    4544:	90 95       	com	r25
    4546:	9b 01       	movw	r18, r22
    4548:	ac 01       	movw	r20, r24
    454a:	bd 01       	movw	r22, r26
    454c:	cf 01       	movw	r24, r30
    454e:	08 95       	ret

00004550 <__prologue_saves__>:
    4550:	2f 92       	push	r2
    4552:	3f 92       	push	r3
    4554:	4f 92       	push	r4
    4556:	5f 92       	push	r5
    4558:	6f 92       	push	r6
    455a:	7f 92       	push	r7
    455c:	8f 92       	push	r8
    455e:	9f 92       	push	r9
    4560:	af 92       	push	r10
    4562:	bf 92       	push	r11
    4564:	cf 92       	push	r12
    4566:	df 92       	push	r13
    4568:	ef 92       	push	r14
    456a:	ff 92       	push	r15
    456c:	0f 93       	push	r16
    456e:	1f 93       	push	r17
    4570:	cf 93       	push	r28
    4572:	df 93       	push	r29
    4574:	cd b7       	in	r28, 0x3d	; 61
    4576:	de b7       	in	r29, 0x3e	; 62
    4578:	ca 1b       	sub	r28, r26
    457a:	db 0b       	sbc	r29, r27
    457c:	0f b6       	in	r0, 0x3f	; 63
    457e:	f8 94       	cli
    4580:	de bf       	out	0x3e, r29	; 62
    4582:	0f be       	out	0x3f, r0	; 63
    4584:	cd bf       	out	0x3d, r28	; 61
    4586:	09 94       	ijmp

00004588 <__epilogue_restores__>:
    4588:	2a 88       	ldd	r2, Y+18	; 0x12
    458a:	39 88       	ldd	r3, Y+17	; 0x11
    458c:	48 88       	ldd	r4, Y+16	; 0x10
    458e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4590:	6e 84       	ldd	r6, Y+14	; 0x0e
    4592:	7d 84       	ldd	r7, Y+13	; 0x0d
    4594:	8c 84       	ldd	r8, Y+12	; 0x0c
    4596:	9b 84       	ldd	r9, Y+11	; 0x0b
    4598:	aa 84       	ldd	r10, Y+10	; 0x0a
    459a:	b9 84       	ldd	r11, Y+9	; 0x09
    459c:	c8 84       	ldd	r12, Y+8	; 0x08
    459e:	df 80       	ldd	r13, Y+7	; 0x07
    45a0:	ee 80       	ldd	r14, Y+6	; 0x06
    45a2:	fd 80       	ldd	r15, Y+5	; 0x05
    45a4:	0c 81       	ldd	r16, Y+4	; 0x04
    45a6:	1b 81       	ldd	r17, Y+3	; 0x03
    45a8:	aa 81       	ldd	r26, Y+2	; 0x02
    45aa:	b9 81       	ldd	r27, Y+1	; 0x01
    45ac:	ce 0f       	add	r28, r30
    45ae:	d1 1d       	adc	r29, r1
    45b0:	0f b6       	in	r0, 0x3f	; 63
    45b2:	f8 94       	cli
    45b4:	de bf       	out	0x3e, r29	; 62
    45b6:	0f be       	out	0x3f, r0	; 63
    45b8:	cd bf       	out	0x3d, r28	; 61
    45ba:	ed 01       	movw	r28, r26
    45bc:	08 95       	ret

000045be <_exit>:
    45be:	f8 94       	cli

000045c0 <__stop_program>:
    45c0:	ff cf       	rjmp	.-2      	; 0x45c0 <__stop_program>
